from shared.FunctionClass import BaseFunction
from shared.ParameterClass import Parameter, ParameterType
from shared.OutputParameterClass import OutputParameter, OutputParameterType
from shared.InputClass import StandardInput
from shared.OutputClass import StandardOutput
from shared.BaseClass import APIWrapper, AuthType
from dataclasses import dataclass


@dataclass
class APIClientConfig:
    """Configuration class for API settings"""

    consumer_key: str
    consumer_secret: str
    api_version: str = "wc/v3"

    auth_type: AuthType
    verify_ssl: bool = True
    timeout: int = 30
    query_string_auth: bool

    def get_oauth_params(self, method: str, url: str) -> Dict[str, str]:
        return {"key": consumer_key, "secret": consumer_secret}

    def __init__(self):  # Validation on init.
        assert (
            all(x is not None for x in [self.consumer_key, self.consumer_secret]),
            "Missing required API key, check APIClientConfig.",
        )


api_wrapper = APIWrapper(
    APIClientConfig(), base_url="https://api.github.com/", name="Github Actions"
)


class List_artifacts_for_a_repository(BaseFunction):
    """Lists all artifacts for a repository."""

    name = "List artifacts for a repository"
    url = "/repos/{owner}/{repo}/actions/artifacts"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # The account owner of the repository.,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # The name of the repository.,
            Parameter(
                name="per_page", param_type=ParameterType.INTEGER, required=False
            ),  # Results per page (max 100). Defaults to 30.,
            Parameter(
                name="page", param_type=ParameterType.INTEGER, required=False
            ),  # Page number of the results to fetch. Defaults to 1.,
            Parameter(
                name="name", param_type=ParameterType.STRING, required=False
            ),  # The name of the artifact to filter results by.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="total_count",
                param_type=OutputParameterType.INTEGER,
                is_array=False,
            ),  # Total number of artifacts.,
            OutputParameter(
                name="artifacts", param_type=OutputParameterType.OBJECT, is_array=True
            ),  # List of artifact objects
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                List_artifacts_for_a_repository.method,
                List_artifacts_for_a_repository.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = (
                f"Error running function 'List_artifacts_for_a_repository': {str(e)}"
            )
            logging.error(error_msg)
            raise ValueError(error_msg)


class Get_an_artifact(BaseFunction):
    """Gets a specific artifact."""

    name = "Get an artifact"
    url = "/repos/{owner}/{repo}/actions/artifacts/{artifact_id}"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # The account owner of the repository.,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # The name of the repository.,
            Parameter(
                name="artifact_id", param_type=ParameterType.INTEGER, required=True
            ),  # The artifact ID.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="id", param_type=OutputParameterType.INTEGER, is_array=False
            ),  # ID of the artifact.,
            OutputParameter(
                name="node_id", param_type=OutputParameterType.STRING, is_array=False
            ),  # Node ID of the artifact.,
            OutputParameter(
                name="name", param_type=OutputParameterType.STRING, is_array=False
            ),  # Name of the artifact.,
            OutputParameter(
                name="size_in_bytes",
                param_type=OutputParameterType.INTEGER,
                is_array=False,
            ),  # Size of the artifact in bytes.,
            OutputParameter(
                name="url", param_type=OutputParameterType.STRING, is_array=False
            ),  # API URL to get the artifact.,
            OutputParameter(
                name="archive_download_url",
                param_type=OutputParameterType.STRING,
                is_array=False,
            ),  # URL to download the artifact ZIP archive.,
            OutputParameter(
                name="expired", param_type=OutputParameterType.BOOLEAN, is_array=False
            ),  # Whether the artifact is expired.,
            OutputParameter(
                name="created_at", param_type=OutputParameterType.STRING, is_array=False
            ),  # Timestamp when created.,
            OutputParameter(
                name="expires_at", param_type=OutputParameterType.STRING, is_array=False
            ),  # Timestamp when expires.,
            OutputParameter(
                name="updated_at", param_type=OutputParameterType.STRING, is_array=False
            ),  # Timestamp when last updated.,
            OutputParameter(
                name="digest", param_type=OutputParameterType.STRING, is_array=False
            ),  # SHA256 digest.,
            OutputParameter(
                name="workflow_run",
                param_type=OutputParameterType.OBJECT,
                is_array=False,
            ),  # Workflow run details
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Get_an_artifact.method, Get_an_artifact.url, input_data.validated_data
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_an_artifact': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Delete_an_artifact(BaseFunction):
    """Deletes an artifact."""

    name = "Delete an artifact"
    url = "/repos/{owner}/{repo}/actions/artifacts/{artifact_id}"
    args_in_url = True
    method = DELETE

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # The account owner of the repository.,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # The name of the repository.,
            Parameter(
                name="artifact_id", param_type=ParameterType.INTEGER, required=True
            ),  # The artifact ID.
        ]

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Delete_an_artifact.method,
                Delete_an_artifact.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Delete_an_artifact': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Download_an_artifact(BaseFunction):
    """Gets a redirect URL to download an archive of an artifact."""

    name = "Download an artifact"
    url = "/repos/{owner}/{repo}/actions/artifacts/{artifact_id}/{archive_format}"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # The account owner of the repository.,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # The repository name.,
            Parameter(
                name="artifact_id", param_type=ParameterType.INTEGER, required=True
            ),  # The artifact ID.,
            Parameter(
                name="archive_format", param_type=ParameterType.STRING, required=True
            ),  # Format of the archive, typically 'zip'.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="status_code",
                param_type=OutputParameterType.INTEGER,
                is_array=False,
            ),  # HTTP status code indicating result.
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Download_an_artifact.method,
                Download_an_artifact.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Download_an_artifact': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class List_workflow_run_artifacts(BaseFunction):
    """Lists artifacts for a workflow run."""

    name = "List workflow run artifacts"
    url = "/repos/{owner}/{repo}/actions/runs/{run_id}/artifacts"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # The account owner of the repository.,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # The repository name.,
            Parameter(
                name="run_id", param_type=ParameterType.INTEGER, required=True
            ),  # The workflow run ID.,
            Parameter(
                name="per_page", param_type=ParameterType.INTEGER, required=False
            ),  # Results per page, max 100. Default is 30.,
            Parameter(
                name="page", param_type=ParameterType.INTEGER, required=False
            ),  # Page number to fetch. Default is 1.,
            Parameter(
                name="name", param_type=ParameterType.STRING, required=False
            ),  # Filter by artifact name.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="total_count",
                param_type=OutputParameterType.INTEGER,
                is_array=False,
            ),  # Total total artifacts.,
            OutputParameter(
                name="artifacts", param_type=OutputParameterType.OBJECT, is_array=True
            ),  # List of artifacts
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                List_workflow_run_artifacts.method,
                List_workflow_run_artifacts.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = (
                f"Error running function 'List_workflow_run_artifacts': {str(e)}"
            )
            logging.error(error_msg)
            raise ValueError(error_msg)


class List_organization_variables(BaseFunction):
    """Lists all organization variables."""

    name = "List organization variables"
    url = "https://api.github.com/orgs/{org}/actions/variables"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="accept", param_type=ParameterType.STRING, required=False
            ),  # Setting to 'application/vnd.github+json' is recommended.,
            Parameter(
                name="org", param_type=ParameterType.STRING, required=True
            ),  # The organization name. The name is not case sensitive.,
            Parameter(
                name="per_page", param_type=ParameterType.INTEGER, required=False
            ),  # The number of results per page (max 30). Default is 10.,
            Parameter(
                name="page", param_type=ParameterType.INTEGER, required=False
            ),  # The page number of the results to fetch. Default is 1.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="total_count",
                param_type=OutputParameterType.INTEGER,
                is_array=False,
            ),  # Total number of variables.,
            OutputParameter(
                name="variables", param_type=OutputParameterType.OBJECT, is_array=True
            ),  # List of variables.,
            OutputParameter(
                name="name", param_type=OutputParameterType.STRING, is_array=False
            ),  # Variable name.,
            OutputParameter(
                name="value", param_type=OutputParameterType.STRING, is_array=False
            ),  # Variable value.,
            OutputParameter(
                name="created_at", param_type=OutputParameterType.STRING, is_array=False
            ),  # Creation timestamp.,
            OutputParameter(
                name="updated_at", param_type=OutputParameterType.STRING, is_array=False
            ),  # Last update timestamp.,
            OutputParameter(
                name="visibility", param_type=OutputParameterType.STRING, is_array=False
            ),  # Visibility of the variable.,
            OutputParameter(
                name="selected_repositories_url",
                param_type=OutputParameterType.STRING,
                is_array=False,
            ),  # URL for repositories with access.
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                List_organization_variables.method,
                List_organization_variables.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = (
                f"Error running function 'List_organization_variables': {str(e)}"
            )
            logging.error(error_msg)
            raise ValueError(error_msg)


class Create_an_organization_variable(BaseFunction):
    """Creates an organization variable."""

    name = "Create an organization variable"
    url = "https://api.github.com/orgs/{org}/actions/variables"
    args_in_url = True
    method = INSERT

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="accept", param_type=ParameterType.STRING, required=False
            ),  # Setting to 'application/vnd.github+json' is recommended.,
            Parameter(
                name="org", param_type=ParameterType.STRING, required=True
            ),  # The organization name.,
            Parameter(
                name="body", param_type=OutputParameterType.OBJECT, required=True
            ),  # Body containing variable details.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="status_code",
                param_type=OutputParameterType.STRING,
                is_array=False,
            ),  # Response status code.,
            OutputParameter(
                name="name", param_type=OutputParameterType.STRING, is_array=False
            ),  # Variable name.,
            OutputParameter(
                name="value", param_type=OutputParameterType.STRING, is_array=False
            ),  # Variable value.,
            OutputParameter(
                name="created_at", param_type=OutputParameterType.STRING, is_array=False
            ),  # Creation timestamp.,
            OutputParameter(
                name="updated_at", param_type=OutputParameterType.STRING, is_array=False
            ),  # Last update timestamp.,
            OutputParameter(
                name="visibility", param_type=OutputParameterType.STRING, is_array=False
            ),  # Visibility.,
            OutputParameter(
                name="selected_repository_ids",
                param_type=OutputParameterType.INTEGER,
                is_array=True,
            ),  # List of repository IDs.
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Create_an_organization_variable.method,
                Create_an_organization_variable.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = (
                f"Error running function 'Create_an_organization_variable': {str(e)}"
            )
            logging.error(error_msg)
            raise ValueError(error_msg)


class Get_an_organization_variable(BaseFunction):
    """Retrieves a specific organization variable."""

    name = "Get an organization variable"
    url = "https://api.github.com/orgs/{org}/actions/variables/{name}"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="accept", param_type=ParameterType.STRING, required=False
            ),  # Setting to 'application/vnd.github+json' is recommended.,
            Parameter(
                name="org", param_type=ParameterType.STRING, required=True
            ),  # Organization name.,
            Parameter(
                name="name", param_type=ParameterType.STRING, required=True
            ),  # Variable name.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="name", param_type=OutputParameterType.STRING, is_array=False
            ),  # Variable name.,
            OutputParameter(
                name="value", param_type=OutputParameterType.STRING, is_array=False
            ),  # Variable value.,
            OutputParameter(
                name="created_at", param_type=OutputParameterType.STRING, is_array=False
            ),  # Creation timestamp.,
            OutputParameter(
                name="updated_at", param_type=OutputParameterType.STRING, is_array=False
            ),  # Last update timestamp.,
            OutputParameter(
                name="visibility", param_type=OutputParameterType.STRING, is_array=False
            ),  # Visibility.,
            OutputParameter(
                name="selected_repositories_url",
                param_type=OutputParameterType.STRING,
                is_array=False,
            ),  # URL for repositories with access.
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Get_an_organization_variable.method,
                Get_an_organization_variable.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = (
                f"Error running function 'Get_an_organization_variable': {str(e)}"
            )
            logging.error(error_msg)
            raise ValueError(error_msg)


class Update_an_organization_variable(BaseFunction):
    """Updates an organization variable."""

    name = "Update an organization variable"
    url = "https://api.github.com/orgs/{org}/actions/variables/{name}"
    args_in_url = True
    method = UPDATE

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="accept", param_type=ParameterType.STRING, required=False
            ),  # Setting to 'application/vnd.github+json' is recommended.,
            Parameter(
                name="org", param_type=ParameterType.STRING, required=True
            ),  # Organization name.,
            Parameter(
                name="name", param_type=ParameterType.STRING, required=True
            ),  # Variable name.,
            Parameter(
                name="body", param_type=OutputParameterType.OBJECT, required=True
            ),  # Body containing updated variable details.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="status_code",
                param_type=OutputParameterType.STRING,
                is_array=False,
            ),  # Response status code.,
            OutputParameter(
                name="name", param_type=OutputParameterType.STRING, is_array=False
            ),  # Variable name.,
            OutputParameter(
                name="value", param_type=OutputParameterType.STRING, is_array=False
            ),  # Variable value.,
            OutputParameter(
                name="created_at", param_type=OutputParameterType.STRING, is_array=False
            ),  # Creation timestamp.,
            OutputParameter(
                name="updated_at", param_type=OutputParameterType.STRING, is_array=False
            ),  # Last update timestamp.,
            OutputParameter(
                name="visibility", param_type=OutputParameterType.STRING, is_array=False
            ),  # Visibility.,
            OutputParameter(
                name="selected_repository_ids",
                param_type=OutputParameterType.INTEGER,
                is_array=True,
            ),  # List of repository IDs.
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Update_an_organization_variable.method,
                Update_an_organization_variable.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = (
                f"Error running function 'Update_an_organization_variable': {str(e)}"
            )
            logging.error(error_msg)
            raise ValueError(error_msg)


class Delete_an_organization_variable(BaseFunction):
    """Deletes an organization variable by name."""

    name = "Delete an organization variable"
    url = "https://api.github.com/orgs/{org}/actions/variables/{name}"
    args_in_url = True
    method = DELETE

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="accept", param_type=ParameterType.STRING, required=False
            ),  # Setting to 'application/vnd.github+json' is recommended.,
            Parameter(
                name="org", param_type=ParameterType.STRING, required=True
            ),  # Organization name.,
            Parameter(
                name="name", param_type=ParameterType.STRING, required=True
            ),  # Variable name.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="status_code",
                param_type=OutputParameterType.STRING,
                is_array=False,
            ),  # Response status code.
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Delete_an_organization_variable.method,
                Delete_an_organization_variable.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = (
                f"Error running function 'Delete_an_organization_variable': {str(e)}"
            )
            logging.error(error_msg)
            raise ValueError(error_msg)


class List_selected_repositories_for_an_organization_variable(BaseFunction):
    """Lists repositories with access to a variable."""

    name = "List selected repositories for an organization variable"
    url = "https://api.github.com/orgs/{org}/actions/variables/{name}/repositories"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="accept", param_type=ParameterType.STRING, required=False
            ),  # Setting to 'application/vnd.github+json' is recommended.,
            Parameter(
                name="org", param_type=ParameterType.STRING, required=True
            ),  # Organization name.,
            Parameter(
                name="name", param_type=ParameterType.STRING, required=True
            ),  # Variable name.,
            Parameter(
                name="page", param_type=ParameterType.INTEGER, required=False
            ),  # Page number for pagination.,
            Parameter(
                name="per_page", param_type=ParameterType.INTEGER, required=False
            ),  # Results per page, max 100.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="total_count",
                param_type=OutputParameterType.INTEGER,
                is_array=False,
            ),  # Total number of repositories.,
            OutputParameter(
                name="repositories",
                param_type=OutputParameterType.OBJECT,
                is_array=True,
            ),  # List of repositories with access.,
            OutputParameter(
                name="id", param_type=OutputParameterType.INTEGER, is_array=False
            ),  # Repository ID.,
            OutputParameter(
                name="node_id", param_type=OutputParameterType.STRING, is_array=False
            ),  # Repository node ID.,
            OutputParameter(
                name="name", param_type=OutputParameterType.STRING, is_array=False
            ),  # Repository name.,
            OutputParameter(
                name="full_name", param_type=OutputParameterType.STRING, is_array=False
            ),  # Full repository name.,
            OutputParameter(
                name="owner", param_type=OutputParameterType.OBJECT, is_array=True
            ),  # Owner information.,
            OutputParameter(
                name="login", param_type=OutputParameterType.STRING, is_array=False
            ),  # Owner login.,
            OutputParameter(
                name="id", param_type=OutputParameterType.INTEGER, is_array=False
            ),  # Owner ID.
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                List_selected_repositories_for_an_organization_variable.method,
                List_selected_repositories_for_an_organization_variable.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'List_selected_repositories_for_an_organization_variable': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Set_selected_repositories_for_an_organization_variable(BaseFunction):
    """Replaces all repositories for a variable."""

    name = "Set selected repositories for an organization variable"
    url = "https://api.github.com/orgs/{org}/actions/variables/{name}/repositories"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="accept", param_type=ParameterType.STRING, required=False
            ),  # Setting to 'application/vnd.github+json' is recommended.,
            Parameter(
                name="org", param_type=ParameterType.STRING, required=True
            ),  # Organization name.,
            Parameter(
                name="name", param_type=ParameterType.STRING, required=True
            ),  # Variable name.,
            Parameter(
                name="body", param_type=OutputParameterType.OBJECT, required=True
            ),  # Body with repositories to set.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="status_code",
                param_type=OutputParameterType.STRING,
                is_array=False,
            ),  # Response status code.
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Set_selected_repositories_for_an_organization_variable.method,
                Set_selected_repositories_for_an_organization_variable.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Set_selected_repositories_for_an_organization_variable': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Add_selected_repository_to_an_organization_variable(BaseFunction):
    """Adds a repository to a variable's access list."""

    name = "Add selected repository to an organization variable"
    url = "https://api.github.com/orgs/{org}/actions/variables/{name}/repositories/{repository_id}"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="accept", param_type=ParameterType.STRING, required=False
            ),  # Setting to 'application/vnd.github+json' is recommended.,
            Parameter(
                name="org", param_type=ParameterType.STRING, required=True
            ),  # Organization name.,
            Parameter(
                name="name", param_type=ParameterType.STRING, required=True
            ),  # Variable name.,
            Parameter(
                name="repository_id", param_type=ParameterType.INTEGER, required=True
            ),  # Repository ID.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="status_code",
                param_type=OutputParameterType.STRING,
                is_array=False,
            ),  # Response status code.
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Add_selected_repository_to_an_organization_variable.method,
                Add_selected_repository_to_an_organization_variable.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Add_selected_repository_to_an_organization_variable': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Remove_selected_repository_from_an_organization_variable(BaseFunction):
    """Removes a repository from a variable's access list."""

    name = "Remove selected repository from an organization variable"
    url = "https://api.github.com/orgs/{org}/actions/variables/{name}/repositories/{repository_id}"
    args_in_url = True
    method = DELETE

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="accept", param_type=ParameterType.STRING, required=False
            ),  # Setting to 'application/vnd.github+json' is recommended.,
            Parameter(
                name="org", param_type=ParameterType.STRING, required=True
            ),  # Organization name.,
            Parameter(
                name="name", param_type=ParameterType.STRING, required=True
            ),  # Variable name.,
            Parameter(
                name="repository_id", param_type=ParameterType.INTEGER, required=True
            ),  # Repository ID.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="status_code",
                param_type=OutputParameterType.STRING,
                is_array=False,
            ),  # Response status code.
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Remove_selected_repository_from_an_organization_variable.method,
                Remove_selected_repository_from_an_organization_variable.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Remove_selected_repository_from_an_organization_variable': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class List_repository_variables(BaseFunction):
    """Lists all variables in a repository."""

    name = "List repository variables"
    url = "https://api.github.com/repos/{owner}/{repo}/actions/variables"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="accept", param_type=ParameterType.STRING, required=False
            ),  # Setting to 'application/vnd.github+json' is recommended.,
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner.,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name.,
            Parameter(
                name="per_page", param_type=ParameterType.INTEGER, required=False
            ),  # Results per page, max 30.,
            Parameter(
                name="page", param_type=ParameterType.INTEGER, required=False
            ),  # Page number for pagination.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="total_count",
                param_type=OutputParameterType.INTEGER,
                is_array=False,
            ),  # Total number of variables.,
            OutputParameter(
                name="variables", param_type=OutputParameterType.OBJECT, is_array=True
            ),  # List of variables.,
            OutputParameter(
                name="name", param_type=OutputParameterType.STRING, is_array=False
            ),  # Variable name.,
            OutputParameter(
                name="value", param_type=OutputParameterType.STRING, is_array=False
            ),  # Variable value.,
            OutputParameter(
                name="created_at", param_type=OutputParameterType.STRING, is_array=False
            ),  # Creation timestamp.,
            OutputParameter(
                name="updated_at", param_type=OutputParameterType.STRING, is_array=False
            ),  # Last update timestamp.
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                List_repository_variables.method,
                List_repository_variables.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'List_repository_variables': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Create_a_repository_variable(BaseFunction):
    """Creates a repository variable."""

    name = "Create a repository variable"
    url = "https://api.github.com/repos/{owner}/{repo}/actions/variables"
    args_in_url = True
    method = INSERT

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="accept", param_type=ParameterType.STRING, required=False
            ),  # Setting to 'application/vnd.github+json' is recommended.,
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner.,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name.,
            Parameter(
                name="body", param_type=OutputParameterType.OBJECT, required=True
            ),  # Variable details.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="status_code",
                param_type=OutputParameterType.STRING,
                is_array=False,
            ),  # Response status code.,
            OutputParameter(
                name="name", param_type=OutputParameterType.STRING, is_array=False
            ),  # Variable name.,
            OutputParameter(
                name="value", param_type=OutputParameterType.STRING, is_array=False
            ),  # Variable value.,
            OutputParameter(
                name="created_at", param_type=OutputParameterType.STRING, is_array=False
            ),  # Creation timestamp.,
            OutputParameter(
                name="updated_at", param_type=OutputParameterType.STRING, is_array=False
            ),  # Last update timestamp.
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Create_a_repository_variable.method,
                Create_a_repository_variable.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = (
                f"Error running function 'Create_a_repository_variable': {str(e)}"
            )
            logging.error(error_msg)
            raise ValueError(error_msg)


class Get_a_repository_variable(BaseFunction):
    """Retrieves a specific repository variable."""

    name = "Get a repository variable"
    url = "https://api.github.com/repos/{owner}/{repo}/actions/variables/{name}"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="accept", param_type=ParameterType.STRING, required=False
            ),  # Setting to 'application/vnd.github+json' is recommended.,
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner.,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name.,
            Parameter(
                name="name", param_type=ParameterType.STRING, required=True
            ),  # Variable name.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="name", param_type=OutputParameterType.STRING, is_array=False
            ),  # Variable name.,
            OutputParameter(
                name="value", param_type=OutputParameterType.STRING, is_array=False
            ),  # Variable value.,
            OutputParameter(
                name="created_at", param_type=OutputParameterType.STRING, is_array=False
            ),  # Creation timestamp.,
            OutputParameter(
                name="updated_at", param_type=OutputParameterType.STRING, is_array=False
            ),  # Last update timestamp.
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Get_a_repository_variable.method,
                Get_a_repository_variable.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_a_repository_variable': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Update_a_repository_variable(BaseFunction):
    """Updates a repository variable."""

    name = "Update a repository variable"
    url = "https://api.github.com/repos/{owner}/{repo}/actions/variables/{name}"
    args_in_url = True
    method = UPDATE

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="accept", param_type=ParameterType.STRING, required=False
            ),  # Setting to 'application/vnd.github+json' is recommended.,
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner.,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name.,
            Parameter(
                name="name", param_type=ParameterType.STRING, required=True
            ),  # Variable name.,
            Parameter(
                name="body", param_type=OutputParameterType.OBJECT, required=True
            ),  # Body with updated variable.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="status_code",
                param_type=OutputParameterType.STRING,
                is_array=False,
            ),  # Response status code.,
            OutputParameter(
                name="name", param_type=OutputParameterType.STRING, is_array=False
            ),  # Variable name.,
            OutputParameter(
                name="value", param_type=OutputParameterType.STRING, is_array=False
            ),  # Variable value.,
            OutputParameter(
                name="created_at", param_type=OutputParameterType.STRING, is_array=False
            ),  # Creation timestamp.,
            OutputParameter(
                name="updated_at", param_type=OutputParameterType.STRING, is_array=False
            ),  # Last update timestamp.
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Update_a_repository_variable.method,
                Update_a_repository_variable.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = (
                f"Error running function 'Update_a_repository_variable': {str(e)}"
            )
            logging.error(error_msg)
            raise ValueError(error_msg)


class Delete_a_repository_variable(BaseFunction):
    """Deletes a repository variable."""

    name = "Delete a repository variable"
    url = "https://api.github.com/repos/{owner}/{repo}/actions/variables/{name}"
    args_in_url = True
    method = DELETE

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="accept", param_type=ParameterType.STRING, required=False
            ),  # Setting to 'application/vnd.github+json' is recommended.,
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner.,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name.,
            Parameter(
                name="name", param_type=ParameterType.STRING, required=True
            ),  # Variable name.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="status_code",
                param_type=OutputParameterType.STRING,
                is_array=False,
            ),  # Response status code.
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Delete_a_repository_variable.method,
                Delete_a_repository_variable.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = (
                f"Error running function 'Delete_a_repository_variable': {str(e)}"
            )
            logging.error(error_msg)
            raise ValueError(error_msg)


class List_environment_variables(BaseFunction):
    """Lists all environment variables."""

    name = "List environment variables"
    url = "https://api.github.com/repos/{owner}/{repo}/environments/{environment_name}/variables"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="accept", param_type=ParameterType.STRING, required=False
            ),  # Setting to 'application/vnd.github+json' is recommended.,
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner.,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name.,
            Parameter(
                name="environment_name", param_type=ParameterType.STRING, required=True
            ),  # Environment name.,
            Parameter(
                name="per_page", param_type=ParameterType.INTEGER, required=False
            ),  # Results per page, max 30.,
            Parameter(
                name="page", param_type=ParameterType.INTEGER, required=False
            ),  # Page number.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="total_count",
                param_type=OutputParameterType.INTEGER,
                is_array=False,
            ),  # Total variables.,
            OutputParameter(
                name="variables", param_type=OutputParameterType.OBJECT, is_array=True
            ),  # List of environment variables.,
            OutputParameter(
                name="name", param_type=OutputParameterType.STRING, is_array=False
            ),  # Variable name.,
            OutputParameter(
                name="value", param_type=OutputParameterType.STRING, is_array=False
            ),  # Variable value.,
            OutputParameter(
                name="created_at", param_type=OutputParameterType.STRING, is_array=False
            ),  # Creation timestamp.,
            OutputParameter(
                name="updated_at", param_type=OutputParameterType.STRING, is_array=False
            ),  # Last update timestamp.
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                List_environment_variables.method,
                List_environment_variables.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'List_environment_variables': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Create_an_environment_variable(BaseFunction):
    """Creates an environment variable."""

    name = "Create an environment variable"
    url = "https://api.github.com/repos/{owner}/{repo}/environments/{environment_name}/variables"
    args_in_url = True
    method = INSERT

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="accept", param_type=ParameterType.STRING, required=False
            ),  # Setting to 'application/vnd.github+json' is recommended.,
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner.,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name.,
            Parameter(
                name="environment_name", param_type=ParameterType.STRING, required=True
            ),  # Environment name.,
            Parameter(
                name="body", param_type=OutputParameterType.OBJECT, required=True
            ),  # Variable details.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="status_code",
                param_type=OutputParameterType.STRING,
                is_array=False,
            ),  # Response status code.,
            OutputParameter(
                name="name", param_type=OutputParameterType.STRING, is_array=False
            ),  # Variable name.,
            OutputParameter(
                name="value", param_type=OutputParameterType.STRING, is_array=False
            ),  # Variable value.,
            OutputParameter(
                name="created_at", param_type=OutputParameterType.STRING, is_array=False
            ),  # Creation timestamp.,
            OutputParameter(
                name="updated_at", param_type=OutputParameterType.STRING, is_array=False
            ),  # Last update timestamp.
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Create_an_environment_variable.method,
                Create_an_environment_variable.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = (
                f"Error running function 'Create_an_environment_variable': {str(e)}"
            )
            logging.error(error_msg)
            raise ValueError(error_msg)


class Get_an_environment_variable(BaseFunction):
    """Retrieves a specific environment variable."""

    name = "Get an environment variable"
    url = "https://api.github.com/repos/{owner}/{repo}/environments/{environment_name}/variables/{name}"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="accept", param_type=ParameterType.STRING, required=False
            ),  # Setting to 'application/vnd.github+json' is recommended.,
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner.,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name.,
            Parameter(
                name="environment_name", param_type=ParameterType.STRING, required=True
            ),  # Environment name.,
            Parameter(
                name="name", param_type=ParameterType.STRING, required=True
            ),  # Variable name.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="name", param_type=OutputParameterType.STRING, is_array=False
            ),  # Variable name.,
            OutputParameter(
                name="value", param_type=OutputParameterType.STRING, is_array=False
            ),  # Variable value.,
            OutputParameter(
                name="created_at", param_type=OutputParameterType.STRING, is_array=False
            ),  # Creation timestamp.,
            OutputParameter(
                name="updated_at", param_type=OutputParameterType.STRING, is_array=False
            ),  # Last update timestamp.
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Get_an_environment_variable.method,
                Get_an_environment_variable.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = (
                f"Error running function 'Get_an_environment_variable': {str(e)}"
            )
            logging.error(error_msg)
            raise ValueError(error_msg)


class Update_an_environment_variable(BaseFunction):
    """Updates an environment variable."""

    name = "Update an environment variable"
    url = "https://api.github.com/repos/{owner}/{repo}/environments/{environment_name}/variables/{name}"
    args_in_url = True
    method = UPDATE

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="accept", param_type=ParameterType.STRING, required=False
            ),  # Setting to 'application/vnd.github+json' is recommended.,
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner.,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name.,
            Parameter(
                name="environment_name", param_type=ParameterType.STRING, required=True
            ),  # Environment name.,
            Parameter(
                name="name", param_type=ParameterType.STRING, required=True
            ),  # Variable name.,
            Parameter(
                name="body", param_type=OutputParameterType.OBJECT, required=True
            ),  # Body with updated variable.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="status_code",
                param_type=OutputParameterType.STRING,
                is_array=False,
            ),  # Response status code.,
            OutputParameter(
                name="name", param_type=OutputParameterType.STRING, is_array=False
            ),  # Variable name.,
            OutputParameter(
                name="value", param_type=OutputParameterType.STRING, is_array=False
            ),  # Variable value.,
            OutputParameter(
                name="created_at", param_type=OutputParameterType.STRING, is_array=False
            ),  # Creation timestamp.,
            OutputParameter(
                name="updated_at", param_type=OutputParameterType.STRING, is_array=False
            ),  # Last update timestamp.
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Update_an_environment_variable.method,
                Update_an_environment_variable.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = (
                f"Error running function 'Update_an_environment_variable': {str(e)}"
            )
            logging.error(error_msg)
            raise ValueError(error_msg)


class Delete_an_environment_variable(BaseFunction):
    """Deletes an environment variable."""

    name = "Delete an environment variable"
    url = "https://api.github.com/repos/{owner}/{repo}/environments/{environment_name}/variables/{name}"
    args_in_url = True
    method = DELETE

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="accept", param_type=ParameterType.STRING, required=False
            ),  # Setting to 'application/vnd.github+json' is recommended.,
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner.,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name.,
            Parameter(
                name="environment_name", param_type=ParameterType.STRING, required=True
            ),  # Environment name.,
            Parameter(
                name="name", param_type=ParameterType.STRING, required=True
            ),  # Variable name.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="status_code",
                param_type=OutputParameterType.STRING,
                is_array=False,
            ),  # Response status code.
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Delete_an_environment_variable.method,
                Delete_an_environment_variable.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = (
                f"Error running function 'Delete_an_environment_variable': {str(e)}"
            )
            logging.error(error_msg)
            raise ValueError(error_msg)


class List_organization_secrets(BaseFunction):
    """Lists all secrets available in an organization without revealing their encrypted values."""

    name = "List organization secrets"
    url = "https://api.github.com/orgs/{org}/actions/secrets"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="org", param_type=ParameterType.STRING, required=True
            ),  # The organization name.,
            Parameter(
                name="per_page", param_type=ParameterType.INTEGER, required=False
            ),  # The number of results per page (max 100). Default is 30.,
            Parameter(
                name="page", param_type=ParameterType.INTEGER, required=False
            ),  # The page number of the results to fetch. Default is 1.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="total_count",
                param_type=OutputParameterType.INTEGER,
                is_array=False,
            ),  # Total number of secrets.,
            OutputParameter(
                name="secrets", param_type=OutputParameterType.OBJECT, is_array=True
            ),  # List of secrets.
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                List_organization_secrets.method,
                List_organization_secrets.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'List_organization_secrets': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Get_an_organization_public_key(BaseFunction):
    """Gets your public key, which you need to encrypt secrets."""

    name = "Get an organization public key"
    url = "https://api.github.com/orgs/{org}/actions/secrets/public-key"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="org", param_type=ParameterType.STRING, required=True
            ),  # The organization name.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="key_id", param_type=OutputParameterType.STRING, is_array=False
            ),  # ID of the public key.,
            OutputParameter(
                name="key", param_type=OutputParameterType.STRING, is_array=False
            ),  # The public key.
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Get_an_organization_public_key.method,
                Get_an_organization_public_key.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = (
                f"Error running function 'Get_an_organization_public_key': {str(e)}"
            )
            logging.error(error_msg)
            raise ValueError(error_msg)


class Get_an_organization_secret(BaseFunction):
    """Gets a single organization secret without revealing its encrypted value."""

    name = "Get an organization secret"
    url = "https://api.github.com/orgs/{org}/actions/secrets/{secret_name}"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="org", param_type=ParameterType.STRING, required=True
            ),  # The organization name.,
            Parameter(
                name="secret_name", param_type=ParameterType.STRING, required=True
            ),  # The name of the secret.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="name", param_type=OutputParameterType.STRING, is_array=False
            ),  # The name of the secret.,
            OutputParameter(
                name="created_at", param_type=OutputParameterType.STRING, is_array=False
            ),  # Creation timestamp.,
            OutputParameter(
                name="updated_at", param_type=OutputParameterType.STRING, is_array=False
            ),  # Last updated timestamp.,
            OutputParameter(
                name="visibility", param_type=OutputParameterType.STRING, is_array=False
            ),  # Visibility of the secret.,
            OutputParameter(
                name="selected_repositories_url",
                param_type=OutputParameterType.STRING,
                is_array=False,
            ),  # URL to the selected repositories.
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Get_an_organization_secret.method,
                Get_an_organization_secret.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_an_organization_secret': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Create_or_update_an_organization_secret(BaseFunction):
    """Creates or updates an organization secret with an encrypted value."""

    name = "Create or update an organization secret"
    url = "https://api.github.com/orgs/{org}/actions/secrets/{secret_name}"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="org", param_type=ParameterType.STRING, required=True
            ),  # The organization name.,
            Parameter(
                name="secret_name", param_type=ParameterType.STRING, required=True
            ),  # The secret's name.,
            Parameter(
                name="encrypted_value", param_type=ParameterType.STRING, required=True
            ),  # Value for your secret, encrypted with LibSodium.,
            Parameter(
                name="key_id", param_type=ParameterType.STRING, required=True
            ),  # ID of the key used to encrypt.,
            Parameter(
                name="visibility", param_type=ParameterType.STRING, required=True
            ),  # Visibility of the secret: all, private, or selected.,
            Parameter(
                name="selected_repository_ids",
                param_type=ParameterType.INTEGER,
                required=False,
            ),  # Array of repository IDs that can access the secret when visibility is 'selected'.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="status", param_type=OutputParameterType.STRING, is_array=False
            ),  # HTTP status code indicating success.
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Create_or_update_an_organization_secret.method,
                Create_or_update_an_organization_secret.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Create_or_update_an_organization_secret': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Delete_an_organization_secret(BaseFunction):
    """Deletes a secret in an organization using the secret name."""

    name = "Delete an organization secret"
    url = "https://api.github.com/orgs/{org}/actions/secrets/{secret_name}"
    args_in_url = True
    method = DELETE

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="org", param_type=ParameterType.STRING, required=True
            ),  # The organization name.,
            Parameter(
                name="secret_name", param_type=ParameterType.STRING, required=True
            ),  # The secret's name.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="status", param_type=OutputParameterType.STRING, is_array=False
            ),  # HTTP status code indicating success.
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Delete_an_organization_secret.method,
                Delete_an_organization_secret.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = (
                f"Error running function 'Delete_an_organization_secret': {str(e)}"
            )
            logging.error(error_msg)
            raise ValueError(error_msg)


class List_selected_repositories_for_an_organization_secret(BaseFunction):
    """Lists all repositories that have been selected when the 'visibility' is set to 'selected'."""

    name = "List selected repositories for an organization secret"
    url = "https://api.github.com/orgs/{org}/actions/secrets/{secret_name}/repositories"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="org", param_type=ParameterType.STRING, required=True
            ),  # The organization name.,
            Parameter(
                name="secret_name", param_type=ParameterType.STRING, required=True
            ),  # The secret's name.,
            Parameter(
                name="page", param_type=ParameterType.INTEGER, required=False
            ),  # Page number for pagination. Default is 1.,
            Parameter(
                name="per_page", param_type=ParameterType.INTEGER, required=False
            ),  # Results per page, max 100. Default is 30.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="total_count",
                param_type=OutputParameterType.INTEGER,
                is_array=False,
            ),  # Total number of repositories.,
            OutputParameter(
                name="repositories",
                param_type=OutputParameterType.OBJECT,
                is_array=True,
            ),  # List of repositories.
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                List_selected_repositories_for_an_organization_secret.method,
                List_selected_repositories_for_an_organization_secret.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'List_selected_repositories_for_an_organization_secret': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Add_selected_repository_to_an_organization_secret(BaseFunction):
    """Adds a repository to an organization secret when 'visibility' is 'selected'."""

    name = "Add selected repository to an organization secret"
    url = "https://api.github.com/orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="org", param_type=ParameterType.STRING, required=True
            ),  # The organization name.,
            Parameter(
                name="secret_name", param_type=ParameterType.STRING, required=True
            ),  # The secret's name.,
            Parameter(
                name="repository_id", param_type=ParameterType.INTEGER, required=True
            ),  # Repository ID to add.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="status", param_type=OutputParameterType.STRING, is_array=False
            ),  # HTTP status code.
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Add_selected_repository_to_an_organization_secret.method,
                Add_selected_repository_to_an_organization_secret.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Add_selected_repository_to_an_organization_secret': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Remove_selected_repository_from_an_organization_secret(BaseFunction):
    """Removes a repository from an organization secret."""

    name = "Remove selected repository from an organization secret"
    url = "https://api.github.com/orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}"
    args_in_url = True
    method = DELETE

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="org", param_type=ParameterType.STRING, required=True
            ),  # The organization name.,
            Parameter(
                name="secret_name", param_type=ParameterType.STRING, required=True
            ),  # The secret's name.,
            Parameter(
                name="repository_id", param_type=ParameterType.INTEGER, required=True
            ),  # Repository ID to remove.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="status", param_type=OutputParameterType.STRING, is_array=False
            ),  # HTTP status code.
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Remove_selected_repository_from_an_organization_secret.method,
                Remove_selected_repository_from_an_organization_secret.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Remove_selected_repository_from_an_organization_secret': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class List_repository_organization_secrets(BaseFunction):
    """Lists all secrets available in a repository without revealing their encrypted values."""

    name = "List repository organization secrets"
    url = "https://api.github.com/repos/{owner}/{repo}/actions/organization-secrets"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner.,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name.,
            Parameter(
                name="per_page", param_type=ParameterType.INTEGER, required=False
            ),  # Results per page, max 100.,
            Parameter(
                name="page", param_type=ParameterType.INTEGER, required=False
            ),  # Page number.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="total_count",
                param_type=OutputParameterType.INTEGER,
                is_array=False,
            ),  # Total secrets.,
            OutputParameter(
                name="secrets", param_type=OutputParameterType.OBJECT, is_array=True
            ),  # List of secrets.
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                List_repository_organization_secrets.method,
                List_repository_organization_secrets.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'List_repository_organization_secrets': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class List_repository_secrets(BaseFunction):
    """Lists all secrets available in a repository without revealing their encrypted values."""

    name = "List repository secrets"
    url = "https://api.github.com/repos/{owner}/{repo}/actions/secrets"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner.,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name.,
            Parameter(
                name="per_page", param_type=ParameterType.INTEGER, required=False
            ),  # Results per page, max 100.,
            Parameter(
                name="page", param_type=ParameterType.INTEGER, required=False
            ),  # Page number.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="total_count",
                param_type=OutputParameterType.INTEGER,
                is_array=False,
            ),  # Total secrets.,
            OutputParameter(
                name="secrets", param_type=OutputParameterType.OBJECT, is_array=True
            ),  # List of secrets.
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                List_repository_secrets.method,
                List_repository_secrets.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'List_repository_secrets': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Get_a_repository_public_key(BaseFunction):
    """Gets your public key, which you need to encrypt secrets."""

    name = "Get a repository public key"
    url = "https://api.github.com/repos/{owner}/{repo}/actions/secrets/public-key"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner.,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="key_id", param_type=OutputParameterType.STRING, is_array=False
            ),  # ID of the public key.,
            OutputParameter(
                name="key", param_type=OutputParameterType.STRING, is_array=False
            ),  # The public key.
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Get_a_repository_public_key.method,
                Get_a_repository_public_key.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = (
                f"Error running function 'Get_a_repository_public_key': {str(e)}"
            )
            logging.error(error_msg)
            raise ValueError(error_msg)


class Get_a_repository_secret(BaseFunction):
    """Gets a single repository secret without revealing its encrypted value."""

    name = "Get a repository secret"
    url = "https://api.github.com/repos/{owner}/{repo}/actions/secrets/{secret_name}"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner.,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name.,
            Parameter(
                name="secret_name", param_type=ParameterType.STRING, required=True
            ),  # The secret's name.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="name", param_type=OutputParameterType.STRING, is_array=False
            ),  # Secret name.,
            OutputParameter(
                name="created_at", param_type=OutputParameterType.STRING, is_array=False
            ),  # Created timestamp.,
            OutputParameter(
                name="updated_at", param_type=OutputParameterType.STRING, is_array=False
            ),  # Updated timestamp.
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Get_a_repository_secret.method,
                Get_a_repository_secret.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_a_repository_secret': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Create_or_update_a_repository_secret(BaseFunction):
    """Creates or updates a repository secret with an encrypted value."""

    name = "Create or update a repository secret"
    url = "https://api.github.com/repos/{owner}/{repo}/actions/secrets/{secret_name}"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner.,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name.,
            Parameter(
                name="secret_name", param_type=ParameterType.STRING, required=True
            ),  # Secret name.,
            Parameter(
                name="encrypted_value", param_type=ParameterType.STRING, required=True
            ),  # Encrypted secret value.,
            Parameter(
                name="key_id", param_type=ParameterType.STRING, required=True
            ),  # ID of the key used to encrypt.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="status", param_type=OutputParameterType.STRING, is_array=False
            ),  # HTTP status.
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Create_or_update_a_repository_secret.method,
                Create_or_update_a_repository_secret.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Create_or_update_a_repository_secret': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Delete_a_repository_secret(BaseFunction):
    """Deletes a secret in a repository."""

    name = "Delete a repository secret"
    url = "https://api.github.com/repos/{owner}/{repo}/actions/secrets/{secret_name}"
    args_in_url = True
    method = DELETE

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner.,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name.,
            Parameter(
                name="secret_name", param_type=ParameterType.STRING, required=True
            ),  # Secret name.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="status", param_type=OutputParameterType.STRING, is_array=False
            ),  # HTTP status.
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Delete_a_repository_secret.method,
                Delete_a_repository_secret.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Delete_a_repository_secret': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class List_environment_secrets(BaseFunction):
    """Lists all secrets in an environment."""

    name = "List environment secrets"
    url = "https://api.github.com/repos/{owner}/{repo}/environments/{environment_name}/secrets"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner.,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name.,
            Parameter(
                name="environment_name", param_type=ParameterType.STRING, required=True
            ),  # Environment name.,
            Parameter(
                name="per_page", param_type=ParameterType.INTEGER, required=False
            ),  # Results per page, max 100.,
            Parameter(
                name="page", param_type=ParameterType.INTEGER, required=False
            ),  # Page number.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="total_count",
                param_type=OutputParameterType.INTEGER,
                is_array=False,
            ),  # Total secrets.,
            OutputParameter(
                name="secrets", param_type=OutputParameterType.OBJECT, is_array=True
            ),  # List of secrets.
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                List_environment_secrets.method,
                List_environment_secrets.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'List_environment_secrets': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Get_an_environment_public_key(BaseFunction):
    """Get the public key for an environment."""

    name = "Get an environment public key"
    url = "https://api.github.com/repos/{owner}/{repo}/environments/{environment_name}/secrets/public-key"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner.,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name.,
            Parameter(
                name="environment_name", param_type=ParameterType.STRING, required=True
            ),  # Environment name.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="key_id", param_type=OutputParameterType.STRING, is_array=False
            ),  # ID of the public key.,
            OutputParameter(
                name="key", param_type=OutputParameterType.STRING, is_array=False
            ),  # The public key.
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Get_an_environment_public_key.method,
                Get_an_environment_public_key.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = (
                f"Error running function 'Get_an_environment_public_key': {str(e)}"
            )
            logging.error(error_msg)
            raise ValueError(error_msg)


class Get_an_environment_secret(BaseFunction):
    """Get a specific environment secret."""

    name = "Get an environment secret"
    url = "https://api.github.com/repos/{owner}/{repo}/environments/{environment_name}/secrets/{secret_name}"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner.,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name.,
            Parameter(
                name="environment_name", param_type=ParameterType.STRING, required=True
            ),  # Environment name.,
            Parameter(
                name="secret_name", param_type=ParameterType.STRING, required=True
            ),  # Secret name.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="name", param_type=OutputParameterType.STRING, is_array=False
            ),  # Secret name.,
            OutputParameter(
                name="created_at", param_type=OutputParameterType.STRING, is_array=False
            ),  # Created timestamp.,
            OutputParameter(
                name="updated_at", param_type=OutputParameterType.STRING, is_array=False
            ),  # Updated timestamp.
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Get_an_environment_secret.method,
                Get_an_environment_secret.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_an_environment_secret': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Create_or_update_an_environment_secret(BaseFunction):
    """Creates or updates an environment secret."""

    name = "Create or update an environment secret"
    url = "https://api.github.com/repos/{owner}/{repo}/environments/{environment_name}/secrets/{secret_name}"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner.,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name.,
            Parameter(
                name="environment_name", param_type=ParameterType.STRING, required=True
            ),  # Environment name.,
            Parameter(
                name="secret_name", param_type=ParameterType.STRING, required=True
            ),  # Secret name.,
            Parameter(
                name="encrypted_value", param_type=ParameterType.STRING, required=True
            ),  # Encrypted secret value.,
            Parameter(
                name="key_id", param_type=ParameterType.STRING, required=True
            ),  # ID of the key used to encrypt.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="status", param_type=OutputParameterType.STRING, is_array=False
            ),  # HTTP status.
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Create_or_update_an_environment_secret.method,
                Create_or_update_an_environment_secret.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Create_or_update_an_environment_secret': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Delete_an_environment_secret(BaseFunction):
    """Deletes an environment secret."""

    name = "Delete an environment secret"
    url = "https://api.github.com/repos/{owner}/{repo}/environments/{environment_name}/secrets/{secret_name}"
    args_in_url = True
    method = DELETE

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner.,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name.,
            Parameter(
                name="environment_name", param_type=ParameterType.STRING, required=True
            ),  # Environment name.,
            Parameter(
                name="secret_name", param_type=ParameterType.STRING, required=True
            ),  # Secret name.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="status", param_type=OutputParameterType.STRING, is_array=False
            ),  # HTTP status.
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Delete_an_environment_secret.method,
                Delete_an_environment_secret.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = (
                f"Error running function 'Delete_an_environment_secret': {str(e)}"
            )
            logging.error(error_msg)
            raise ValueError(error_msg)


class List_selfhosted_runner_groups_for_an_organization(BaseFunction):
    """Lists all self-hosted runner groups configured in an organization and inherited from an enterprise."""

    name = "List self-hosted runner groups for an organization"
    url = "https://api.github.com/orgs/{org}/actions/runner-groups"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="org", param_type=ParameterType.STRING, required=True
            ),  # The organization name. The name is not case sensitive.,
            Parameter(
                name="per_page", param_type=ParameterType.INTEGER, required=False
            ),  # The number of results per page (max 100). Default: 30.,
            Parameter(
                name="page", param_type=ParameterType.INTEGER, required=False
            ),  # The page number of the results to fetch. Default: 1.,
            Parameter(
                name="visible_to_repository",
                param_type=ParameterType.STRING,
                required=False,
            ),  # Only return runner groups that are allowed to be used by this repository.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="total_count",
                param_type=OutputParameterType.INTEGER,
                is_array=False,
            ),  # Total number of runner groups.,
            OutputParameter(
                name="runner_groups",
                param_type=OutputParameterType.OBJECT,
                is_array=True,
            ),  # List of runner groups with details.
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                List_selfhosted_runner_groups_for_an_organization.method,
                List_selfhosted_runner_groups_for_an_organization.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'List_selfhosted_runner_groups_for_an_organization': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Create_a_selfhosted_runner_group_for_an_organization(BaseFunction):
    """Creates a new self-hosted runner group for an organization."""

    name = "Create a self-hosted runner group for an organization"
    url = "https://api.github.com/orgs/{org}/actions/runner-groups"
    args_in_url = True
    method = INSERT

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="org", param_type=ParameterType.STRING, required=True
            ),  # The organization name. The name is not case sensitive.,
            Parameter(
                name="name", param_type=ParameterType.STRING, required=True
            ),  # Name of the runner group.,
            Parameter(
                name="visibility", param_type=ParameterType.STRING, required=False
            ),  # Visibility of a runner group. One of: 'selected', 'all', 'private'. Default: 'all'.,
            Parameter(
                name="selected_repository_ids",
                param_type=ParameterType.INTEGER,
                required=False,
            ),  # List of repository IDs that can access the runner group.,
            Parameter(
                name="runners", param_type=ParameterType.INTEGER, required=False
            ),  # List of runner IDs to add to the runner group.,
            Parameter(
                name="allows_public_repositories",
                param_type=ParameterType.BOOLEAN,
                required=False,
            ),  # Whether the runner group can be used by public repositories. Default: false.,
            Parameter(
                name="restricted_to_workflows",
                param_type=ParameterType.BOOLEAN,
                required=False,
            ),  # If true, the runner group will be restricted to running only specified workflows. Default: false.,
            Parameter(
                name="selected_workflows",
                param_type=ParameterType.STRING,
                required=False,
            ),  # List of workflows the runner group should be allowed to run.,
            Parameter(
                name="network_configuration_id",
                param_type=ParameterType.STRING,
                required=False,
            ),  # Identifier of a hosted compute network configuration.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="id", param_type=OutputParameterType.INTEGER, is_array=False
            ),  # ID of the created runner group.,
            OutputParameter(
                name="name", param_type=OutputParameterType.STRING, is_array=False
            ),  # Name of the runner group.,
            OutputParameter(
                name="visibility", param_type=OutputParameterType.STRING, is_array=False
            ),  # Visibility setting of the runner group.,
            OutputParameter(
                name="default", param_type=OutputParameterType.BOOLEAN, is_array=False
            ),  # Whether the group is the default.,
            OutputParameter(
                name="runners_url",
                param_type=OutputParameterType.STRING,
                is_array=False,
            ),  # URL to access runners in this group.,
            OutputParameter(
                name="inherited", param_type=OutputParameterType.BOOLEAN, is_array=False
            ),  # Whether the group inherits properties.,
            OutputParameter(
                name="allows_public_repositories",
                param_type=OutputParameterType.BOOLEAN,
                is_array=False,
            ),  # Allows public repositories to use the group.,
            OutputParameter(
                name="restricted_to_workflows",
                param_type=OutputParameterType.BOOLEAN,
                is_array=False,
            ),  # Restricts the group to certain workflows.,
            OutputParameter(
                name="selected_workflows",
                param_type=OutputParameterType.STRING,
                is_array=True,
            ),  # List of selected workflows.,
            OutputParameter(
                name="workflow_restrictions_read_only",
                param_type=OutputParameterType.BOOLEAN,
                is_array=False,
            ),  # Whether workflow restrictions are read-only.
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Create_a_selfhosted_runner_group_for_an_organization.method,
                Create_a_selfhosted_runner_group_for_an_organization.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Create_a_selfhosted_runner_group_for_an_organization': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Get_a_selfhosted_runner_group_for_an_organization(BaseFunction):
    """Gets a specific self-hosted runner group in an organization."""

    name = "Get a self-hosted runner group for an organization"
    url = "https://api.github.com/orgs/{org}/actions/runner-groups/{runner_group_id}"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="org", param_type=ParameterType.STRING, required=True
            ),  # The organization name. The name is not case sensitive.,
            Parameter(
                name="runner_group_id", param_type=ParameterType.INTEGER, required=True
            ),  # Unique identifier of the self-hosted runner group.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="id", param_type=OutputParameterType.INTEGER, is_array=False
            ),  # ID of the runner group.,
            OutputParameter(
                name="name", param_type=OutputParameterType.STRING, is_array=False
            ),  # Name of the runner group.,
            OutputParameter(
                name="visibility", param_type=OutputParameterType.STRING, is_array=False
            ),  # Visibility setting of the runner group.,
            OutputParameter(
                name="default", param_type=OutputParameterType.BOOLEAN, is_array=False
            ),  # Whether the group is default.,
            OutputParameter(
                name="selected_repositories_url",
                param_type=OutputParameterType.STRING,
                is_array=False,
            ),  # URL to access selected repositories.,
            OutputParameter(
                name="runners_url",
                param_type=OutputParameterType.STRING,
                is_array=False,
            ),  # URL to access runners in this group.,
            OutputParameter(
                name="hosted_runners_url",
                param_type=OutputParameterType.STRING,
                is_array=False,
            ),  # URL to access hosted runners in this group.,
            OutputParameter(
                name="network_configuration_id",
                param_type=OutputParameterType.STRING,
                is_array=False,
            ),  # Network configuration ID.,
            OutputParameter(
                name="inherited", param_type=OutputParameterType.BOOLEAN, is_array=False
            ),  # Indicates if the group inherits properties.,
            OutputParameter(
                name="allows_public_repositories",
                param_type=OutputParameterType.BOOLEAN,
                is_array=False,
            ),  # Allows public repositories.,
            OutputParameter(
                name="restricted_to_workflows",
                param_type=OutputParameterType.BOOLEAN,
                is_array=False,
            ),  # Restrictions on workflows.,
            OutputParameter(
                name="selected_workflows",
                param_type=OutputParameterType.STRING,
                is_array=True,
            ),  # List of workflows.,
            OutputParameter(
                name="workflow_restrictions_read_only",
                param_type=OutputParameterType.BOOLEAN,
                is_array=False,
            ),  # Workflow restrictions are read-only.
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Get_a_selfhosted_runner_group_for_an_organization.method,
                Get_a_selfhosted_runner_group_for_an_organization.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_a_selfhosted_runner_group_for_an_organization': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Update_a_selfhosted_runner_group_for_an_organization(BaseFunction):
    """Updates the properties of a self-hosted runner group."""

    name = "Update a self-hosted runner group for an organization"
    url = "https://api.github.com/orgs/{org}/actions/runner-groups/{runner_group_id}"
    args_in_url = True
    method = UPDATE

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="org", param_type=ParameterType.STRING, required=True
            ),  # The organization name. The name is not case sensitive.,
            Parameter(
                name="runner_group_id", param_type=ParameterType.INTEGER, required=True
            ),  # Unique identifier of the self-hosted runner group.,
            Parameter(
                name="body", param_type=OutputParameterType.OBJECT, required=True
            ),  # Properties to update.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="id", param_type=OutputParameterType.INTEGER, is_array=False
            ),  # ID of the runner group.,
            OutputParameter(
                name="name", param_type=OutputParameterType.STRING, is_array=False
            ),  # Name of the runner group.,
            OutputParameter(
                name="visibility", param_type=OutputParameterType.STRING, is_array=False
            ),  # Visibility of the group.,
            OutputParameter(
                name="default", param_type=OutputParameterType.BOOLEAN, is_array=False
            ),  # Is default group.,
            OutputParameter(
                name="selected_repositories_url",
                param_type=OutputParameterType.STRING,
                is_array=False,
            ),  # URL to repositories.,
            OutputParameter(
                name="runners_url",
                param_type=OutputParameterType.STRING,
                is_array=False,
            ),  # URL to runners.,
            OutputParameter(
                name="hosted_runners_url",
                param_type=OutputParameterType.STRING,
                is_array=False,
            ),  # URL to hosted runners.,
            OutputParameter(
                name="network_configuration_id",
                param_type=OutputParameterType.STRING,
                is_array=False,
            ),  # Network configuration ID.,
            OutputParameter(
                name="inherited", param_type=OutputParameterType.BOOLEAN, is_array=False
            ),  # Inherited property.,
            OutputParameter(
                name="allows_public_repositories",
                param_type=OutputParameterType.BOOLEAN,
                is_array=False,
            ),  # Allows public repositories.,
            OutputParameter(
                name="restricted_to_workflows",
                param_type=OutputParameterType.BOOLEAN,
                is_array=False,
            ),  # Restriction on workflows.,
            OutputParameter(
                name="selected_workflows",
                param_type=OutputParameterType.STRING,
                is_array=True,
            ),  # List of workflows.,
            OutputParameter(
                name="workflow_restrictions_read_only",
                param_type=OutputParameterType.BOOLEAN,
                is_array=False,
            ),  # Workflow restrictions read-only.
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Update_a_selfhosted_runner_group_for_an_organization.method,
                Update_a_selfhosted_runner_group_for_an_organization.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Update_a_selfhosted_runner_group_for_an_organization': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Delete_a_selfhosted_runner_group_from_an_organization(BaseFunction):
    """Deletes a self-hosted runner group from an organization."""

    name = "Delete a self-hosted runner group from an organization"
    url = "https://api.github.com/orgs/{org}/actions/runner-groups/{runner_group_id}"
    args_in_url = True
    method = DELETE

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="org", param_type=ParameterType.STRING, required=True
            ),  # The organization name.,
            Parameter(
                name="runner_group_id", param_type=ParameterType.INTEGER, required=True
            ),  # ID of the runner group.
        ]

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Delete_a_selfhosted_runner_group_from_an_organization.method,
                Delete_a_selfhosted_runner_group_from_an_organization.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Delete_a_selfhosted_runner_group_from_an_organization': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class List_GitHubhosted_runners_in_an_organization(BaseFunction):
    """Lists the GitHub-hosted runners in an organization."""

    name = "List GitHub-hosted runners in an organization"
    url = "https://api.github.com/orgs/{org}/actions/hosted-runners"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="org", param_type=ParameterType.STRING, required=True
            ),  # The organization name.,
            Parameter(
                name="per_page", param_type=ParameterType.INTEGER, required=False
            ),  # Number of results per page, max 100. Default: 30.,
            Parameter(
                name="page", param_type=ParameterType.INTEGER, required=False
            ),  # Page number of the results to fetch. Default: 1.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="total_count",
                param_type=OutputParameterType.INTEGER,
                is_array=False,
            ),  # Total number of runners.,
            OutputParameter(
                name="runners", param_type=OutputParameterType.OBJECT, is_array=True
            ),  # List of runners with details.
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                List_GitHubhosted_runners_in_an_organization.method,
                List_GitHubhosted_runners_in_an_organization.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'List_GitHubhosted_runners_in_an_organization': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Get_a_GitHubhosted_runner_in_an_organization(BaseFunction):
    """Gets a GitHub-hosted runner configured in an organization."""

    name = "Get a GitHub-hosted runner in an organization"
    url = "https://api.github.com/orgs/{org}/actions/hosted-runners/{hosted_runner_id}"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="org", param_type=ParameterType.STRING, required=True
            ),  # Organization name.,
            Parameter(
                name="hosted_runner_id", param_type=ParameterType.INTEGER, required=True
            ),  # ID of the hosted runner.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="id", param_type=OutputParameterType.INTEGER, is_array=False
            ),  # Runner ID.,
            OutputParameter(
                name="name", param_type=OutputParameterType.STRING, is_array=False
            ),  # Name of the runner.,
            OutputParameter(
                name="runner_group_id",
                param_type=OutputParameterType.INTEGER,
                is_array=False,
            ),  # Runner group ID.,
            OutputParameter(
                name="platform", param_type=OutputParameterType.STRING, is_array=False
            ),  # Platform.,
            OutputParameter(
                name="image", param_type=OutputParameterType.OBJECT, is_array=False
            ),  # Image details.,
            OutputParameter(
                name="machine_size_details",
                param_type=OutputParameterType.OBJECT,
                is_array=False,
            ),  # Machine size details.,
            OutputParameter(
                name="status", param_type=OutputParameterType.STRING, is_array=False
            ),  # Current status.,
            OutputParameter(
                name="maximum_runners",
                param_type=OutputParameterType.INTEGER,
                is_array=False,
            ),  # Maximum number of runners.,
            OutputParameter(
                name="public_ip_enabled",
                param_type=OutputParameterType.BOOLEAN,
                is_array=False,
            ),  # Public IP enabled.,
            OutputParameter(
                name="public_ips", param_type=OutputParameterType.OBJECT, is_array=True
            ),  # Public IPs details.,
            OutputParameter(
                name="last_active_on",
                param_type=OutputParameterType.STRING,
                is_array=False,
            ),  # Last active timestamp.
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Get_a_GitHubhosted_runner_in_an_organization.method,
                Get_a_GitHubhosted_runner_in_an_organization.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_a_GitHubhosted_runner_in_an_organization': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Get_GitHub_Actions_permissions_for_an_organization(BaseFunction):
    """Gets the GitHub Actions permissions policy for repositories and allowed actions and reusable workflows in an organization."""

    name = "Get GitHub Actions permissions for an organization"
    url = "/orgs/{org}/actions/permissions"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="org", param_type=ParameterType.STRING, required=True
            ),  # The organization name.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="enabled_repositories",
                param_type=OutputParameterType.STRING,
                is_array=False,
            ),  # The policy that controls the repositories in the organization that are allowed to run GitHub Actions.,
            OutputParameter(
                name="allowed_actions",
                param_type=OutputParameterType.STRING,
                is_array=False,
            ),  # The permissions policy that controls the actions and reusable workflows that are allowed to run.,
            OutputParameter(
                name="selected_actions_url",
                param_type=OutputParameterType.STRING,
                is_array=False,
            ),  # URL to list selected actions and workflows.
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Get_GitHub_Actions_permissions_for_an_organization.method,
                Get_GitHub_Actions_permissions_for_an_organization.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_GitHub_Actions_permissions_for_an_organization': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Set_GitHub_Actions_permissions_for_an_organization(BaseFunction):
    """Sets the GitHub Actions permissions policy for repositories and allowed actions and reusable workflows in an organization."""

    name = "Set GitHub Actions permissions for an organization"
    url = "/orgs/{org}/actions/permissions"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="org", param_type=ParameterType.STRING, required=True
            ),  # The organization name.,
            Parameter(
                name="enabled_repositories",
                param_type=ParameterType.STRING,
                required=True,
            ),  # The policy for repositories that are allowed to run GitHub Actions. Options: 'all', 'none', 'selected'.,
            Parameter(
                name="allowed_actions", param_type=ParameterType.STRING, required=True
            ),  # The policy for actions and reusable workflows. Options: 'all', 'local_only', 'selected'.
        ]

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Set_GitHub_Actions_permissions_for_an_organization.method,
                Set_GitHub_Actions_permissions_for_an_organization.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Set_GitHub_Actions_permissions_for_an_organization': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class List_selected_repositories_enabled_for_GitHub_Actions_in_an_organization(
    BaseFunction
):
    """Lists the selected repositories that are enabled for GitHub Actions in an organization."""

    name = "List selected repositories enabled for GitHub Actions in an organization"
    url = "/orgs/{org}/actions/permissions/repositories"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="org", param_type=ParameterType.STRING, required=True
            ),  # The organization name.,
            Parameter(
                name="per_page", param_type=ParameterType.INTEGER, required=False
            ),  # Results per page (max 100). Default: 30.,
            Parameter(
                name="page", param_type=ParameterType.INTEGER, required=False
            ),  # Page number of the results. Default: 1.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="total_count",
                param_type=OutputParameterType.INTEGER,
                is_array=False,
            ),  # Total number of repositories.,
            OutputParameter(
                name="repositories",
                param_type=OutputParameterType.OBJECT,
                is_array=True,
            ),  # List of repositories enabled for GitHub Actions in the organization.
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                List_selected_repositories_enabled_for_GitHub_Actions_in_an_organization.method,
                List_selected_repositories_enabled_for_GitHub_Actions_in_an_organization.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'List_selected_repositories_enabled_for_GitHub_Actions_in_an_organization': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Set_selected_repositories_enabled_for_GitHub_Actions_in_an_organization(
    BaseFunction
):
    """Replaces the list of selected repositories that are enabled for GitHub Actions in an organization."""

    name = "Set selected repositories enabled for GitHub Actions in an organization"
    url = "/orgs/{org}/actions/permissions/repositories"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="org", param_type=ParameterType.STRING, required=True
            ),  # The organization name.,
            Parameter(
                name="selected_repository_ids",
                param_type=ParameterType.INTEGER,
                required=True,
            ),  # List of repository IDs to enable for GitHub Actions.
        ]

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Set_selected_repositories_enabled_for_GitHub_Actions_in_an_organization.method,
                Set_selected_repositories_enabled_for_GitHub_Actions_in_an_organization.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Set_selected_repositories_enabled_for_GitHub_Actions_in_an_organization': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Enable_a_selected_repository_for_GitHub_Actions_in_an_organization(BaseFunction):
    """Adds a repository to the list of selected repositories enabled for GitHub Actions."""

    name = "Enable a selected repository for GitHub Actions in an organization"
    url = "/orgs/{org}/actions/permissions/repositories/{repository_id}"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="org", param_type=ParameterType.STRING, required=True
            ),  # The organization name.,
            Parameter(
                name="repository_id", param_type=ParameterType.INTEGER, required=True
            ),  # The unique identifier of the repository.
        ]

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Enable_a_selected_repository_for_GitHub_Actions_in_an_organization.method,
                Enable_a_selected_repository_for_GitHub_Actions_in_an_organization.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Enable_a_selected_repository_for_GitHub_Actions_in_an_organization': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Disable_a_selected_repository_for_GitHub_Actions_in_an_organization(BaseFunction):
    """Removes a repository from the list of selected repositories enabled for GitHub Actions."""

    name = "Disable a selected repository for GitHub Actions in an organization"
    url = "/orgs/{org}/actions/permissions/repositories/{repository_id}"
    args_in_url = True
    method = DELETE

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="org", param_type=ParameterType.STRING, required=True
            ),  # The organization name.,
            Parameter(
                name="repository_id", param_type=ParameterType.INTEGER, required=True
            ),  # The unique identifier of the repository.
        ]

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Disable_a_selected_repository_for_GitHub_Actions_in_an_organization.method,
                Disable_a_selected_repository_for_GitHub_Actions_in_an_organization.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Disable_a_selected_repository_for_GitHub_Actions_in_an_organization': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Get_allowed_actions_and_reusable_workflows_for_an_organization(BaseFunction):
    """Gets the selected actions and reusable workflows allowed in an organization."""

    name = "Get allowed actions and reusable workflows for an organization"
    url = "/orgs/{org}/actions/permissions/selected-actions"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="org", param_type=ParameterType.STRING, required=True
            ),  # The organization name.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="github_owned_allowed",
                param_type=OutputParameterType.BOOLEAN,
                is_array=False,
            ),  # Whether GitHub-owned actions are allowed.,
            OutputParameter(
                name="verified_allowed",
                param_type=OutputParameterType.BOOLEAN,
                is_array=False,
            ),  # Whether actions from verified creators are allowed.,
            OutputParameter(
                name="patterns_allowed",
                param_type=OutputParameterType.STRING,
                is_array=True,
            ),  # List of string-matching patterns allowed.
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Get_allowed_actions_and_reusable_workflows_for_an_organization.method,
                Get_allowed_actions_and_reusable_workflows_for_an_organization.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_allowed_actions_and_reusable_workflows_for_an_organization': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Set_allowed_actions_and_reusable_workflows_for_an_organization(BaseFunction):
    """Sets the actions and reusable workflows allowed in an organization."""

    name = "Set allowed actions and reusable workflows for an organization"
    url = "/orgs/{org}/actions/permissions/selected-actions"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="org", param_type=ParameterType.STRING, required=True
            ),  # The organization name.,
            Parameter(
                name="github_owned_allowed",
                param_type=ParameterType.BOOLEAN,
                required=False,
            ),  # Whether GitHub-owned actions are allowed.,
            Parameter(
                name="verified_allowed",
                param_type=ParameterType.BOOLEAN,
                required=False,
            ),  # Whether actions from verified creators are allowed.,
            Parameter(
                name="patterns_allowed", param_type=ParameterType.STRING, required=False
            ),  # List of string patterns allowed.
        ]

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Set_allowed_actions_and_reusable_workflows_for_an_organization.method,
                Set_allowed_actions_and_reusable_workflows_for_an_organization.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Set_allowed_actions_and_reusable_workflows_for_an_organization': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Get_default_workflow_permissions_for_an_organization(BaseFunction):
    """Gets the default workflow permissions for an organization."""

    name = "Get default workflow permissions for an organization"
    url = "/orgs/{org}/actions/permissions/workflow"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="org", param_type=ParameterType.STRING, required=True
            ),  # The organization name.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="default_workflow_permissions",
                param_type=OutputParameterType.STRING,
                is_array=False,
            ),  # Default permissions for workflows.,
            OutputParameter(
                name="can_approve_pull_request_reviews",
                param_type=OutputParameterType.BOOLEAN,
                is_array=False,
            ),  # Whether GitHub Actions can approve pull requests.
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Get_default_workflow_permissions_for_an_organization.method,
                Get_default_workflow_permissions_for_an_organization.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_default_workflow_permissions_for_an_organization': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Set_default_workflow_permissions_for_an_organization(BaseFunction):
    """Sets the default workflow permissions for an organization."""

    name = "Set default workflow permissions for an organization"
    url = "/orgs/{org}/actions/permissions/workflow"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="org", param_type=ParameterType.STRING, required=True
            ),  # The organization name.,
            Parameter(
                name="default_workflow_permissions",
                param_type=ParameterType.STRING,
                required=True,
            ),  # Default permissions for workflows: 'read' or 'write'.,
            Parameter(
                name="can_approve_pull_request_reviews",
                param_type=ParameterType.BOOLEAN,
                required=True,
            ),  # Whether GitHub Actions can approve pull requests.
        ]

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Set_default_workflow_permissions_for_an_organization.method,
                Set_default_workflow_permissions_for_an_organization.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Set_default_workflow_permissions_for_an_organization': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Get_GitHub_Actions_permissions_for_a_repository(BaseFunction):
    """Gets the permissions policy for a repository."""

    name = "Get GitHub Actions permissions for a repository"
    url = "/repos/{owner}/{repo}/actions/permissions"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner.,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="enabled", param_type=OutputParameterType.BOOLEAN, is_array=False
            ),  # Indicates if Actions are enabled.,
            OutputParameter(
                name="allowed_actions",
                param_type=OutputParameterType.STRING,
                is_array=False,
            ),  # Allowed actions policy.,
            OutputParameter(
                name="selected_actions_url",
                param_type=OutputParameterType.STRING,
                is_array=False,
            ),  # URL to selected actions.
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Get_GitHub_Actions_permissions_for_a_repository.method,
                Get_GitHub_Actions_permissions_for_a_repository.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_GitHub_Actions_permissions_for_a_repository': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Set_GitHub_Actions_permissions_for_a_repository(BaseFunction):
    """Sets the permissions policy for a repository."""

    name = "Set GitHub Actions permissions for a repository"
    url = "/repos/{owner}/{repo}/actions/permissions"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner.,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name.,
            Parameter(
                name="enabled", param_type=ParameterType.BOOLEAN, required=True
            ),  # Whether Actions are enabled.,
            Parameter(
                name="allowed_actions", param_type=ParameterType.STRING, required=True
            ),  # Permissions policy: 'all', 'local_only', 'selected'.
        ]

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Set_GitHub_Actions_permissions_for_a_repository.method,
                Set_GitHub_Actions_permissions_for_a_repository.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Set_GitHub_Actions_permissions_for_a_repository': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Get_the_level_of_access_for_workflows_outside_of_the_repository(BaseFunction):
    """Gets the level of access workflows outside of the repository have."""

    name = "Get the level of access for workflows outside of the repository"
    url = "/repos/{owner}/{repo}/actions/permissions/access"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner.,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="access_level",
                param_type=OutputParameterType.STRING,
                is_array=False,
            ),  # Access level: 'none', 'user', 'organization'.
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Get_the_level_of_access_for_workflows_outside_of_the_repository.method,
                Get_the_level_of_access_for_workflows_outside_of_the_repository.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_the_level_of_access_for_workflows_outside_of_the_repository': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Set_the_level_of_access_for_workflows_outside_of_the_repository(BaseFunction):
    """Sets the level of access workflows outside of the repository have."""

    name = "Set the level of access for workflows outside of the repository"
    url = "/repos/{owner}/{repo}/actions/permissions/access"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner.,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name.,
            Parameter(
                name="access_level", param_type=ParameterType.STRING, required=True
            ),  # Set the access level: 'none', 'user', 'organization'.
        ]

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Set_the_level_of_access_for_workflows_outside_of_the_repository.method,
                Set_the_level_of_access_for_workflows_outside_of_the_repository.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Set_the_level_of_access_for_workflows_outside_of_the_repository': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Get_allowed_actions_and_reusable_workflows_for_a_repository(BaseFunction):
    """Gets the actions and workflows allowed in a repository."""

    name = "Get allowed actions and reusable workflows for a repository"
    url = "/repos/{owner}/{repo}/actions/permissions/selected-actions"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner.,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="github_owned_allowed",
                param_type=OutputParameterType.BOOLEAN,
                is_array=False,
            ),  # Whether GitHub-owned actions are allowed.,
            OutputParameter(
                name="verified_allowed",
                param_type=OutputParameterType.BOOLEAN,
                is_array=False,
            ),  # Whether Marketplace verified actions are allowed.,
            OutputParameter(
                name="patterns_allowed",
                param_type=OutputParameterType.STRING,
                is_array=True,
            ),  # Allowed patterns for actions.
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Get_allowed_actions_and_reusable_workflows_for_a_repository.method,
                Get_allowed_actions_and_reusable_workflows_for_a_repository.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_allowed_actions_and_reusable_workflows_for_a_repository': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Set_allowed_actions_and_reusable_workflows_for_a_repository(BaseFunction):
    """Sets the actions and workflows allowed in a repository."""

    name = "Set allowed actions and reusable workflows for a repository"
    url = "/repos/{owner}/{repo}/actions/permissions/selected-actions"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner.,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name.,
            Parameter(
                name="github_owned_allowed",
                param_type=ParameterType.BOOLEAN,
                required=False,
            ),  # Allow GitHub-owned actions.,
            Parameter(
                name="verified_allowed",
                param_type=ParameterType.BOOLEAN,
                required=False,
            ),  # Allow Marketplace verified actions.,
            Parameter(
                name="patterns_allowed", param_type=ParameterType.STRING, required=False
            ),  # Allowed patterns for actions.
        ]

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Set_allowed_actions_and_reusable_workflows_for_a_repository.method,
                Set_allowed_actions_and_reusable_workflows_for_a_repository.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Set_allowed_actions_and_reusable_workflows_for_a_repository': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Get_the_customization_template_for_an_OIDC_subject_claim_for_an_organization(
    BaseFunction
):
    """Gets the customization template for an OpenID Connect (OIDC) subject claim."""

    name = (
        "Get the customization template for an OIDC subject claim for an organization"
    )
    url = "https://api.github.com/orgs/{org}/actions/oidc/customization/sub"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="org", param_type=ParameterType.STRING, required=True
            ),  # The organization name. The name is not case sensitive.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="include_claim_keys",
                param_type=OutputParameterType.STRING,
                is_array=True,
            ),  # Array of claim keys to include in the customization template.
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Get_the_customization_template_for_an_OIDC_subject_claim_for_an_organization.method,
                Get_the_customization_template_for_an_OIDC_subject_claim_for_an_organization.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_the_customization_template_for_an_OIDC_subject_claim_for_an_organization': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Set_the_customization_template_for_an_OIDC_subject_claim_for_an_organization(
    BaseFunction
):
    """Creates or updates the customization template for an OpenID Connect (OIDC) subject claim."""

    name = (
        "Set the customization template for an OIDC subject claim for an organization"
    )
    url = "https://api.github.com/orgs/{org}/actions/oidc/customization/sub"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="org", param_type=ParameterType.STRING, required=True
            ),  # The organization name. The name is not case sensitive.,
            Parameter(
                name="include_claim_keys",
                param_type=ParameterType.STRING,
                required=True,
            ),  # Array of unique strings representing claim keys, only alphanumeric characters and underscores.
        ]

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Set_the_customization_template_for_an_OIDC_subject_claim_for_an_organization.method,
                Set_the_customization_template_for_an_OIDC_subject_claim_for_an_organization.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Set_the_customization_template_for_an_OIDC_subject_claim_for_an_organization': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Get_the_customization_template_for_an_OIDC_subject_claim_for_a_repository(
    BaseFunction
):
    """Gets the customization template for an OpenID Connect (OIDC) subject claim for a repository."""

    name = "Get the customization template for an OIDC subject claim for a repository"
    url = "https://api.github.com/repos/{owner}/{repo}/actions/oidc/customization/sub"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # The account owner of the repository. The name is not case sensitive.,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # The name of the repository without the `.git` extension. The name is not case sensitive.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="use_default",
                param_type=OutputParameterType.BOOLEAN,
                is_array=False,
            ),  # Indicates if the default template is used.,
            OutputParameter(
                name="include_claim_keys",
                param_type=OutputParameterType.STRING,
                is_array=True,
            ),  # Array of claim keys included in the template.
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Get_the_customization_template_for_an_OIDC_subject_claim_for_a_repository.method,
                Get_the_customization_template_for_an_OIDC_subject_claim_for_a_repository.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_the_customization_template_for_an_OIDC_subject_claim_for_a_repository': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Set_the_customization_template_for_an_OIDC_subject_claim_for_a_repository(
    BaseFunction
):
    """Sets the customization template and `opt-in` or `opt-out` flag for an OpenID Connect (OIDC) subject claim for a repository."""

    name = "Set the customization template for an OIDC subject claim for a repository"
    url = "https://api.github.com/repos/{owner}/{repo}/actions/oidc/customization/sub"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # The account owner of the repository. The name is not case sensitive.,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # The name of the repository without the `.git` extension. The name is not case sensitive.,
            Parameter(
                name="use_default", param_type=ParameterType.BOOLEAN, required=True
            ),  # Whether to use the default template or not.,
            Parameter(
                name="include_claim_keys",
                param_type=ParameterType.STRING,
                required=False,
            ),  # Array of unique strings representing claim keys, only alphanumeric characters and underscores.
        ]

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Set_the_customization_template_for_an_OIDC_subject_claim_for_a_repository.method,
                Set_the_customization_template_for_an_OIDC_subject_claim_for_a_repository.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Set_the_customization_template_for_an_OIDC_subject_claim_for_a_repository': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class List_selfhosted_runners_for_an_organization(BaseFunction):
    """Lists all self-hosted runners configured in an organization."""

    name = "List self-hosted runners for an organization"
    url = "https://api.github.com/orgs/{org}/actions/runners"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="org", param_type=ParameterType.STRING, required=True
            ),  # The organization name. The name is not case sensitive.,
            Parameter(
                name="name", param_type=ParameterType.STRING, required=False
            ),  # The name of a self-hosted runner.,
            Parameter(
                name="per_page", param_type=ParameterType.INTEGER, required=False
            ),  # The number of results per page (max 100). Default: 30.,
            Parameter(
                name="page", param_type=ParameterType.INTEGER, required=False
            ),  # The page number of the results to fetch. Default: 1.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="total_count",
                param_type=OutputParameterType.INTEGER,
                is_array=False,
            ),  # Total number of self-hosted runners.,
            OutputParameter(
                name="runners", param_type=OutputParameterType.OBJECT, is_array=True
            ),  # List of self-hosted runners.,
            OutputParameter(
                name="id", param_type=OutputParameterType.INTEGER, is_array=False
            ),  # Unique identifier of the runner.,
            OutputParameter(
                name="name", param_type=OutputParameterType.STRING, is_array=False
            ),  # Name of the runner.,
            OutputParameter(
                name="os", param_type=OutputParameterType.STRING, is_array=False
            ),  # Operating system of the runner.,
            OutputParameter(
                name="status", param_type=OutputParameterType.STRING, is_array=False
            ),  # Status of the runner (online, offline, etc.).,
            OutputParameter(
                name="busy", param_type=OutputParameterType.BOOLEAN, is_array=False
            ),  # Whether the runner is busy.,
            OutputParameter(
                name="ephemeral", param_type=OutputParameterType.BOOLEAN, is_array=False
            ),  # Whether the runner is ephemeral.,
            OutputParameter(
                name="labels", param_type=OutputParameterType.OBJECT, is_array=True
            ),  # Labels assigned to the runner.,
            OutputParameter(
                name="id", param_type=OutputParameterType.INTEGER, is_array=False
            ),  # Label ID.,
            OutputParameter(
                name="name", param_type=OutputParameterType.STRING, is_array=False
            ),  # Label name.,
            OutputParameter(
                name="type", param_type=OutputParameterType.STRING, is_array=False
            ),  # Label type (read-only, custom).
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                List_selfhosted_runners_for_an_organization.method,
                List_selfhosted_runners_for_an_organization.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'List_selfhosted_runners_for_an_organization': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class List_runner_applications_for_an_organization(BaseFunction):
    """Lists binaries for the runner application that you can download and run."""

    name = "List runner applications for an organization"
    url = "https://api.github.com/orgs/{org}/actions/runners/downloads"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="org", param_type=ParameterType.STRING, required=True
            ),  # The organization name. The name is not case sensitive.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="os", param_type=OutputParameterType.STRING, is_array=False
            ),  # Operating system.,
            OutputParameter(
                name="architecture",
                param_type=OutputParameterType.STRING,
                is_array=False,
            ),  # System architecture.,
            OutputParameter(
                name="download_url",
                param_type=OutputParameterType.STRING,
                is_array=False,
            ),  # URL to download the runner application.,
            OutputParameter(
                name="filename", param_type=OutputParameterType.STRING, is_array=False
            ),  # Filename of the download.
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                List_runner_applications_for_an_organization.method,
                List_runner_applications_for_an_organization.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'List_runner_applications_for_an_organization': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Create_configuration_for_a_justintime_runner_for_an_organization(BaseFunction):
    """Generates a configuration that can be passed to the runner application at startup."""

    name = "Create configuration for a just-in-time runner for an organization"
    url = "https://api.github.com/orgs/{org}/actions/runners/generate-jitconfig"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="org", param_type=ParameterType.STRING, required=True
            ),  # The organization name. The name is not case sensitive.,
            Parameter(
                name="name", param_type=ParameterType.STRING, required=True
            ),  # The name of the new runner.,
            Parameter(
                name="runner_group_id", param_type=ParameterType.INTEGER, required=True
            ),  # The ID of the runner group to register the runner to.,
            Parameter(
                name="labels", param_type=OutputParameterType.OBJECT, required=True
            ),  # Array of strings for labels to add to the runner. Use an array of strings.,
            Parameter(
                name="work_folder", param_type=ParameterType.STRING, required=False
            ),  # The working directory relative to the runner install directory. Default: _work.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="runner", param_type=OutputParameterType.OBJECT, is_array=False
            ),  # Details of the created runner.,
            OutputParameter(
                name="encoded_jit_config",
                param_type=OutputParameterType.STRING,
                is_array=False,
            ),  # Encoded JIT configuration.
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Create_configuration_for_a_justintime_runner_for_an_organization.method,
                Create_configuration_for_a_justintime_runner_for_an_organization.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Create_configuration_for_a_justintime_runner_for_an_organization': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Create_a_registration_token_for_an_organization(BaseFunction):
    """Returns a registration token to configure self-hosted runner."""

    name = "Create a registration token for an organization"
    url = "https://api.github.com/orgs/{org}/actions/runners/registration-token"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="org", param_type=ParameterType.STRING, required=True
            ),  # The organization name. The name is not case sensitive.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="token", param_type=OutputParameterType.STRING, is_array=False
            ),  # Registration token.,
            OutputParameter(
                name="expires_at", param_type=OutputParameterType.STRING, is_array=False
            ),  # Expiration time of the token.
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Create_a_registration_token_for_an_organization.method,
                Create_a_registration_token_for_an_organization.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Create_a_registration_token_for_an_organization': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Create_a_remove_token_for_an_organization(BaseFunction):
    """Returns a token to remove a self-hosted runner from an organization."""

    name = "Create a remove token for an organization"
    url = "https://api.github.com/orgs/{org}/actions/runners/remove-token"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="org", param_type=ParameterType.STRING, required=True
            ),  # The organization name. The name is not case sensitive.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="token", param_type=OutputParameterType.STRING, is_array=False
            ),  # Remove token.,
            OutputParameter(
                name="expires_at", param_type=OutputParameterType.STRING, is_array=False
            ),  # Expiration time of the token.
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Create_a_remove_token_for_an_organization.method,
                Create_a_remove_token_for_an_organization.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Create_a_remove_token_for_an_organization': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Get_a_selfhosted_runner_for_an_organization(BaseFunction):
    """Gets a specific self-hosted runner configured in an organization."""

    name = "Get a self-hosted runner for an organization"
    url = "https://api.github.com/orgs/{org}/actions/runners/{runner_id}"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="org", param_type=ParameterType.STRING, required=True
            ),  # The organization name. The name is not case sensitive.,
            Parameter(
                name="runner_id", param_type=ParameterType.INTEGER, required=True
            ),  # Unique identifier of the runner.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="id", param_type=OutputParameterType.INTEGER, is_array=False
            ),  # ID of the runner.,
            OutputParameter(
                name="name", param_type=OutputParameterType.STRING, is_array=False
            ),  # Name of the runner.,
            OutputParameter(
                name="os", param_type=OutputParameterType.STRING, is_array=False
            ),  # Operating system.,
            OutputParameter(
                name="status", param_type=OutputParameterType.STRING, is_array=False
            ),  # Status of the runner.,
            OutputParameter(
                name="busy", param_type=OutputParameterType.BOOLEAN, is_array=False
            ),  # Whether the runner is busy.,
            OutputParameter(
                name="ephemeral", param_type=OutputParameterType.BOOLEAN, is_array=False
            ),  # Whether the runner is ephemeral.,
            OutputParameter(
                name="labels", param_type=OutputParameterType.OBJECT, is_array=True
            ),  # Labels of the runner.,
            OutputParameter(
                name="id", param_type=OutputParameterType.INTEGER, is_array=False
            ),  # Label ID.,
            OutputParameter(
                name="name", param_type=OutputParameterType.STRING, is_array=False
            ),  # Label name.,
            OutputParameter(
                name="type", param_type=OutputParameterType.STRING, is_array=False
            ),  # Label type.
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Get_a_selfhosted_runner_for_an_organization.method,
                Get_a_selfhosted_runner_for_an_organization.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_a_selfhosted_runner_for_an_organization': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Delete_a_selfhosted_runner_from_an_organization(BaseFunction):
    """Deletes a self-hosted runner from an organization."""

    name = "Delete a self-hosted runner from an organization"
    url = "https://api.github.com/orgs/{org}/actions/runners/{runner_id}"
    args_in_url = True
    method = DELETE

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="org", param_type=ParameterType.STRING, required=True
            ),  # The organization name. The name is not case sensitive.,
            Parameter(
                name="runner_id", param_type=ParameterType.INTEGER, required=True
            ),  # Unique identifier of the runner.
        ]

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Delete_a_selfhosted_runner_from_an_organization.method,
                Delete_a_selfhosted_runner_from_an_organization.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Delete_a_selfhosted_runner_from_an_organization': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class List_labels_for_a_selfhosted_runner_for_an_organization(BaseFunction):
    """Lists labels for a self-hosted runner in an organization."""

    name = "List labels for a self-hosted runner for an organization"
    url = "https://api.github.com/orgs/{org}/actions/runners/{runner_id}/labels"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="org", param_type=ParameterType.STRING, required=True
            ),  # The organization name. The name is not case sensitive.,
            Parameter(
                name="runner_id", param_type=ParameterType.INTEGER, required=True
            ),  # The runner ID.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="total_count",
                param_type=OutputParameterType.INTEGER,
                is_array=False,
            ),  # Total number of labels.,
            OutputParameter(
                name="labels", param_type=OutputParameterType.OBJECT, is_array=True
            ),  # List of labels.,
            OutputParameter(
                name="id", param_type=OutputParameterType.INTEGER, is_array=False
            ),  # Label ID.,
            OutputParameter(
                name="name", param_type=OutputParameterType.STRING, is_array=False
            ),  # Label name.,
            OutputParameter(
                name="type", param_type=OutputParameterType.STRING, is_array=False
            ),  # Label type.
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                List_labels_for_a_selfhosted_runner_for_an_organization.method,
                List_labels_for_a_selfhosted_runner_for_an_organization.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'List_labels_for_a_selfhosted_runner_for_an_organization': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Add_custom_labels_to_a_selfhosted_runner_for_an_organization(BaseFunction):
    """Adds custom labels to a self-hosted runner in an organization."""

    name = "Add custom labels to a self-hosted runner for an organization"
    url = "https://api.github.com/orgs/{org}/actions/runners/{runner_id}/labels"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="org", param_type=ParameterType.STRING, required=True
            ),  # The organization name.,
            Parameter(
                name="runner_id", param_type=ParameterType.INTEGER, required=True
            ),  # The runner ID.,
            Parameter(
                name="labels", param_type=OutputParameterType.OBJECT, required=True
            ),  # Array of strings for labels to add.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="total_count",
                param_type=OutputParameterType.INTEGER,
                is_array=False,
            ),  # Total count of labels.,
            OutputParameter(
                name="labels", param_type=OutputParameterType.OBJECT, is_array=True
            ),  # List of labels.,
            OutputParameter(
                name="id", param_type=OutputParameterType.INTEGER, is_array=False
            ),  # Label ID.,
            OutputParameter(
                name="name", param_type=OutputParameterType.STRING, is_array=False
            ),  # Label name.,
            OutputParameter(
                name="type", param_type=OutputParameterType.STRING, is_array=False
            ),  # Label type.
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Add_custom_labels_to_a_selfhosted_runner_for_an_organization.method,
                Add_custom_labels_to_a_selfhosted_runner_for_an_organization.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Add_custom_labels_to_a_selfhosted_runner_for_an_organization': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Set_custom_labels_for_a_selfhosted_runner_for_an_organization(BaseFunction):
    """Remove all previous custom labels and set new labels for a self-hosted runner in an organization."""

    name = "Set custom labels for a self-hosted runner for an organization"
    url = "https://api.github.com/orgs/{org}/actions/runners/{runner_id}/labels"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="org", param_type=ParameterType.STRING, required=True
            ),  # The organization name.,
            Parameter(
                name="runner_id", param_type=ParameterType.INTEGER, required=True
            ),  # The runner ID.,
            Parameter(
                name="labels", param_type=OutputParameterType.OBJECT, required=True
            ),  # Array of strings for labels to set. Can be empty to remove all labels.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="total_count",
                param_type=OutputParameterType.INTEGER,
                is_array=False,
            ),  # Total count of labels.,
            OutputParameter(
                name="labels", param_type=OutputParameterType.OBJECT, is_array=True
            ),  # List of labels.,
            OutputParameter(
                name="id", param_type=OutputParameterType.INTEGER, is_array=False
            ),  # Label ID.,
            OutputParameter(
                name="name", param_type=OutputParameterType.STRING, is_array=False
            ),  # Label name.,
            OutputParameter(
                name="type", param_type=OutputParameterType.STRING, is_array=False
            ),  # Label type.
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Set_custom_labels_for_a_selfhosted_runner_for_an_organization.method,
                Set_custom_labels_for_a_selfhosted_runner_for_an_organization.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Set_custom_labels_for_a_selfhosted_runner_for_an_organization': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Remove_all_custom_labels_from_a_selfhosted_runner_for_an_organization(
    BaseFunction
):
    """Removes all custom labels from a self-hosted runner in an organization."""

    name = "Remove all custom labels from a self-hosted runner for an organization"
    url = "https://api.github.com/orgs/{org}/actions/runners/{runner_id}/labels"
    args_in_url = True
    method = DELETE

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="org", param_type=ParameterType.STRING, required=True
            ),  # The organization name.,
            Parameter(
                name="runner_id", param_type=ParameterType.INTEGER, required=True
            ),  # The runner ID.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="total_count",
                param_type=OutputParameterType.INTEGER,
                is_array=False,
            ),  # Total number of labels remaining.,
            OutputParameter(
                name="labels", param_type=OutputParameterType.OBJECT, is_array=True
            ),  # Remaining labels.,
            OutputParameter(
                name="id", param_type=OutputParameterType.INTEGER, is_array=False
            ),  # Label ID.,
            OutputParameter(
                name="name", param_type=OutputParameterType.STRING, is_array=False
            ),  # Label name.,
            OutputParameter(
                name="type", param_type=OutputParameterType.STRING, is_array=False
            ),  # Label type.
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Remove_all_custom_labels_from_a_selfhosted_runner_for_an_organization.method,
                Remove_all_custom_labels_from_a_selfhosted_runner_for_an_organization.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Remove_all_custom_labels_from_a_selfhosted_runner_for_an_organization': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Remove_a_custom_label_from_a_selfhosted_runner_for_an_organization(BaseFunction):
    """Removes a custom label from a self-hosted runner in an organization."""

    name = "Remove a custom label from a self-hosted runner for an organization"
    url = "https://api.github.com/orgs/{org}/actions/runners/{runner_id}/labels/{name}"
    args_in_url = True
    method = DELETE

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="org", param_type=ParameterType.STRING, required=True
            ),  # The organization name.,
            Parameter(
                name="runner_id", param_type=ParameterType.INTEGER, required=True
            ),  # The runner ID.,
            Parameter(
                name="name", param_type=ParameterType.STRING, required=True
            ),  # The custom label to remove.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="total_count",
                param_type=OutputParameterType.INTEGER,
                is_array=False,
            ),  # Remaining labels.,
            OutputParameter(
                name="labels", param_type=OutputParameterType.OBJECT, is_array=True
            ),  # Remaining labels.,
            OutputParameter(
                name="id", param_type=OutputParameterType.INTEGER, is_array=False
            ),  # Label ID.,
            OutputParameter(
                name="name", param_type=OutputParameterType.STRING, is_array=False
            ),  # Label name.,
            OutputParameter(
                name="type", param_type=OutputParameterType.STRING, is_array=False
            ),  # Label type.
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Remove_a_custom_label_from_a_selfhosted_runner_for_an_organization.method,
                Remove_a_custom_label_from_a_selfhosted_runner_for_an_organization.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Remove_a_custom_label_from_a_selfhosted_runner_for_an_organization': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class List_selfhosted_runners_for_a_repository(BaseFunction):
    """Lists all self-hosted runners in a repository."""

    name = "List self-hosted runners for a repository"
    url = "https://api.github.com/repos/{owner}/{repo}/actions/runners"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner.,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name.,
            Parameter(
                name="name", param_type=ParameterType.STRING, required=False
            ),  # The name of a self-hosted runner.,
            Parameter(
                name="per_page", param_type=ParameterType.INTEGER, required=False
            ),  # Results per page.,
            Parameter(
                name="page", param_type=ParameterType.INTEGER, required=False
            ),  # Page number.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="total_count",
                param_type=OutputParameterType.INTEGER,
                is_array=False,
            ),  # Total number of runners.,
            OutputParameter(
                name="runners", param_type=OutputParameterType.OBJECT, is_array=True
            ),  # List of runners.,
            OutputParameter(
                name="id", param_type=OutputParameterType.INTEGER, is_array=False
            ),  # Runner ID.,
            OutputParameter(
                name="name", param_type=OutputParameterType.STRING, is_array=False
            ),  # Runner name.,
            OutputParameter(
                name="os", param_type=OutputParameterType.STRING, is_array=False
            ),  # Operating system.,
            OutputParameter(
                name="status", param_type=OutputParameterType.STRING, is_array=False
            ),  # Status.,
            OutputParameter(
                name="busy", param_type=OutputParameterType.BOOLEAN, is_array=False
            ),  # Busy status.,
            OutputParameter(
                name="ephemeral", param_type=OutputParameterType.BOOLEAN, is_array=False
            ),  # Ephemeral status.,
            OutputParameter(
                name="labels", param_type=OutputParameterType.OBJECT, is_array=True
            ),  # Labels of the runner.,
            OutputParameter(
                name="id", param_type=OutputParameterType.INTEGER, is_array=False
            ),  # Label ID.,
            OutputParameter(
                name="name", param_type=OutputParameterType.STRING, is_array=False
            ),  # Label name.,
            OutputParameter(
                name="type", param_type=OutputParameterType.STRING, is_array=False
            ),  # Label type.
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                List_selfhosted_runners_for_a_repository.method,
                List_selfhosted_runners_for_a_repository.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'List_selfhosted_runners_for_a_repository': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class List_runner_applications_for_a_repository(BaseFunction):
    """Lists binaries for the runner application that you can download and run."""

    name = "List runner applications for a repository"
    url = "https://api.github.com/repos/{owner}/{repo}/actions/runners/downloads"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner.,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="os", param_type=OutputParameterType.STRING, is_array=False
            ),  # Operating system.,
            OutputParameter(
                name="architecture",
                param_type=OutputParameterType.STRING,
                is_array=False,
            ),  # System architecture.,
            OutputParameter(
                name="download_url",
                param_type=OutputParameterType.STRING,
                is_array=False,
            ),  # Download URL.,
            OutputParameter(
                name="filename", param_type=OutputParameterType.STRING, is_array=False
            ),  # Filename.
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                List_runner_applications_for_a_repository.method,
                List_runner_applications_for_a_repository.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'List_runner_applications_for_a_repository': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Get_a_job_for_a_workflow_run(BaseFunction):
    """Retrieves a specific job in a workflow run."""

    name = "Get a job for a workflow run"
    url = "https://api.github.com/repos/{owner}/{repo}/actions/jobs/{job_id}"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # The account owner of the repository.,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # The repository name without the '.git' extension.,
            Parameter(
                name="job_id", param_type=ParameterType.INTEGER, required=True
            ),  # The unique identifier of the job.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="id", param_type=OutputParameterType.INTEGER, is_array=False
            ),  # Unique identifier of the job.,
            OutputParameter(
                name="run_id", param_type=OutputParameterType.INTEGER, is_array=False
            ),  # ID of the workflow run.,
            OutputParameter(
                name="run_url", param_type=OutputParameterType.STRING, is_array=False
            ),  # URL of the workflow run.,
            OutputParameter(
                name="node_id", param_type=OutputParameterType.STRING, is_array=False
            ),  # Node ID of the job.,
            OutputParameter(
                name="head_sha", param_type=OutputParameterType.STRING, is_array=False
            ),  # SHA of the head commit.,
            OutputParameter(
                name="url", param_type=OutputParameterType.STRING, is_array=False
            ),  # API URL of the job.,
            OutputParameter(
                name="html_url", param_type=OutputParameterType.STRING, is_array=False
            ),  # HTML URL of the job.,
            OutputParameter(
                name="status", param_type=OutputParameterType.STRING, is_array=False
            ),  # Status of the job, e.g., 'completed'.,
            OutputParameter(
                name="conclusion", param_type=OutputParameterType.STRING, is_array=False
            ),  # Conclusion of the job, e.g., 'success'.,
            OutputParameter(
                name="started_at", param_type=OutputParameterType.STRING, is_array=False
            ),  # Timestamp when the job started.,
            OutputParameter(
                name="completed_at",
                param_type=OutputParameterType.STRING,
                is_array=False,
            ),  # Timestamp when the job completed.,
            OutputParameter(
                name="name", param_type=OutputParameterType.STRING, is_array=False
            ),  # Name of the job.,
            OutputParameter(
                name="steps", param_type=OutputParameterType.OBJECT, is_array=True
            ),  # List of steps within the job.,
            OutputParameter(
                name="check_run_url",
                param_type=OutputParameterType.STRING,
                is_array=False,
            ),  # URL for the check run.,
            OutputParameter(
                name="labels", param_type=OutputParameterType.STRING, is_array=True
            ),  # Labels associated with the job.,
            OutputParameter(
                name="runner_id", param_type=OutputParameterType.INTEGER, is_array=False
            ),  # ID of the runner.,
            OutputParameter(
                name="runner_name",
                param_type=OutputParameterType.STRING,
                is_array=False,
            ),  # Name of the runner.,
            OutputParameter(
                name="runner_group_id",
                param_type=OutputParameterType.INTEGER,
                is_array=False,
            ),  # ID of the runner group.,
            OutputParameter(
                name="runner_group_name",
                param_type=OutputParameterType.STRING,
                is_array=False,
            ),  # Name of the runner group.,
            OutputParameter(
                name="workflow_name",
                param_type=OutputParameterType.STRING,
                is_array=False,
            ),  # Name of the workflow.,
            OutputParameter(
                name="head_branch",
                param_type=OutputParameterType.STRING,
                is_array=False,
            ),  # Branch name.
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Get_a_job_for_a_workflow_run.method,
                Get_a_job_for_a_workflow_run.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = (
                f"Error running function 'Get_a_job_for_a_workflow_run': {str(e)}"
            )
            logging.error(error_msg)
            raise ValueError(error_msg)


class Download_job_logs_for_a_workflow_run(BaseFunction):
    """Retrieves a redirect URL to download logs of a workflow job."""

    name = "Download job logs for a workflow run"
    url = "https://api.github.com/repos/{owner}/{repo}/actions/jobs/{job_id}/logs"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # The account owner of the repository.,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # The repository name without the '.git' extension.,
            Parameter(
                name="job_id", param_type=ParameterType.INTEGER, required=True
            ),  # The unique identifier of the job.
        ]

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Download_job_logs_for_a_workflow_run.method,
                Download_job_logs_for_a_workflow_run.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Download_job_logs_for_a_workflow_run': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class List_jobs_for_a_workflow_run_attempt(BaseFunction):
    """Lists jobs for a specific workflow run attempt."""

    name = "List jobs for a workflow run attempt"
    url = "https://api.github.com/repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/jobs"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # The account owner of the repository.,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # The repository name without the '.git' extension.,
            Parameter(
                name="run_id", param_type=ParameterType.INTEGER, required=True
            ),  # ID of the workflow run.,
            Parameter(
                name="attempt_number", param_type=ParameterType.INTEGER, required=True
            ),  # Attempt number of the workflow run.,
            Parameter(
                name="per_page", param_type=ParameterType.INTEGER, required=False
            ),  # Number of results per page, max 100.,
            Parameter(
                name="page", param_type=ParameterType.INTEGER, required=False
            ),  # Page number of the results.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="total_count",
                param_type=OutputParameterType.INTEGER,
                is_array=False,
            ),  # Total number of jobs.,
            OutputParameter(
                name="jobs", param_type=OutputParameterType.OBJECT, is_array=True
            ),  # List of jobs.
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                List_jobs_for_a_workflow_run_attempt.method,
                List_jobs_for_a_workflow_run_attempt.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'List_jobs_for_a_workflow_run_attempt': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class List_jobs_for_a_workflow_run(BaseFunction):
    """Lists jobs for a workflow run."""

    name = "List jobs for a workflow run"
    url = "https://api.github.com/repos/{owner}/{repo}/actions/runs/{run_id}/jobs"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # The account owner of the repository.,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # The repository name without the '.git' extension.,
            Parameter(
                name="run_id", param_type=ParameterType.INTEGER, required=True
            ),  # ID of the workflow run.,
            Parameter(
                name="filter", param_type=ParameterType.STRING, required=False
            ),  # Filter jobs by their `completed_at` timestamp: 'latest' or 'all'.,
            Parameter(
                name="per_page", param_type=ParameterType.INTEGER, required=False
            ),  # Number of results per page, max 100.,
            Parameter(
                name="page", param_type=ParameterType.INTEGER, required=False
            ),  # Page number of the results.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="total_count",
                param_type=OutputParameterType.INTEGER,
                is_array=False,
            ),  # Total number of jobs.,
            OutputParameter(
                name="jobs", param_type=OutputParameterType.OBJECT, is_array=True
            ),  # List of jobs.
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                List_jobs_for_a_workflow_run.method,
                List_jobs_for_a_workflow_run.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = (
                f"Error running function 'List_jobs_for_a_workflow_run': {str(e)}"
            )
            logging.error(error_msg)
            raise ValueError(error_msg)


class Rerun_a_job_from_a_workflow_run(BaseFunction):
    """Re-run a job and its dependent jobs in a workflow run."""

    name = "Re-run a job from a workflow run"
    url = "/repos/{owner}/{repo}/actions/jobs/{job_id}/rerun"
    args_in_url = True
    method = UPDATE

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # The account owner of the repository.,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # The name of the repository.,
            Parameter(
                name="job_id", param_type=ParameterType.INTEGER, required=True
            ),  # The unique identifier of the job.,
            Parameter(
                name="enable_debug_logging",
                param_type=ParameterType.BOOLEAN,
                required=False,
            ),  # Whether to enable debug logging for the re-run. Default: false.
        ]

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Rerun_a_job_from_a_workflow_run.method,
                Rerun_a_job_from_a_workflow_run.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = (
                f"Error running function 'Rerun_a_job_from_a_workflow_run': {str(e)}"
            )
            logging.error(error_msg)
            raise ValueError(error_msg)


class List_workflow_runs_for_a_repository(BaseFunction):
    """Lists all workflow runs for a repository."""

    name = "List workflow runs for a repository"
    url = "/repos/{owner}/{repo}/actions/runs"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # The account owner of the repository.,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # The name of the repository.,
            Parameter(
                name="actor", param_type=ParameterType.STRING, required=False
            ),  # Returns someone's workflow runs. Use the login for the user who created the push.,
            Parameter(
                name="branch", param_type=ParameterType.STRING, required=False
            ),  # Returns workflow runs associated with a branch.,
            Parameter(
                name="event", param_type=ParameterType.STRING, required=False
            ),  # Returns workflow run triggered by the event you specify.,
            Parameter(
                name="status", param_type=ParameterType.STRING, required=False
            ),  # Returns workflow runs with the check run status or conclusion you specify.,
            Parameter(
                name="per_page", param_type=ParameterType.INTEGER, required=False
            ),  # Number of results per page (max 100). Default: 30.,
            Parameter(
                name="page", param_type=ParameterType.INTEGER, required=False
            ),  # Page number of the results to fetch. Default: 1.,
            Parameter(
                name="created", param_type=ParameterType.STRING, required=False
            ),  # Returns workflow runs created within the given date-time range.,
            Parameter(
                name="exclude_pull_requests",
                param_type=ParameterType.BOOLEAN,
                required=False,
            ),  # If true, pull requests are omitted from the response. Default: false.,
            Parameter(
                name="check_suite_id", param_type=ParameterType.INTEGER, required=False
            ),  # Returns workflow runs with the check_suite_id you specify.,
            Parameter(
                name="head_sha", param_type=ParameterType.STRING, required=False
            ),  # Only returns workflow runs associated with the specified head_sha.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="total_count",
                param_type=OutputParameterType.INTEGER,
                is_array=False,
            ),  # Total count of workflow runs.,
            OutputParameter(
                name="workflow_runs",
                param_type=OutputParameterType.OBJECT,
                is_array=True,
            ),  # List of workflow run objects.
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                List_workflow_runs_for_a_repository.method,
                List_workflow_runs_for_a_repository.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'List_workflow_runs_for_a_repository': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Get_a_workflow_run(BaseFunction):
    """Gets a specific workflow run."""

    name = "Get a workflow run"
    url = "/repos/{owner}/{repo}/actions/runs/{run_id}"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # The account owner of the repository.,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # The name of the repository.,
            Parameter(
                name="run_id", param_type=ParameterType.INTEGER, required=True
            ),  # The unique identifier of the workflow run.,
            Parameter(
                name="exclude_pull_requests",
                param_type=ParameterType.BOOLEAN,
                required=False,
            ),  # If true, pull requests are omitted from the response. Default: false.
        ]

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Get_a_workflow_run.method,
                Get_a_workflow_run.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_a_workflow_run': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Delete_a_workflow_run(BaseFunction):
    """Deletes a specific workflow run."""

    name = "Delete a workflow run"
    url = "/repos/{owner}/{repo}/actions/runs/{run_id}"
    args_in_url = True
    method = DELETE

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # The account owner of the repository.,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # The name of the repository.,
            Parameter(
                name="run_id", param_type=ParameterType.INTEGER, required=True
            ),  # The unique identifier of the workflow run.
        ]

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Delete_a_workflow_run.method,
                Delete_a_workflow_run.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Delete_a_workflow_run': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Cancel_a_workflow_run(BaseFunction):
    """Cancels a workflow run using its id."""

    name = "Cancel a workflow run"
    url = "/repos/{owner}/{repo}/actions/runs/{run_id}/cancel"
    args_in_url = True
    method = UPDATE

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # The account owner of the repository.,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # The name of the repository.,
            Parameter(
                name="run_id", param_type=ParameterType.INTEGER, required=True
            ),  # The unique identifier of the workflow run.
        ]

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Cancel_a_workflow_run.method,
                Cancel_a_workflow_run.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Cancel_a_workflow_run': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class List_workflow_runs_for_a_workflow(BaseFunction):
    """List all workflow runs for a workflow. You can replace `workflow_id` with the workflow file name."""

    name = "List workflow runs for a workflow"
    url = "https://api.github.com/repos/{owner}/{repo}/actions/workflows/{workflow_id}/runs"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # The account owner of the repository. The name is not case sensitive.,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # The name of the repository without the `.git` extension. The name is not case sensitive.,
            Parameter(
                name="workflow_id", param_type=ParameterType.STRING, required=True
            ),  # The ID of the workflow or the workflow file name.,
            Parameter(
                name="actor", param_type=ParameterType.STRING, required=False
            ),  # Returns someone's workflow runs. Use the login for the user who created the push associated with the check suite or workflow run.,
            Parameter(
                name="branch", param_type=ParameterType.STRING, required=False
            ),  # Returns workflow runs associated with a branch. Use the name of the branch of the push.,
            Parameter(
                name="event", param_type=ParameterType.STRING, required=False
            ),  # Returns workflow run triggered by the event you specify. For example, `push`, `pull_request` or `issue`.,
            Parameter(
                name="status", param_type=ParameterType.STRING, required=False
            ),  # Returns workflow runs with the check run `status` or `conclusion` that you specify. Can be one of: `completed`, `action_required`, `cancelled`, `failure`, `neutral`, `skipped`, `stale`, `success`, `timed_out`, `in_progress`, `queued`, `requested`, `waiting`, `pending`.,
            Parameter(
                name="per_page", param_type=ParameterType.INTEGER, required=False
            ),  # The number of results per page (max 100). Default: 30.,
            Parameter(
                name="page", param_type=ParameterType.INTEGER, required=False
            ),  # The page number of the results to fetch. Default: 1.,
            Parameter(
                name="created", param_type=ParameterType.STRING, required=False
            ),  # Returns workflow runs created within the given date-time range.,
            Parameter(
                name="exclude_pull_requests",
                param_type=ParameterType.BOOLEAN,
                required=False,
            ),  # If `true` pull requests are omitted from the response (empty array). Default: `false`.,
            Parameter(
                name="check_suite_id", param_type=ParameterType.INTEGER, required=False
            ),  # Returns workflow runs with the `check_suite_id` that you specify.,
            Parameter(
                name="head_sha", param_type=ParameterType.STRING, required=False
            ),  # Only returns workflow runs that are associated with the specified `head_sha`.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="total_count",
                param_type=OutputParameterType.INTEGER,
                is_array=False,
            ),  # Total number of workflow runs.,
            OutputParameter(
                name="workflow_runs",
                param_type=OutputParameterType.OBJECT,
                is_array=True,
            ),  # List of workflow run objects.
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                List_workflow_runs_for_a_workflow.method,
                List_workflow_runs_for_a_workflow.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = (
                f"Error running function 'List_workflow_runs_for_a_workflow': {str(e)}"
            )
            logging.error(error_msg)
            raise ValueError(error_msg)


class GET_orgsorgactionscacheusage(BaseFunction):
    """Get the total cache usage for an organization."""

    name = "GET /orgs/{org}/actions/cache/usage"
    url = "/orgs/{org}/actions/cache/usage"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="org", param_type=ParameterType.STRING, required=True
            ),  # Name of the organization
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="total_bytes_used",
                param_type=OutputParameterType.INTEGER,
                is_array=False,
            ),  # Total bytes used by the organization's actions cache,
            OutputParameter(
                name="total_bytes_limit",
                param_type=OutputParameterType.INTEGER,
                is_array=False,
            ),  # Total cache size limit for the organization
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                GET_orgsorgactionscacheusage.method,
                GET_orgsorgactionscacheusage.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = (
                f"Error running function 'GET_orgsorgactionscacheusage': {str(e)}"
            )
            logging.error(error_msg)
            raise ValueError(error_msg)


class GET_orgsorgactionscacheusagebyrepository(BaseFunction):
    """Get cache usage for each repository in an organization."""

    name = "GET /orgs/{org}/actions/cache/usage-by-repository"
    url = "/orgs/{org}/actions/cache/usage-by-repository"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="org", param_type=ParameterType.STRING, required=True
            ),  # Name of the organization
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="repositories",
                param_type=OutputParameterType.OBJECT,
                is_array=True,
            ),  # List of repositories with cache usage,
            OutputParameter(
                name="repository_name",
                param_type=OutputParameterType.STRING,
                is_array=False,
            ),  # Repository name,
            OutputParameter(
                name="bytes_used",
                param_type=OutputParameterType.INTEGER,
                is_array=False,
            ),  # Cache size used by the repository
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                GET_orgsorgactionscacheusagebyrepository.method,
                GET_orgsorgactionscacheusagebyrepository.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'GET_orgsorgactionscacheusagebyrepository': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class GET_orgsorgactionshostedrunners(BaseFunction):
    """List hosted runners for an organization."""

    name = "GET /orgs/{org}/actions/hosted-runners"
    url = "/orgs/{org}/actions/hosted-runners"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="org", param_type=ParameterType.STRING, required=True
            ),  # Organization name
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="runners", param_type=OutputParameterType.OBJECT, is_array=True
            ),  # List of hosted runners,
            OutputParameter(
                name="id", param_type=OutputParameterType.INTEGER, is_array=False
            ),  # Runner ID,
            OutputParameter(
                name="name", param_type=OutputParameterType.STRING, is_array=False
            ),  # Runner name,
            OutputParameter(
                name="os", param_type=OutputParameterType.STRING, is_array=False
            ),  # Operating system of the runner,
            OutputParameter(
                name="status", param_type=OutputParameterType.STRING, is_array=False
            ),  # Status of the runner
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                GET_orgsorgactionshostedrunners.method,
                GET_orgsorgactionshostedrunners.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = (
                f"Error running function 'GET_orgsorgactionshostedrunners': {str(e)}"
            )
            logging.error(error_msg)
            raise ValueError(error_msg)


class POST_orgsorgactionshostedrunners(BaseFunction):
    """Create a new GitHub-hosted runner for an organization."""

    name = "POST /orgs/{org}/actions/hosted-runners"
    url = "/orgs/{org}/actions/hosted-runners"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="org", param_type=ParameterType.STRING, required=True
            ),  # Organization name,
            Parameter(
                name="runner_name", param_type=ParameterType.STRING, required=True
            ),  # Name for the new runner,
            Parameter(
                name="os", param_type=ParameterType.STRING, required=True
            ),  # Operating system for the runner
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="runner_id", param_type=OutputParameterType.INTEGER, is_array=False
            ),  # ID of the created runner
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                POST_orgsorgactionshostedrunners.method,
                POST_orgsorgactionshostedrunners.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = (
                f"Error running function 'POST_orgsorgactionshostedrunners': {str(e)}"
            )
            logging.error(error_msg)
            raise ValueError(error_msg)


class GET_orgsorgactionshostedrunnersimagesgithubowned(BaseFunction):
    """List images of GitHub-hosted runners owned by the organization."""

    name = "GET /orgs/{org}/actions/hosted-runners/images/github-owned"
    url = "/orgs/{org}/actions/hosted-runners/images/github-owned"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="org", param_type=ParameterType.STRING, required=True
            ),  # Organization name
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="images", param_type=OutputParameterType.STRING, is_array=True
            ),  # List of GitHub-owned images
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                GET_orgsorgactionshostedrunnersimagesgithubowned.method,
                GET_orgsorgactionshostedrunnersimagesgithubowned.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'GET_orgsorgactionshostedrunnersimagesgithubowned': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class GET_orgsorgactionshostedrunnersimagespartner(BaseFunction):
    """List partner images of GitHub-hosted runners for the organization."""

    name = "GET /orgs/{org}/actions/hosted-runners/images/partner"
    url = "/orgs/{org}/actions/hosted-runners/images/partner"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="org", param_type=ParameterType.STRING, required=True
            ),  # Organization name
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="images", param_type=OutputParameterType.STRING, is_array=True
            ),  # List of partner images for GitHub-hosted runners
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                GET_orgsorgactionshostedrunnersimagespartner.method,
                GET_orgsorgactionshostedrunnersimagespartner.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'GET_orgsorgactionshostedrunnersimagespartner': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class GET_orgsorgactionshostedrunnerslimits(BaseFunction):
    """Get limits on GitHub-hosted runners for the organization."""

    name = "GET /orgs/{org}/actions/hosted-runners/limits"
    url = "/orgs/{org}/actions/hosted-runners/limits"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="org", param_type=ParameterType.STRING, required=True
            ),  # Organization name
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="limits", param_type=OutputParameterType.OBJECT, is_array=False
            ),  # Limits on GitHub-hosted runners,
            OutputParameter(
                name="max_runners",
                param_type=OutputParameterType.INTEGER,
                is_array=False,
            ),  # Maximum number of runners,
            OutputParameter(
                name="current_runners",
                param_type=OutputParameterType.INTEGER,
                is_array=False,
            ),  # Current number of runners
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                GET_orgsorgactionshostedrunnerslimits.method,
                GET_orgsorgactionshostedrunnerslimits.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'GET_orgsorgactionshostedrunnerslimits': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class GET_orgsorgactionshostedrunnersmachinesizes(BaseFunction):
    """List available machine types for GitHub-hosted runners."""

    name = "GET /orgs/{org}/actions/hosted-runners/machine-sizes"
    url = "/orgs/{org}/actions/hosted-runners/machine-sizes"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="org", param_type=ParameterType.STRING, required=True
            ),  # Organization name
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="microsoft_public_agents",
                param_type=OutputParameterType.STRING,
                is_array=True,
            ),  # List of Microsoft public agent sizes,
            OutputParameter(
                name="custom_machine_types",
                param_type=OutputParameterType.STRING,
                is_array=True,
            ),  # List of custom machine types
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                GET_orgsorgactionshostedrunnersmachinesizes.method,
                GET_orgsorgactionshostedrunnersmachinesizes.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'GET_orgsorgactionshostedrunnersmachinesizes': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class GET_orgsorgactionshostedrunnersplatforms(BaseFunction):
    """List platforms for GitHub-hosted runners."""

    name = "GET /orgs/{org}/actions/hosted-runners/platforms"
    url = "/orgs/{org}/actions/hosted-runners/platforms"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="org", param_type=ParameterType.STRING, required=True
            ),  # Organization name
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="platforms", param_type=OutputParameterType.STRING, is_array=True
            ),  # List of platforms supported for GitHub-hosted runners
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                GET_orgsorgactionshostedrunnersplatforms.method,
                GET_orgsorgactionshostedrunnersplatforms.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'GET_orgsorgactionshostedrunnersplatforms': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class GET_orgsorgactionshostedrunnershosted_runner_id(BaseFunction):
    """Get details of a specific GitHub-hosted runner."""

    name = "GET /orgs/{org}/actions/hosted-runners/{hosted_runner_id}"
    url = "/orgs/{org}/actions/hosted-runners/{hosted_runner_id}"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="org", param_type=ParameterType.STRING, required=True
            ),  # Organization name,
            Parameter(
                name="hosted_runner_id", param_type=ParameterType.INTEGER, required=True
            ),  # ID of the hosted runner
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="id", param_type=OutputParameterType.INTEGER, is_array=False
            ),  # Runner ID,
            OutputParameter(
                name="name", param_type=OutputParameterType.STRING, is_array=False
            ),  # Runner name,
            OutputParameter(
                name="os", param_type=OutputParameterType.STRING, is_array=False
            ),  # Operating system,
            OutputParameter(
                name="status", param_type=OutputParameterType.STRING, is_array=False
            ),  # Status of the runner
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                GET_orgsorgactionshostedrunnershosted_runner_id.method,
                GET_orgsorgactionshostedrunnershosted_runner_id.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'GET_orgsorgactionshostedrunnershosted_runner_id': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class PATCH_orgsorgactionshostedrunnershosted_runner_id(BaseFunction):
    """Update a specific GitHub-hosted runner."""

    name = "PATCH /orgs/{org}/actions/hosted-runners/{hosted_runner_id}"
    url = "/orgs/{org}/actions/hosted-runners/{hosted_runner_id}"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="org", param_type=ParameterType.STRING, required=True
            ),  # Organization name,
            Parameter(
                name="hosted_runner_id", param_type=ParameterType.INTEGER, required=True
            ),  # ID of the hosted runner,
            Parameter(
                name="name", param_type=ParameterType.STRING, required=False
            ),  # New name for the runner,
            Parameter(
                name="status", param_type=ParameterType.STRING, required=False
            ),  # New status of the runner
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="id", param_type=OutputParameterType.INTEGER, is_array=False
            ),  # Runer ID
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                PATCH_orgsorgactionshostedrunnershosted_runner_id.method,
                PATCH_orgsorgactionshostedrunnershosted_runner_id.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'PATCH_orgsorgactionshostedrunnershosted_runner_id': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class DELETE_orgsorgactionshostedrunnershosted_runner_id(BaseFunction):
    """Delete a specific GitHub-hosted runner."""

    name = "DELETE /orgs/{org}/actions/hosted-runners/{hosted_runner_id}"
    url = "/orgs/{org}/actions/hosted-runners/{hosted_runner_id}"
    args_in_url = True
    method = DELETE

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="org", param_type=ParameterType.STRING, required=True
            ),  # Organization name,
            Parameter(
                name="hosted_runner_id", param_type=ParameterType.INTEGER, required=True
            ),  # ID of the hosted runner
        ]

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                DELETE_orgsorgactionshostedrunnershosted_runner_id.method,
                DELETE_orgsorgactionshostedrunnershosted_runner_id.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'DELETE_orgsorgactionshostedrunnershosted_runner_id': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Endpoints_available_for_GitHub_App_installation_access_tokens(BaseFunction):
    """This endpoint provides information about the endpoints available for GitHub App installation access tokens."""

    name = "Endpoints available for GitHub App installation access tokens"
    url = "https://docs.github.com/en/rest/authentication/endpoints-available-for-github-app-installation-access-tokens-#0"
    args_in_url = False
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Endpoints_available_for_GitHub_App_installation_access_tokens.method,
                Endpoints_available_for_GitHub_App_installation_access_tokens.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Endpoints_available_for_GitHub_App_installation_access_tokens': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Search_Code(BaseFunction):
    """Search code snippets in repositories."""

    name = "Search Code"
    url = "https://api.github.com/search/code"
    args_in_url = False
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="q", param_type=ParameterType.STRING, required=True
            ),  # The search keywords, along with any qualifiers.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="total_count",
                param_type=OutputParameterType.INTEGER,
                is_array=False,
            ),  # Total number of search results.,
            OutputParameter(
                name="items", param_type=OutputParameterType.OBJECT, is_array=True
            ),  # List of search result items.
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Search_Code.method, Search_Code.url, input_data.validated_data
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Search_Code': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Get_Secret_Scanning_Alerts_for_an_Organization(BaseFunction):
    """List secret scanning alerts for an organization."""

    name = "Get Secret Scanning Alerts for an Organization"
    url = "https://api.github.com/orgs/{org}/secret-scanning/alerts"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="org", param_type=ParameterType.STRING, required=True
            ),  # Name of the organization.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="total_count",
                param_type=OutputParameterType.INTEGER,
                is_array=False,
            ),  # Total number of alerts.,
            OutputParameter(
                name="alerts", param_type=OutputParameterType.OBJECT, is_array=True
            ),  # List of secret scanning alerts.
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Get_Secret_Scanning_Alerts_for_an_Organization.method,
                Get_Secret_Scanning_Alerts_for_an_Organization.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_Secret_Scanning_Alerts_for_an_Organization': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Get_Secret_Scanning_Alerts_for_a_Repository(BaseFunction):
    """List secret scanning alerts for a repository."""

    name = "Get Secret Scanning Alerts for a Repository"
    url = "https://api.github.com/repos/{owner}/{repo}/secret-scanning/alerts"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner.,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="total_count",
                param_type=OutputParameterType.INTEGER,
                is_array=False,
            ),  # Total number of alerts.,
            OutputParameter(
                name="alerts", param_type=OutputParameterType.OBJECT, is_array=True
            ),  # List of secret scanning alerts.
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Get_Secret_Scanning_Alerts_for_a_Repository.method,
                Get_Secret_Scanning_Alerts_for_a_Repository.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_Secret_Scanning_Alerts_for_a_Repository': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Get_Security_Advisory_by_ID(BaseFunction):
    """Retrieve details of a global security advisory by its GHSA ID."""

    name = "Get Security Advisory by ID"
    url = "https://api.github.com/advisories/{ghsa_id}"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="ghsa_id", param_type=ParameterType.STRING, required=True
            ),  # Security advisory identifier (GHSA ID).
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="id", param_type=OutputParameterType.STRING, is_array=False
            ),  # Unique identifier for the advisory.,
            OutputParameter(
                name="published_at",
                param_type=OutputParameterType.STRING,
                is_array=False,
            ),  # Publication date.,
            OutputParameter(
                name="summary", param_type=OutputParameterType.STRING, is_array=False
            ),  # Summary of the advisory.
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Get_Security_Advisory_by_ID.method,
                Get_Security_Advisory_by_ID.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = (
                f"Error running function 'Get_Security_Advisory_by_ID': {str(e)}"
            )
            logging.error(error_msg)
            raise ValueError(error_msg)


class List_Organization_Security_Advisories(BaseFunction):
    """List security advisories for an organization."""

    name = "List Organization Security Advisories"
    url = "https://api.github.com/orgs/{org}/security-advisories"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="org", param_type=ParameterType.STRING, required=True
            ),  # Organization name.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="advisories", param_type=OutputParameterType.OBJECT, is_array=True
            ),  # List of security advisories for the organization.
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                List_Organization_Security_Advisories.method,
                List_Organization_Security_Advisories.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'List_Organization_Security_Advisories': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Create_a_Team(BaseFunction):
    """Create a new team within an organization."""

    name = "Create a Team"
    url = "https://api.github.com/orgs/{org}/teams"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="org", param_type=ParameterType.STRING, required=True
            ),  # Organization name.,
            Parameter(
                name="name", param_type=ParameterType.STRING, required=True
            ),  # Name of the team.,
            Parameter(
                name="description", param_type=ParameterType.STRING, required=False
            ),  # Team description.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="id", param_type=OutputParameterType.INTEGER, is_array=False
            ),  # Unique identifier of the team.,
            OutputParameter(
                name="name", param_type=OutputParameterType.STRING, is_array=False
            ),  # Name of the team.
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Create_a_Team.method, Create_a_Team.url, input_data.validated_data
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Create_a_Team': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Get_User_Profile(BaseFunction):
    """Retrieve public profile information for a user."""

    name = "Get User Profile"
    url = "https://api.github.com/users/{username}"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="username", param_type=ParameterType.STRING, required=True
            ),  # GitHub username.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="login", param_type=OutputParameterType.STRING, is_array=False
            ),  # Username.,
            OutputParameter(
                name="id", param_type=OutputParameterType.INTEGER, is_array=False
            ),  # User ID.,
            OutputParameter(
                name="name", param_type=OutputParameterType.STRING, is_array=False
            ),  # Full name if available.
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Get_User_Profile.method, Get_User_Profile.url, input_data.validated_data
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_User_Profile': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class List_Repository_Branches(BaseFunction):
    """List branches for a repository."""

    name = "List Repository Branches"
    url = "https://api.github.com/repos/{owner}/{repo}/branches"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner.,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="name", param_type=OutputParameterType.STRING, is_array=False
            ),  # Branch name.,
            OutputParameter(
                name="protected", param_type=OutputParameterType.BOOLEAN, is_array=False
            ),  # Whether the branch is protected.
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                List_Repository_Branches.method,
                List_Repository_Branches.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'List_Repository_Branches': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Create_an_Issue(BaseFunction):
    """Create a new issue in a repository."""

    name = "Create an Issue"
    url = "https://api.github.com/repos/{owner}/{repo}/issues"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner.,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name.,
            Parameter(
                name="title", param_type=ParameterType.STRING, required=True
            ),  # Issue title.,
            Parameter(
                name="body", param_type=ParameterType.STRING, required=False
            ),  # Issue body content.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="id", param_type=OutputParameterType.INTEGER, is_array=False
            ),  # Issue ID.,
            OutputParameter(
                name="number", param_type=OutputParameterType.INTEGER, is_array=False
            ),  # Issue number.,
            OutputParameter(
                name="title", param_type=OutputParameterType.STRING, is_array=False
            ),  # Issue title.
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Create_an_Issue.method, Create_an_Issue.url, input_data.validated_data
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Create_an_Issue': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class List_Repository_Commits(BaseFunction):
    """List commits in a repository."""

    name = "List Repository Commits"
    url = "https://api.github.com/repos/{owner}/{repo}/commits"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner.,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="sha", param_type=OutputParameterType.STRING, is_array=False
            ),  # Commit SHA.,
            OutputParameter(
                name="commit", param_type=OutputParameterType.OBJECT, is_array=True
            ),  # Commit details.
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                List_Repository_Commits.method,
                List_Repository_Commits.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'List_Repository_Commits': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Get_User_GPG_Keys(BaseFunction):
    """List GPG keys for a user."""

    name = "Get User GPG Keys"
    url = "https://api.github.com/users/{username}/gpg_keys"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="username", param_type=ParameterType.STRING, required=True
            ),  # GitHub username.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="keys", param_type=OutputParameterType.OBJECT, is_array=True
            ),  # List of GPG keys.
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Get_User_GPG_Keys.method,
                Get_User_GPG_Keys.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_User_GPG_Keys': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Download_Workplace_Log(BaseFunction):
    """List available GitHub Actions runner downloads."""

    name = "Download Workplace Log"
    url = "https://api.github.com/actions/runners/downloads"
    args_in_url = False
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return [
            OutputParameter(
                name="downloads", param_type=OutputParameterType.OBJECT, is_array=True
            ),  # List of available downloads.
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Download_Workplace_Log.method,
                Download_Workplace_Log.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Download_Workplace_Log': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Get_Repository_Secrets_Public_Key(BaseFunction):
    """Get the public key for encrypting secrets."""

    name = "Get Repository Secrets Public Key"
    url = "https://api.github.com/repos/{owner}/{repo}/actions/secrets/public-key"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner.,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="key_id", param_type=OutputParameterType.STRING, is_array=False
            ),  # Public key ID.,
            OutputParameter(
                name="key", param_type=OutputParameterType.STRING, is_array=False
            ),  # Public key in Base64.
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Get_Repository_Secrets_Public_Key.method,
                Get_Repository_Secrets_Public_Key.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = (
                f"Error running function 'Get_Repository_Secrets_Public_Key': {str(e)}"
            )
            logging.error(error_msg)
            raise ValueError(error_msg)


class Create_or_Update_a_Repository_Secret(BaseFunction):
    """Create or update a repository secret."""

    name = "Create or Update a Repository Secret"
    url = "https://api.github.com/repos/{owner}/{repo}/actions/secrets/{secret_name}"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner.,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name.,
            Parameter(
                name="secret_name", param_type=ParameterType.STRING, required=True
            ),  # Name of the secret.,
            Parameter(
                name="encrypted_value", param_type=ParameterType.STRING, required=True
            ),  # Encrypted secret value.,
            Parameter(
                name="key_id", param_type=ParameterType.STRING, required=True
            ),  # Public key ID.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="secret_name",
                param_type=OutputParameterType.STRING,
                is_array=False,
            ),  # Name of the secret.,
            OutputParameter(
                name="created_at", param_type=OutputParameterType.STRING, is_array=False
            ),  # Creation timestamp.,
            OutputParameter(
                name="updated_at", param_type=OutputParameterType.STRING, is_array=False
            ),  # Update timestamp.
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Create_or_Update_a_Repository_Secret.method,
                Create_or_Update_a_Repository_Secret.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Create_or_Update_a_Repository_Secret': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class List_Repository_Deploy_Keys(BaseFunction):
    """List deployment keys for a repository."""

    name = "List Repository Deploy Keys"
    url = "https://api.github.com/repos/{owner}/{repo}/keys"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner.,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="key_id", param_type=OutputParameterType.INTEGER, is_array=False
            ),  # Key ID.,
            OutputParameter(
                name="key", param_type=OutputParameterType.STRING, is_array=False
            ),  # Key content.,
            OutputParameter(
                name="title", param_type=OutputParameterType.STRING, is_array=False
            ),  # Key title.
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                List_Repository_Deploy_Keys.method,
                List_Repository_Deploy_Keys.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = (
                f"Error running function 'List_Repository_Deploy_Keys': {str(e)}"
            )
            logging.error(error_msg)
            raise ValueError(error_msg)


class Get_List_of_Conflicting_Packages_During_Docker_Migration_for_an_Organization(
    BaseFunction
):
    """"""

    name = (
        "Get List of Conflicting Packages During Docker Migration for an Organization"
    )
    url = "/orgs/{org}/docker/conflicts"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Get_List_of_Conflicting_Packages_During_Docker_Migration_for_an_Organization.method,
                Get_List_of_Conflicting_Packages_During_Docker_Migration_for_an_Organization.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_List_of_Conflicting_Packages_During_Docker_Migration_for_an_Organization': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class List_Packages_for_an_Organization(BaseFunction):
    """"""

    name = "List Packages for an Organization"
    url = "/orgs/{org}/packages"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                List_Packages_for_an_Organization.method,
                List_Packages_for_an_Organization.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = (
                f"Error running function 'List_Packages_for_an_Organization': {str(e)}"
            )
            logging.error(error_msg)
            raise ValueError(error_msg)


class Get_a_Package_for_an_Organization(BaseFunction):
    """"""

    name = "Get a Package for an Organization"
    url = "/orgs/{org}/packages/{package_type}/{package_name}"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Get_a_Package_for_an_Organization.method,
                Get_a_Package_for_an_Organization.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = (
                f"Error running function 'Get_a_Package_for_an_Organization': {str(e)}"
            )
            logging.error(error_msg)
            raise ValueError(error_msg)


class Delete_a_Package_for_an_Organization(BaseFunction):
    """"""

    name = "Delete a Package for an Organization"
    url = "/orgs/{org}/packages/{package_type}/{package_name}"
    args_in_url = True
    method = DELETE

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Delete_a_Package_for_an_Organization.method,
                Delete_a_Package_for_an_Organization.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Delete_a_Package_for_an_Organization': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class List_Package_Versions_for_a_Package_Owned_by_an_Organization(BaseFunction):
    """"""

    name = "List Package Versions for a Package Owned by an Organization"
    url = "/orgs/{org}/packages/{package_type}/{package_name}/versions"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                List_Package_Versions_for_a_Package_Owned_by_an_Organization.method,
                List_Package_Versions_for_a_Package_Owned_by_an_Organization.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'List_Package_Versions_for_a_Package_Owned_by_an_Organization': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Get_a_Package_Version_for_an_Organization(BaseFunction):
    """"""

    name = "Get a Package Version for an Organization"
    url = "/orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Get_a_Package_Version_for_an_Organization.method,
                Get_a_Package_Version_for_an_Organization.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_a_Package_Version_for_an_Organization': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Get_List_of_Conflicting_Packages_During_Docker_Migration_for_the_Authenticated_User(
    BaseFunction
):
    """"""

    name = "Get List of Conflicting Packages During Docker Migration for the Authenticated User"
    url = "/user/docker/conflicts"
    args_in_url = False
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Get_List_of_Conflicting_Packages_During_Docker_Migration_for_the_Authenticated_User.method,
                Get_List_of_Conflicting_Packages_During_Docker_Migration_for_the_Authenticated_User.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_List_of_Conflicting_Packages_During_Docker_Migration_for_the_Authenticated_User': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class List_Packages_for_the_Authenticated_Users_Namespace(BaseFunction):
    """"""

    name = "List Packages for the Authenticated User's Namespace"
    url = "/user/packages"
    args_in_url = False
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                List_Packages_for_the_Authenticated_Users_Namespace.method,
                List_Packages_for_the_Authenticated_Users_Namespace.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'List_Packages_for_the_Authenticated_Users_Namespace': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Get_a_Package_for_the_Authenticated_User(BaseFunction):
    """"""

    name = "Get a Package for the Authenticated User"
    url = "/user/packages/{package_type}/{package_name}"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Get_a_Package_for_the_Authenticated_User.method,
                Get_a_Package_for_the_Authenticated_User.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_a_Package_for_the_Authenticated_User': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Delete_a_Package_for_the_Authenticated_User(BaseFunction):
    """"""

    name = "Delete a Package for the Authenticated User"
    url = "/user/packages/{package_type}/{package_name}"
    args_in_url = True
    method = DELETE

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Delete_a_Package_for_the_Authenticated_User.method,
                Delete_a_Package_for_the_Authenticated_User.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Delete_a_Package_for_the_Authenticated_User': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class List_Package_Versions_for_a_Package_Owned_by_the_Authenticated_User(BaseFunction):
    """"""

    name = "List Package Versions for a Package Owned by the Authenticated User"
    url = "/user/packages/{package_type}/{package_name}/versions"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                List_Package_Versions_for_a_Package_Owned_by_the_Authenticated_User.method,
                List_Package_Versions_for_a_Package_Owned_by_the_Authenticated_User.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'List_Package_Versions_for_a_Package_Owned_by_the_Authenticated_User': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Get_a_Package_Version_for_the_Authenticated_User(BaseFunction):
    """"""

    name = "Get a Package Version for the Authenticated User"
    url = "/user/packages/{package_type}/{package_name}/versions/{package_version_id}"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Get_a_Package_Version_for_the_Authenticated_User.method,
                Get_a_Package_Version_for_the_Authenticated_User.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_a_Package_Version_for_the_Authenticated_User': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Get_List_of_Conflicting_Packages_During_Docker_Migration_for_a_User_by_Username(
    BaseFunction
):
    """"""

    name = "Get List of Conflicting Packages During Docker Migration for a User by Username"
    url = "/users/{username}/docker/conflicts"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Get_List_of_Conflicting_Packages_During_Docker_Migration_for_a_User_by_Username.method,
                Get_List_of_Conflicting_Packages_During_Docker_Migration_for_a_User_by_Username.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_List_of_Conflicting_Packages_During_Docker_Migration_for_a_User_by_Username': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class List_Packages_for_a_User_by_Username(BaseFunction):
    """"""

    name = "List Packages for a User by Username"
    url = "/users/{username}/packages"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                List_Packages_for_a_User_by_Username.method,
                List_Packages_for_a_User_by_Username.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'List_Packages_for_a_User_by_Username': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Get_a_Package_for_a_User_by_Username(BaseFunction):
    """"""

    name = "Get a Package for a User by Username"
    url = "/users/{username}/packages/{package_type}/{package_name}"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Get_a_Package_for_a_User_by_Username.method,
                Get_a_Package_for_a_User_by_Username.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_a_Package_for_a_User_by_Username': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Delete_a_Package_for_a_User_by_Username(BaseFunction):
    """"""

    name = "Delete a Package for a User by Username"
    url = "/users/{username}/packages/{package_type}/{package_name}"
    args_in_url = True
    method = DELETE

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Delete_a_Package_for_a_User_by_Username.method,
                Delete_a_Package_for_a_User_by_Username.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Delete_a_Package_for_a_User_by_Username': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class List_Package_Versions_for_a_Package_Owned_by_a_User_by_Username(BaseFunction):
    """"""

    name = "List Package Versions for a Package Owned by a User by Username"
    url = "/users/{username}/packages/{package_type}/{package_name}/versions"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                List_Package_Versions_for_a_Package_Owned_by_a_User_by_Username.method,
                List_Package_Versions_for_a_Package_Owned_by_a_User_by_Username.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'List_Package_Versions_for_a_Package_Owned_by_a_User_by_Username': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Get_a_Package_Version_for_a_User_by_Username(BaseFunction):
    """"""

    name = "Get a Package Version for a User by Username"
    url = "/users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Get_a_Package_Version_for_a_User_by_Username.method,
                Get_a_Package_Version_for_a_User_by_Username.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_a_Package_Version_for_a_User_by_Username': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Get_GitHub_Pages_Site_for_a_Repository(BaseFunction):
    """"""

    name = "Get GitHub Pages Site for a Repository"
    url = "/repos/{owner}/{repo}/pages"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Get_GitHub_Pages_Site_for_a_Repository.method,
                Get_GitHub_Pages_Site_for_a_Repository.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_GitHub_Pages_Site_for_a_Repository': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Create_a_GitHub_Pages_Site_for_a_Repository(BaseFunction):
    """"""

    name = "Create a GitHub Pages Site for a Repository"
    url = "/repos/{owner}/{repo}/pages"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Create_a_GitHub_Pages_Site_for_a_Repository.method,
                Create_a_GitHub_Pages_Site_for_a_Repository.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Create_a_GitHub_Pages_Site_for_a_Repository': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Update_Information_About_a_GitHub_Pages_Site(BaseFunction):
    """"""

    name = "Update Information About a GitHub Pages Site"
    url = "/repos/{owner}/{repo}/pages"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Update_Information_About_a_GitHub_Pages_Site.method,
                Update_Information_About_a_GitHub_Pages_Site.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Update_Information_About_a_GitHub_Pages_Site': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Delete_a_GitHub_Pages_Site(BaseFunction):
    """"""

    name = "Delete a GitHub Pages Site"
    url = "/repos/{owner}/{repo}/pages"
    args_in_url = True
    method = DELETE

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Delete_a_GitHub_Pages_Site.method,
                Delete_a_GitHub_Pages_Site.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Delete_a_GitHub_Pages_Site': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class List_GitHub_Pages_Builds_for_a_Repository(BaseFunction):
    """"""

    name = "List GitHub Pages Builds for a Repository"
    url = "/repos/{owner}/{repo}/pages/builds"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                List_GitHub_Pages_Builds_for_a_Repository.method,
                List_GitHub_Pages_Builds_for_a_Repository.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'List_GitHub_Pages_Builds_for_a_Repository': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Request_a_GitHub_Pages_Build_for_a_Repository(BaseFunction):
    """"""

    name = "Request a GitHub Pages Build for a Repository"
    url = "/repos/{owner}/{repo}/pages/builds"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Request_a_GitHub_Pages_Build_for_a_Repository.method,
                Request_a_GitHub_Pages_Build_for_a_Repository.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Request_a_GitHub_Pages_Build_for_a_Repository': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Get_the_Latest_GitHub_Pages_Build_for_a_Repository(BaseFunction):
    """"""

    name = "Get the Latest GitHub Pages Build for a Repository"
    url = "/repos/{owner}/{repo}/pages/builds/latest"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Get_the_Latest_GitHub_Pages_Build_for_a_Repository.method,
                Get_the_Latest_GitHub_Pages_Build_for_a_Repository.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_the_Latest_GitHub_Pages_Build_for_a_Repository': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Get_a_GitHub_Pages_Build_by_Build_ID(BaseFunction):
    """"""

    name = "Get a GitHub Pages Build by Build ID"
    url = "/repos/{owner}/{repo}/pages/builds/{build_id}"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Get_a_GitHub_Pages_Build_by_Build_ID.method,
                Get_a_GitHub_Pages_Build_by_Build_ID.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_a_GitHub_Pages_Build_by_Build_ID': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Create_a_GitHub_Pages_Deployment_for_a_Repository(BaseFunction):
    """"""

    name = "Create a GitHub Pages Deployment for a Repository"
    url = "/repos/{owner}/{repo}/pages/deployments"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Create_a_GitHub_Pages_Deployment_for_a_Repository.method,
                Create_a_GitHub_Pages_Deployment_for_a_Repository.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Create_a_GitHub_Pages_Deployment_for_a_Repository': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Get_the_Status_of_a_GitHub_Pages_Deployment(BaseFunction):
    """"""

    name = "Get the Status of a GitHub Pages Deployment"
    url = "/repos/{owner}/{repo}/pages/deployments/{pages_deployment_id}"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Get_the_Status_of_a_GitHub_Pages_Deployment.method,
                Get_the_Status_of_a_GitHub_Pages_Deployment.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_the_Status_of_a_GitHub_Pages_Deployment': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Cancel_a_GitHub_Pages_Deployment(BaseFunction):
    """"""

    name = "Cancel a GitHub Pages Deployment"
    url = "/repos/{owner}/{repo}/pages/deployments/{pages_deployment_id}/cancel"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Cancel_a_GitHub_Pages_Deployment.method,
                Cancel_a_GitHub_Pages_Deployment.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = (
                f"Error running function 'Cancel_a_GitHub_Pages_Deployment': {str(e)}"
            )
            logging.error(error_msg)
            raise ValueError(error_msg)


class Get_DNS_Health_Check_for_GitHub_Pages(BaseFunction):
    """"""

    name = "Get DNS Health Check for GitHub Pages"
    url = "/repos/{owner}/{repo}/pages/health"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Get_DNS_Health_Check_for_GitHub_Pages.method,
                Get_DNS_Health_Check_for_GitHub_Pages.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_DNS_Health_Check_for_GitHub_Pages': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class List_Private_Registries_for_an_Organization(BaseFunction):
    """"""

    name = "List Private Registries for an Organization"
    url = "/orgs/{org}/private-registries"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                List_Private_Registries_for_an_Organization.method,
                List_Private_Registries_for_an_Organization.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'List_Private_Registries_for_an_Organization': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Create_a_Private_Registry_for_an_Organization(BaseFunction):
    """"""

    name = "Create a Private Registry for an Organization"
    url = "/orgs/{org}/private-registries"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Create_a_Private_Registry_for_an_Organization.method,
                Create_a_Private_Registry_for_an_Organization.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Create_a_Private_Registry_for_an_Organization': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Get_Private_Registry_Public_Key_for_an_Organization(BaseFunction):
    """"""

    name = "Get Private Registry Public Key for an Organization"
    url = "/orgs/{org}/private-registries/public-key"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Get_Private_Registry_Public_Key_for_an_Organization.method,
                Get_Private_Registry_Public_Key_for_an_Organization.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_Private_Registry_Public_Key_for_an_Organization': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Get_A_Private_Registry_for_an_Organization(BaseFunction):
    """"""

    name = "Get A Private Registry for an Organization"
    url = "/orgs/{org}/private-registries/{secret_name}"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Get_A_Private_Registry_for_an_Organization.method,
                Get_A_Private_Registry_for_an_Organization.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_A_Private_Registry_for_an_Organization': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Update_a_Private_Registry_for_an_Organization(BaseFunction):
    """"""

    name = "Update a Private Registry for an Organization"
    url = "/orgs/{org}/private-registries/{secret_name}"
    args_in_url = True
    method = DELETE

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Update_a_Private_Registry_for_an_Organization.method,
                Update_a_Private_Registry_for_an_Organization.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Update_a_Private_Registry_for_an_Organization': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Delete_a_Private_Registry_for_an_Organization(BaseFunction):
    """"""

    name = "Delete a Private Registry for an Organization"
    url = "/orgs/{org}/private-registries/{secret_name}"
    args_in_url = True
    method = DELETE

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Delete_a_Private_Registry_for_an_Organization.method,
                Delete_a_Private_Registry_for_an_Organization.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Delete_a_Private_Registry_for_an_Organization': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class List_Organization_Projects(BaseFunction):
    """"""

    name = "List Organization Projects"
    url = "/orgs/{org}/projects"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                List_Organization_Projects.method,
                List_Organization_Projects.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'List_Organization_Projects': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Create_an_Organization_Project(BaseFunction):
    """"""

    name = "Create an Organization Project"
    url = "/orgs/{org}/projects"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Create_an_Organization_Project.method,
                Create_an_Organization_Project.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = (
                f"Error running function 'Create_an_Organization_Project': {str(e)}"
            )
            logging.error(error_msg)
            raise ValueError(error_msg)


class Get_a_Project_Card(BaseFunction):
    """"""

    name = "Get a Project Card"
    url = "/projects/columns/cards/{card_id}"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Get_a_Project_Card.method,
                Get_a_Project_Card.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_a_Project_Card': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Update_an_Existing_Project_Card(BaseFunction):
    """"""

    name = "Update an Existing Project Card"
    url = "/projects/columns/cards/{card_id}"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Update_an_Existing_Project_Card.method,
                Update_an_Existing_Project_Card.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = (
                f"Error running function 'Update_an_Existing_Project_Card': {str(e)}"
            )
            logging.error(error_msg)
            raise ValueError(error_msg)


class Delete_a_Project_Card(BaseFunction):
    """"""

    name = "Delete a Project Card"
    url = "/projects/columns/cards/{card_id}"
    args_in_url = True
    method = DELETE

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Delete_a_Project_Card.method,
                Delete_a_Project_Card.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Delete_a_Project_Card': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Move_a_Project_Card(BaseFunction):
    """"""

    name = "Move a Project Card"
    url = "/projects/columns/cards/{card_id}/moves"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Move_a_Project_Card.method,
                Move_a_Project_Card.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Move_a_Project_Card': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Get_a_Project_Column(BaseFunction):
    """"""

    name = "Get a Project Column"
    url = "/projects/columns/{column_id}"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Get_a_Project_Column.method,
                Get_a_Project_Column.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_a_Project_Column': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Update_an_Existing_Project_Column(BaseFunction):
    """"""

    name = "Update an Existing Project Column"
    url = "/projects/columns/{column_id}"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Update_an_Existing_Project_Column.method,
                Update_an_Existing_Project_Column.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = (
                f"Error running function 'Update_an_Existing_Project_Column': {str(e)}"
            )
            logging.error(error_msg)
            raise ValueError(error_msg)


class Delete_a_Project_Column(BaseFunction):
    """"""

    name = "Delete a Project Column"
    url = "/projects/columns/{column_id}"
    args_in_url = True
    method = DELETE

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Delete_a_Project_Column.method,
                Delete_a_Project_Column.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Delete_a_Project_Column': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class List_Project_Cards_in_a_Column(BaseFunction):
    """"""

    name = "List Project Cards in a Column"
    url = "/projects/columns/{column_id}/cards"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                List_Project_Cards_in_a_Column.method,
                List_Project_Cards_in_a_Column.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = (
                f"Error running function 'List_Project_Cards_in_a_Column': {str(e)}"
            )
            logging.error(error_msg)
            raise ValueError(error_msg)


class Create_a_Project_Card(BaseFunction):
    """"""

    name = "Create a Project Card"
    url = "/projects/columns/{column_id}/cards"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Create_a_Project_Card.method,
                Create_a_Project_Card.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Create_a_Project_Card': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Move_a_Project_Column(BaseFunction):
    """"""

    name = "Move a Project Column"
    url = "/projects/columns/{column_id}/moves"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Move_a_Project_Column.method,
                Move_a_Project_Column.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Move_a_Project_Column': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Get_a_Project(BaseFunction):
    """"""

    name = "Get a Project"
    url = "/projects/{project_id}"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Get_a_Project.method, Get_a_Project.url, input_data.validated_data
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_a_Project': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Update_a_Project(BaseFunction):
    """"""

    name = "Update a Project"
    url = "/projects/{project_id}"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Update_a_Project.method, Update_a_Project.url, input_data.validated_data
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Update_a_Project': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Delete_a_Project(BaseFunction):
    """"""

    name = "Delete a Project"
    url = "/projects/{project_id}"
    args_in_url = True
    method = DELETE

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Delete_a_Project.method, Delete_a_Project.url, input_data.validated_data
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Delete_a_Project': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class List_Project_Collaborators(BaseFunction):
    """"""

    name = "List Project Collaborators"
    url = "/projects/{project_id}/collaborators"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                List_Project_Collaborators.method,
                List_Project_Collaborators.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'List_Project_Collaborators': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Add_a_Project_Collaborator(BaseFunction):
    """"""

    name = "Add a Project Collaborator"
    url = "/projects/{project_id}/collaborators/{username}"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Add_a_Project_Collaborator.method,
                Add_a_Project_Collaborator.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Add_a_Project_Collaborator': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Remove_a_Project_Collaborator(BaseFunction):
    """"""

    name = "Remove a Project Collaborator"
    url = "/projects/{project_id}/collaborators/{username}"
    args_in_url = True
    method = DELETE

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Remove_a_Project_Collaborator.method,
                Remove_a_Project_Collaborator.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = (
                f"Error running function 'Remove_a_Project_Collaborator': {str(e)}"
            )
            logging.error(error_msg)
            raise ValueError(error_msg)


class Get_Project_Permission_for_a_User(BaseFunction):
    """"""

    name = "Get Project Permission for a User"
    url = "/projects/{project_id}/collaborators/{username}/permission"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Get_Project_Permission_for_a_User.method,
                Get_Project_Permission_for_a_User.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = (
                f"Error running function 'Get_Project_Permission_for_a_User': {str(e)}"
            )
            logging.error(error_msg)
            raise ValueError(error_msg)


class List_Project_Columns(BaseFunction):
    """"""

    name = "List Project Columns"
    url = "/projects/{project_id}/columns"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                List_Project_Columns.method,
                List_Project_Columns.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'List_Project_Columns': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Create_a_Project_Column(BaseFunction):
    """"""

    name = "Create a Project Column"
    url = "/projects/{project_id}/columns"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Create_a_Project_Column.method,
                Create_a_Project_Column.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Create_a_Project_Column': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class List_Repository_Projects(BaseFunction):
    """"""

    name = "List Repository Projects"
    url = "/repos/{owner}/{repo}/projects"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                List_Repository_Projects.method,
                List_Repository_Projects.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'List_Repository_Projects': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Create_a_Repository_Project(BaseFunction):
    """"""

    name = "Create a Repository Project"
    url = "/repos/{owner}/{repo}/projects"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Create_a_Repository_Project.method,
                Create_a_Repository_Project.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = (
                f"Error running function 'Create_a_Repository_Project': {str(e)}"
            )
            logging.error(error_msg)
            raise ValueError(error_msg)


class List_Pull_Requests_in_a_Repository(BaseFunction):
    """"""

    name = "List Pull Requests in a Repository"
    url = "/repos/{owner}/{repo}/pulls"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                List_Pull_Requests_in_a_Repository.method,
                List_Pull_Requests_in_a_Repository.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = (
                f"Error running function 'List_Pull_Requests_in_a_Repository': {str(e)}"
            )
            logging.error(error_msg)
            raise ValueError(error_msg)


class Create_a_Pull_Request(BaseFunction):
    """"""

    name = "Create a Pull Request"
    url = "/repos/{owner}/{repo}/pulls"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Create_a_Pull_Request.method,
                Create_a_Pull_Request.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Create_a_Pull_Request': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class List_Review_Comments_in_a_Repositorys_Pull_Requests(BaseFunction):
    """"""

    name = "List Review Comments in a Repository's Pull Requests"
    url = "/repos/{owner}/{repo}/pulls/comments"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                List_Review_Comments_in_a_Repositorys_Pull_Requests.method,
                List_Review_Comments_in_a_Repositorys_Pull_Requests.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'List_Review_Comments_in_a_Repositorys_Pull_Requests': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Get_a_Review_Comment_for_a_Pull_Request(BaseFunction):
    """"""

    name = "Get a Review Comment for a Pull Request"
    url = "/repos/{owner}/{repo}/pulls/comments/{comment_id}"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Get_a_Review_Comment_for_a_Pull_Request.method,
                Get_a_Review_Comment_for_a_Pull_Request.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_a_Review_Comment_for_a_Pull_Request': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Update_a_Review_Comment_for_a_Pull_Request(BaseFunction):
    """"""

    name = "Update a Review Comment for a Pull Request"
    url = "/repos/{owner}/{repo}/pulls/comments/{comment_id}"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Update_a_Review_Comment_for_a_Pull_Request.method,
                Update_a_Review_Comment_for_a_Pull_Request.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Update_a_Review_Comment_for_a_Pull_Request': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Delete_a_Review_Comment_for_a_Pull_Request(BaseFunction):
    """"""

    name = "Delete a Review Comment for a Pull Request"
    url = "/repos/{owner}/{repo}/pulls/comments/{comment_id}"
    args_in_url = True
    method = DELETE

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Delete_a_Review_Comment_for_a_Pull_Request.method,
                Delete_a_Review_Comment_for_a_Pull_Request.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Delete_a_Review_Comment_for_a_Pull_Request': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Get_a_Pull_Request(BaseFunction):
    """"""

    name = "Get a Pull Request"
    url = "/repos/{owner}/{repo}/pulls/{pull_number}"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Get_a_Pull_Request.method,
                Get_a_Pull_Request.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_a_Pull_Request': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Update_a_Pull_Request(BaseFunction):
    """"""

    name = "Update a Pull Request"
    url = "/repos/{owner}/{repo}/pulls/{pull_number}"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Update_a_Pull_Request.method,
                Update_a_Pull_Request.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Update_a_Pull_Request': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class List_Review_Comments_on_a_Pull_Request(BaseFunction):
    """"""

    name = "List Review Comments on a Pull Request"
    url = "/repos/{owner}/{repo}/pulls/{pull_number}/comments"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                List_Review_Comments_on_a_Pull_Request.method,
                List_Review_Comments_on_a_Pull_Request.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'List_Review_Comments_on_a_Pull_Request': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Create_a_Review_Comment_for_a_Pull_Request(BaseFunction):
    """"""

    name = "Create a Review Comment for a Pull Request"
    url = "/repos/{owner}/{repo}/pulls/{pull_number}/comments"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Create_a_Review_Comment_for_a_Pull_Request.method,
                Create_a_Review_Comment_for_a_Pull_Request.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Create_a_Review_Comment_for_a_Pull_Request': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Create_a_Reply_for_a_Review_Comment(BaseFunction):
    """"""

    name = "Create a Reply for a Review Comment"
    url = "/repos/{owner}/{repo}/pulls/{pull_number}/comments/{comment_id}/replies"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Create_a_Reply_for_a_Review_Comment.method,
                Create_a_Reply_for_a_Review_Comment.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Create_a_Reply_for_a_Review_Comment': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class List_Commits_on_a_Pull_Request(BaseFunction):
    """"""

    name = "List Commits on a Pull Request"
    url = "/repos/{owner}/{repo}/pulls/{pull_number}/commits"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                List_Commits_on_a_Pull_Request.method,
                List_Commits_on_a_Pull_Request.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = (
                f"Error running function 'List_Commits_on_a_Pull_Request': {str(e)}"
            )
            logging.error(error_msg)
            raise ValueError(error_msg)


class List_Files_in_a_Pull_Request(BaseFunction):
    """"""

    name = "List Files in a Pull Request"
    url = "/repos/{owner}/{repo}/pulls/{pull_number}/files"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                List_Files_in_a_Pull_Request.method,
                List_Files_in_a_Pull_Request.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = (
                f"Error running function 'List_Files_in_a_Pull_Request': {str(e)}"
            )
            logging.error(error_msg)
            raise ValueError(error_msg)


class Check_if_a_Pull_Request_Has_Been_Merged(BaseFunction):
    """"""

    name = "Check if a Pull Request Has Been Merged"
    url = "/repos/{owner}/{repo}/pulls/{pull_number}/merge"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Check_if_a_Pull_Request_Has_Been_Merged.method,
                Check_if_a_Pull_Request_Has_Been_Merged.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Check_if_a_Pull_Request_Has_Been_Merged': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Merge_a_Pull_Request(BaseFunction):
    """"""

    name = "Merge a Pull Request"
    url = "/repos/{owner}/{repo}/pulls/{pull_number}/merge"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Merge_a_Pull_Request.method,
                Merge_a_Pull_Request.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Merge_a_Pull_Request': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Get_All_Requested_Reviewers_for_a_Pull_Request(BaseFunction):
    """"""

    name = "Get All Requested Reviewers for a Pull Request"
    url = "/repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Get_All_Requested_Reviewers_for_a_Pull_Request.method,
                Get_All_Requested_Reviewers_for_a_Pull_Request.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_All_Requested_Reviewers_for_a_Pull_Request': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Request_Reviewers_for_a_Pull_Request(BaseFunction):
    """"""

    name = "Request Reviewers for a Pull Request"
    url = "/repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Request_Reviewers_for_a_Pull_Request.method,
                Request_Reviewers_for_a_Pull_Request.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Request_Reviewers_for_a_Pull_Request': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Remove_Requested_Reviewers_from_a_Pull_Request(BaseFunction):
    """"""

    name = "Remove Requested Reviewers from a Pull Request"
    url = "/repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers"
    args_in_url = True
    method = DELETE

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Remove_Requested_Reviewers_from_a_Pull_Request.method,
                Remove_Requested_Reviewers_from_a_Pull_Request.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Remove_Requested_Reviewers_from_a_Pull_Request': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class List_Reviews_for_a_Pull_Request(BaseFunction):
    """"""

    name = "List Reviews for a Pull Request"
    url = "/repos/{owner}/{repo}/pulls/{pull_number}/reviews"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                List_Reviews_for_a_Pull_Request.method,
                List_Reviews_for_a_Pull_Request.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = (
                f"Error running function 'List_Reviews_for_a_Pull_Request': {str(e)}"
            )
            logging.error(error_msg)
            raise ValueError(error_msg)


class Create_a_Review_for_a_Pull_Request(BaseFunction):
    """"""

    name = "Create a Review for a Pull Request"
    url = "/repos/{owner}/{repo}/pulls/{pull_number}/reviews"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Create_a_Review_for_a_Pull_Request.method,
                Create_a_Review_for_a_Pull_Request.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = (
                f"Error running function 'Create_a_Review_for_a_Pull_Request': {str(e)}"
            )
            logging.error(error_msg)
            raise ValueError(error_msg)


class Get_a_Review_for_a_Pull_Request(BaseFunction):
    """"""

    name = "Get a Review for a Pull Request"
    url = "/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Get_a_Review_for_a_Pull_Request.method,
                Get_a_Review_for_a_Pull_Request.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = (
                f"Error running function 'Get_a_Review_for_a_Pull_Request': {str(e)}"
            )
            logging.error(error_msg)
            raise ValueError(error_msg)


class Update_a_Review_for_a_Pull_Request(BaseFunction):
    """"""

    name = "Update a Review for a Pull Request"
    url = "/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Update_a_Review_for_a_Pull_Request.method,
                Update_a_Review_for_a_Pull_Request.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = (
                f"Error running function 'Update_a_Review_for_a_Pull_Request': {str(e)}"
            )
            logging.error(error_msg)
            raise ValueError(error_msg)


class Delete_a_Pending_Review_for_a_Pull_Request(BaseFunction):
    """"""

    name = "Delete a Pending Review for a Pull Request"
    url = "/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}"
    args_in_url = True
    method = DELETE

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Delete_a_Pending_Review_for_a_Pull_Request.method,
                Delete_a_Pending_Review_for_a_Pull_Request.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Delete_a_Pending_Review_for_a_Pull_Request': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class List_Comments_for_a_Pull_Request_Review(BaseFunction):
    """"""

    name = "List Comments for a Pull Request Review"
    url = "/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/comments"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                List_Comments_for_a_Pull_Request_Review.method,
                List_Comments_for_a_Pull_Request_Review.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'List_Comments_for_a_Pull_Request_Review': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Dismiss_a_Review_for_a_Pull_Request(BaseFunction):
    """"""

    name = "Dismiss a Review for a Pull Request"
    url = "/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/dismissals"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Dismiss_a_Review_for_a_Pull_Request.method,
                Dismiss_a_Review_for_a_Pull_Request.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Dismiss_a_Review_for_a_Pull_Request': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Submit_a_Review_for_a_Pull_Request(BaseFunction):
    """"""

    name = "Submit a Review for a Pull Request"
    url = "/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/events"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Submit_a_Review_for_a_Pull_Request.method,
                Submit_a_Review_for_a_Pull_Request.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = (
                f"Error running function 'Submit_a_Review_for_a_Pull_Request': {str(e)}"
            )
            logging.error(error_msg)
            raise ValueError(error_msg)


class Update_a_Pull_Requests_Branch(BaseFunction):
    """"""

    name = "Update a Pull Request's Branch"
    url = "/repos/{owner}/{repo}/pulls/{pull_number}/update-branch"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Update_a_Pull_Requests_Branch.method,
                Update_a_Pull_Requests_Branch.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = (
                f"Error running function 'Update_a_Pull_Requests_Branch': {str(e)}"
            )
            logging.error(error_msg)
            raise ValueError(error_msg)


class Get_Rate_Limit_Status_for_the_Authenticated_User(BaseFunction):
    """"""

    name = "Get Rate Limit Status for the Authenticated User"
    url = "/rate_limit"
    args_in_url = False
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Get_Rate_Limit_Status_for_the_Authenticated_User.method,
                Get_Rate_Limit_Status_for_the_Authenticated_User.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_Rate_Limit_Status_for_the_Authenticated_User': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Delete_Reactions_from_a_Team_Discussion_Comment(BaseFunction):
    """"""

    name = "Delete Reactions from a Team Discussion Comment"
    url = "/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions/{reaction_id}"
    args_in_url = True
    method = DELETE

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Delete_Reactions_from_a_Team_Discussion_Comment.method,
                Delete_Reactions_from_a_Team_Discussion_Comment.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Delete_Reactions_from_a_Team_Discussion_Comment': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Delete_Reactions_from_a_Team_Discussion(BaseFunction):
    """"""

    name = "Delete Reactions from a Team Discussion"
    url = "/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions/{reaction_id}"
    args_in_url = True
    method = DELETE

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Delete_Reactions_from_a_Team_Discussion.method,
                Delete_Reactions_from_a_Team_Discussion.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Delete_Reactions_from_a_Team_Discussion': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class List_Reactions_for_a_Commit_Comment(BaseFunction):
    """"""

    name = "List Reactions for a Commit Comment"
    url = "/repos/{owner}/{repo}/comments/{comment_id}/reactions"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                List_Reactions_for_a_Commit_Comment.method,
                List_Reactions_for_a_Commit_Comment.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'List_Reactions_for_a_Commit_Comment': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Create_a_Reaction_for_a_Commit_Comment(BaseFunction):
    """"""

    name = "Create a Reaction for a Commit Comment"
    url = "/repos/{owner}/{repo}/comments/{comment_id}/reactions"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Create_a_Reaction_for_a_Commit_Comment.method,
                Create_a_Reaction_for_a_Commit_Comment.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Create_a_Reaction_for_a_Commit_Comment': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Delete_a_Reaction_for_a_Commit_Comment(BaseFunction):
    """"""

    name = "Delete a Reaction for a Commit Comment"
    url = "/repos/{owner}/{repo}/comments/{comment_id}/reactions/{reaction_id}"
    args_in_url = True
    method = DELETE

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Delete_a_Reaction_for_a_Commit_Comment.method,
                Delete_a_Reaction_for_a_Commit_Comment.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Delete_a_Reaction_for_a_Commit_Comment': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class List_Reactions_for_an_Issue_Comment(BaseFunction):
    """"""

    name = "List Reactions for an Issue Comment"
    url = "/repos/{owner}/{repo}/issues/comments/{comment_id}/reactions"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                List_Reactions_for_an_Issue_Comment.method,
                List_Reactions_for_an_Issue_Comment.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'List_Reactions_for_an_Issue_Comment': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Create_a_Reaction_for_an_Issue_Comment(BaseFunction):
    """"""

    name = "Create a Reaction for an Issue Comment"
    url = "/repos/{owner}/{repo}/issues/comments/{comment_id}/reactions"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Create_a_Reaction_for_an_Issue_Comment.method,
                Create_a_Reaction_for_an_Issue_Comment.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Create_a_Reaction_for_an_Issue_Comment': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Delete_a_Reaction_for_an_Issue_Comment(BaseFunction):
    """"""

    name = "Delete a Reaction for an Issue Comment"
    url = "/repos/{owner}/{repo}/issues/comments/{comment_id}/reactions/{reaction_id}"
    args_in_url = True
    method = DELETE

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Delete_a_Reaction_for_an_Issue_Comment.method,
                Delete_a_Reaction_for_an_Issue_Comment.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Delete_a_Reaction_for_an_Issue_Comment': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class List_Reactions_for_an_Issue(BaseFunction):
    """"""

    name = "List Reactions for an Issue"
    url = "/repos/{owner}/{repo}/issues/{issue_number}/reactions"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                List_Reactions_for_an_Issue.method,
                List_Reactions_for_an_Issue.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = (
                f"Error running function 'List_Reactions_for_an_Issue': {str(e)}"
            )
            logging.error(error_msg)
            raise ValueError(error_msg)


class Create_a_Reaction_for_an_Issue(BaseFunction):
    """"""

    name = "Create a Reaction for an Issue"
    url = "/repos/{owner}/{repo}/issues/{issue_number}/reactions"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Create_a_Reaction_for_an_Issue.method,
                Create_a_Reaction_for_an_Issue.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = (
                f"Error running function 'Create_a_Reaction_for_an_Issue': {str(e)}"
            )
            logging.error(error_msg)
            raise ValueError(error_msg)


class Delete_a_Reaction_for_an_Issue(BaseFunction):
    """"""

    name = "Delete a Reaction for an Issue"
    url = "/repos/{owner}/{repo}/issues/{issue_number}/reactions/{reaction_id}"
    args_in_url = True
    method = DELETE

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Delete_a_Reaction_for_an_Issue.method,
                Delete_a_Reaction_for_an_Issue.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = (
                f"Error running function 'Delete_a_Reaction_for_an_Issue': {str(e)}"
            )
            logging.error(error_msg)
            raise ValueError(error_msg)


class List_Reactions_for_a_Pull_Request_Review_Comment(BaseFunction):
    """"""

    name = "List Reactions for a Pull Request Review Comment"
    url = "/repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                List_Reactions_for_a_Pull_Request_Review_Comment.method,
                List_Reactions_for_a_Pull_Request_Review_Comment.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'List_Reactions_for_a_Pull_Request_Review_Comment': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Create_a_Reaction_for_a_Pull_Request_Review_Comment(BaseFunction):
    """"""

    name = "Create a Reaction for a Pull Request Review Comment"
    url = "/repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Create_a_Reaction_for_a_Pull_Request_Review_Comment.method,
                Create_a_Reaction_for_a_Pull_Request_Review_Comment.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Create_a_Reaction_for_a_Pull_Request_Review_Comment': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Delete_a_Reaction_for_a_Pull_Request_Review_Comment(BaseFunction):
    """"""

    name = "Delete a Reaction for a Pull Request Review Comment"
    url = "/repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions/{reaction_id}"
    args_in_url = True
    method = DELETE

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Delete_a_Reaction_for_a_Pull_Request_Review_Comment.method,
                Delete_a_Reaction_for_a_Pull_Request_Review_Comment.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Delete_a_Reaction_for_a_Pull_Request_Review_Comment': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class List_Reactions_for_a_Release(BaseFunction):
    """"""

    name = "List Reactions for a Release"
    url = "/repos/{owner}/{repo}/releases/{release_id}/reactions"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                List_Reactions_for_a_Release.method,
                List_Reactions_for_a_Release.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = (
                f"Error running function 'List_Reactions_for_a_Release': {str(e)}"
            )
            logging.error(error_msg)
            raise ValueError(error_msg)


class Create_a_Reaction_for_a_Release(BaseFunction):
    """"""

    name = "Create a Reaction for a Release"
    url = "/repos/{owner}/{repo}/reactions/{release_id}"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Create_a_Reaction_for_a_Release.method,
                Create_a_Reaction_for_a_Release.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = (
                f"Error running function 'Create_a_Reaction_for_a_Release': {str(e)}"
            )
            logging.error(error_msg)
            raise ValueError(error_msg)


class Delete_a_Reaction_for_a_Release(BaseFunction):
    """"""

    name = "Delete a Reaction for a Release"
    url = "/repos/{owner}/{repo}/reactions/{release_id}"
    args_in_url = True
    method = DELETE

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Delete_a_Reaction_for_a_Release.method,
                Delete_a_Reaction_for_a_Release.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = (
                f"Error running function 'Delete_a_Reaction_for_a_Release': {str(e)}"
            )
            logging.error(error_msg)
            raise ValueError(error_msg)


class List_Repository_Releases(BaseFunction):
    """"""

    name = "List Repository Releases"
    url = "/repos/{owner}/{repo}/releases"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                List_Repository_Releases.method,
                List_Repository_Releases.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'List_Repository_Releases': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Create_a_Release(BaseFunction):
    """"""

    name = "Create a Release"
    url = "/repos/{owner}/{repo}/releases"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Create_a_Release.method, Create_a_Release.url, input_data.validated_data
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Create_a_Release': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Get_a_Release_Asset(BaseFunction):
    """"""

    name = "Get a Release Asset"
    url = "/repos/{owner}/{repo}/releases/assets/{asset_id}"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Get_a_Release_Asset.method,
                Get_a_Release_Asset.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_a_Release_Asset': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Update_a_Release_Asset(BaseFunction):
    """"""

    name = "Update a Release Asset"
    url = "/repos/{owner}/{repo}/releases/assets/{asset_id}"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Update_a_Release_Asset.method,
                Update_a_Release_Asset.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Update_a_Release_Asset': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Delete_a_Release_Asset(BaseFunction):
    """"""

    name = "Delete a Release Asset"
    url = "/repos/{owner}/{repo}/releases/assets/{asset_id}"
    args_in_url = True
    method = DELETE

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Delete_a_Release_Asset.method,
                Delete_a_Release_Asset.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Delete_a_Release_Asset': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Generate_Release_Notes_Content_for_a_Release(BaseFunction):
    """"""

    name = "Generate Release Notes Content for a Release"
    url = "/repos/{owner}/{repo}/releases/generate-notes"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Generate_Release_Notes_Content_for_a_Release.method,
                Generate_Release_Notes_Content_for_a_Release.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Generate_Release_Notes_Content_for_a_Release': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Get_the_Latest_Release(BaseFunction):
    """"""

    name = "Get the Latest Release"
    url = "/repos/{owner}/{repo}/releases/latest"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Get_the_Latest_Release.method,
                Get_the_Latest_Release.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_the_Latest_Release': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Get_a_Release_by_Tag_Name(BaseFunction):
    """"""

    name = "Get a Release by Tag Name"
    url = "/repos/{owner}/{repo}/releases/tags/{tag}"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Get_a_Release_by_Tag_Name.method,
                Get_a_Release_by_Tag_Name.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_a_Release_by_Tag_Name': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Get_a_Release_by_ID(BaseFunction):
    """"""

    name = "Get a Release by ID"
    url = "/repos/{owner}/{repo}/releases/{release_id}"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Get_a_Release_by_ID.method,
                Get_a_Release_by_ID.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_a_Release_by_ID': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Update_a_Release(BaseFunction):
    """"""

    name = "Update a Release"
    url = "/repos/{owner}/{repo}/releases/{release_id}"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Update_a_Release.method, Update_a_Release.url, input_data.validated_data
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Update_a_Release': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Delete_a_Release(BaseFunction):
    """"""

    name = "Delete a Release"
    url = "/repos/{owner}/{repo}/releases/{release_id}"
    args_in_url = True
    method = DELETE

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Delete_a_Release.method, Delete_a_Release.url, input_data.validated_data
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Delete_a_Release': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class List_Release_Assets(BaseFunction):
    """"""

    name = "List Release Assets"
    url = "/repos/{owner}/{repo}/releases/{release_id}/assets"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                List_Release_Assets.method,
                List_Release_Assets.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'List_Release_Assets': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class List_Organization_Repositories(BaseFunction):
    """"""

    name = "List Organization Repositories"
    url = "/orgs/{org}/repos"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                List_Organization_Repositories.method,
                List_Organization_Repositories.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = (
                f"Error running function 'List_Organization_Repositories': {str(e)}"
            )
            logging.error(error_msg)
            raise ValueError(error_msg)


class Create_an_Organization_Repository(BaseFunction):
    """"""

    name = "Create an Organization Repository"
    url = "/orgs/{org}/repos"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Create_an_Organization_Repository.method,
                Create_an_Organization_Repository.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = (
                f"Error running function 'Create_an_Organization_Repository': {str(e)}"
            )
            logging.error(error_msg)
            raise ValueError(error_msg)


class Get_a_Repository(BaseFunction):
    """"""

    name = "Get a Repository"
    url = "/repos/{owner}/{repo}"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Get_a_Repository.method, Get_a_Repository.url, input_data.validated_data
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_a_Repository': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Update_a_Repository(BaseFunction):
    """"""

    name = "Update a Repository"
    url = "/repos/{owner}/{repo}"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Update_a_Repository.method,
                Update_a_Repository.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Update_a_Repository': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Delete_a_Repository(BaseFunction):
    """"""

    name = "Delete a Repository"
    url = "/repos/{owner}/{repo}"
    args_in_url = True
    method = DELETE

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Delete_a_Repository.method,
                Delete_a_Repository.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Delete_a_Repository': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class List_Repository_Activities(BaseFunction):
    """"""

    name = "List Repository Activities"
    url = "/repos/{owner}/{repo}/activity"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                List_Repository_Activities.method,
                List_Repository_Activities.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'List_Repository_Activities': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Create_an_Attestation(BaseFunction):
    """"""

    name = "Create an Attestation"
    url = "/repos/{owner}/{repo}/attestations"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Create_an_Attestation.method,
                Create_an_Attestation.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Create_an_Attestation': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class List_Attestations_by_Subject_Digest(BaseFunction):
    """"""

    name = "List Attestations by Subject Digest"
    url = "/repos/{owner}/{repo}/attestations/{subject_digest}"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                List_Attestations_by_Subject_Digest.method,
                List_Attestations_by_Subject_Digest.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'List_Attestations_by_Subject_Digest': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Get_All_Autolinks_of_a_Repository(BaseFunction):
    """"""

    name = "Get All Autolinks of a Repository"
    url = "/repos/{owner}/{repo}/autolinks"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Get_All_Autolinks_of_a_Repository.method,
                Get_All_Autolinks_of_a_Repository.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = (
                f"Error running function 'Get_All_Autolinks_of_a_Repository': {str(e)}"
            )
            logging.error(error_msg)
            raise ValueError(error_msg)


class Create_an_Autolink_Reference_for_a_Repository(BaseFunction):
    """"""

    name = "Create an Autolink Reference for a Repository"
    url = "/repos/{owner}/{repo}/autolinks"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Create_an_Autolink_Reference_for_a_Repository.method,
                Create_an_Autolink_Reference_for_a_Repository.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Create_an_Autolink_Reference_for_a_Repository': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Get_an_Autolink_Reference_of_a_Repository(BaseFunction):
    """"""

    name = "Get an Autolink Reference of a Repository"
    url = "/repos/{owner}/{repo}/autolinks/{autolink_id}"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Get_an_Autolink_Reference_of_a_Repository.method,
                Get_an_Autolink_Reference_of_a_Repository.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_an_Autolink_Reference_of_a_Repository': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Delete_an_Autolink_Reference_from_a_Repository(BaseFunction):
    """"""

    name = "Delete an Autolink Reference from a Repository"
    url = "/repos/{owner}/{repo}/autolinks/{autolink_id}"
    args_in_url = True
    method = DELETE

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Delete_an_Autolink_Reference_from_a_Repository.method,
                Delete_an_Autolink_Reference_from_a_Repository.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Delete_an_Autolink_Reference_from_a_Repository': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Check_if_Dependabot_Security_Updates_Are_Enabled_for_a_Repository(BaseFunction):
    """"""

    name = "Check if Dependabot Security Updates Are Enabled for a Repository"
    url = "/repos/{owner}/{repo}/automated-security-fixes"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Check_if_Dependabot_Security_Updates_Are_Enabled_for_a_Repository.method,
                Check_if_Dependabot_Security_Updates_Are_Enabled_for_a_Repository.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Check_if_Dependabot_Security_Updates_Are_Enabled_for_a_Repository': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Enable_Dependabot_Security_Updates_for_a_Repository(BaseFunction):
    """"""

    name = "Enable Dependabot Security Updates for a Repository"
    url = "/repos/{owner}/{repo}/automated-security-fixes"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Enable_Dependabot_Security_Updates_for_a_Repository.method,
                Enable_Dependabot_Security_Updates_for_a_Repository.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Enable_Dependabot_Security_Updates_for_a_Repository': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Disable_Dependabot_Security_Updates_for_a_Repository(BaseFunction):
    """"""

    name = "Disable Dependabot Security Updates for a Repository"
    url = "/repos/{owner}/{repo}/automated-security-fixes"
    args_in_url = True
    method = DELETE

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Disable_Dependabot_Security_Updates_for_a_Repository.method,
                Disable_Dependabot_Security_Updates_for_a_Repository.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Disable_Dependabot_Security_Updates_for_a_Repository': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class List_Codeowners_Errors_in_a_Repository(BaseFunction):
    """"""

    name = "List Codeowners Errors in a Repository"
    url = "/repos/{owner}/{repo}/codeowners/errors"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                List_Codeowners_Errors_in_a_Repository.method,
                List_Codeowners_Errors_in_a_Repository.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'List_Codeowners_Errors_in_a_Repository': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Get_Repository_Content(BaseFunction):
    """"""

    name = "Get Repository Content"
    url = "/repos/{owner}/{repo}/contents/{path}"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Get_Repository_Content.method,
                Get_Repository_Content.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_Repository_Content': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Create_or_Update_File_Contents_in_a_Repository(BaseFunction):
    """"""

    name = "Create or Update File Contents in a Repository"
    url = "/repos/{owner}/{repo}/contents/{path}"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Create_or_Update_File_Contents_in_a_Repository.method,
                Create_or_Update_File_Contents_in_a_Repository.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Create_or_Update_File_Contents_in_a_Repository': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Delete_a_File_in_a_Repository(BaseFunction):
    """"""

    name = "Delete a File in a Repository"
    url = "/repos/{owner}/{repo}/contents/{path}"
    args_in_url = True
    method = DELETE

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Delete_a_File_in_a_Repository.method,
                Delete_a_File_in_a_Repository.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = (
                f"Error running function 'Delete_a_File_in_a_Repository': {str(e)}"
            )
            logging.error(error_msg)
            raise ValueError(error_msg)


class List_Repository_Contributors(BaseFunction):
    """"""

    name = "List Repository Contributors"
    url = "/repos/{owner}/{repo}/contributors"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                List_Repository_Contributors.method,
                List_Repository_Contributors.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = (
                f"Error running function 'List_Repository_Contributors': {str(e)}"
            )
            logging.error(error_msg)
            raise ValueError(error_msg)


class Create_a_Repository_Dispatch_Event(BaseFunction):
    """"""

    name = "Create a Repository Dispatch Event"
    url = "/repos/{owner}/{repo}/dispatches"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Create_a_Repository_Dispatch_Event.method,
                Create_a_Repository_Dispatch_Event.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = (
                f"Error running function 'Create_a_Repository_Dispatch_Event': {str(e)}"
            )
            logging.error(error_msg)
            raise ValueError(error_msg)


class List_Repository_Forks(BaseFunction):
    """"""

    name = "List Repository Forks"
    url = "/repos/{owner}/{repo}/forks"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                List_Repository_Forks.method,
                List_Repository_Forks.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'List_Repository_Forks': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Create_a_Fork_of_a_Repository(BaseFunction):
    """"""

    name = "Create a Fork of a Repository"
    url = "/repos/{owner}/{repo}/forks"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Create_a_Fork_of_a_Repository.method,
                Create_a_Fork_of_a_Repository.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = (
                f"Error running function 'Create_a_Fork_of_a_Repository': {str(e)}"
            )
            logging.error(error_msg)
            raise ValueError(error_msg)


class List_Repository_Webhooks(BaseFunction):
    """"""

    name = "List Repository Webhooks"
    url = "/repos/{owner}/{repo}/hooks"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                List_Repository_Webhooks.method,
                List_Repository_Webhooks.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'List_Repository_Webhooks': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Create_a_Repository_Webhook(BaseFunction):
    """"""

    name = "Create a Repository Webhook"
    url = "/repos/{owner}/{repo}/hooks"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Create_a_Repository_Webhook.method,
                Create_a_Repository_Webhook.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = (
                f"Error running function 'Create_a_Repository_Webhook': {str(e)}"
            )
            logging.error(error_msg)
            raise ValueError(error_msg)


class Get_a_Repository_Webhook(BaseFunction):
    """"""

    name = "Get a Repository Webhook"
    url = "/repos/{owner}/{repo}/hooks/{hook_id}"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Get_a_Repository_Webhook.method,
                Get_a_Repository_Webhook.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_a_Repository_Webhook': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Update_a_Repository_Webhook(BaseFunction):
    """"""

    name = "Update a Repository Webhook"
    url = "/repos/{owner}/{repo}/hooks/{hook_id}"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Update_a_Repository_Webhook.method,
                Update_a_Repository_Webhook.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = (
                f"Error running function 'Update_a_Repository_Webhook': {str(e)}"
            )
            logging.error(error_msg)
            raise ValueError(error_msg)


class Delete_a_Repository_Webhook(BaseFunction):
    """"""

    name = "Delete a Repository Webhook"
    url = "/repos/{owner}/{repo}/hooks/{hook_id}"
    args_in_url = True
    method = DELETE

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Delete_a_Repository_Webhook.method,
                Delete_a_Repository_Webhook.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = (
                f"Error running function 'Delete_a_Repository_Webhook': {str(e)}"
            )
            logging.error(error_msg)
            raise ValueError(error_msg)


class Get_Webhook_Configuration_for_a_Repository(BaseFunction):
    """"""

    name = "Get Webhook Configuration for a Repository"
    url = "/repos/{owner}/{repo}/hooks/{hook_id}/config"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Get_Webhook_Configuration_for_a_Repository.method,
                Get_Webhook_Configuration_for_a_Repository.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_Webhook_Configuration_for_a_Repository': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Update_Webhook_Configuration_for_a_Repository(BaseFunction):
    """"""

    name = "Update Webhook Configuration for a Repository"
    url = "/repos/{owner}/{repo}/hooks/{hook_id}/config"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Update_Webhook_Configuration_for_a_Repository.method,
                Update_Webhook_Configuration_for_a_Repository.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Update_Webhook_Configuration_for_a_Repository': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class List_Deliveries_for_a_Repository_Webhook(BaseFunction):
    """"""

    name = "List Deliveries for a Repository Webhook"
    url = "/repos/{owner}/{repo}/hooks/{hook_id}/deliveries"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                List_Deliveries_for_a_Repository_Webhook.method,
                List_Deliveries_for_a_Repository_Webhook.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'List_Deliveries_for_a_Repository_Webhook': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Get_a_Delivery_for_a_Repository_Webhook(BaseFunction):
    """"""

    name = "Get a Delivery for a Repository Webhook"
    url = "/repos/{owner}/{repo}/hooks/{hook_id}/deliveries/{delivery_id}"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Get_a_Delivery_for_a_Repository_Webhook.method,
                Get_a_Delivery_for_a_Repository_Webhook.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_a_Delivery_for_a_Repository_Webhook': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Redeliver_a_Delivery_for_a_Repository_Webhook(BaseFunction):
    """"""

    name = "Redeliver a Delivery for a Repository Webhook"
    url = "/repos/{owner}/{repo}/hooks/{hook_id}/deliveries/{delivery_id}/attempts"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Redeliver_a_Delivery_for_a_Repository_Webhook.method,
                Redeliver_a_Delivery_for_a_Repository_Webhook.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Redeliver_a_Delivery_for_a_Repository_Webhook': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Ping_a_Repository_Webhook(BaseFunction):
    """"""

    name = "Ping a Repository Webhook"
    url = "/repos/{owner}/{repo}/hooks/{hook_id}/pings"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Ping_a_Repository_Webhook.method,
                Ping_a_Repository_Webhook.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Ping_a_Repository_Webhook': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Test_a_Repository_Webhook(BaseFunction):
    """"""

    name = "Test a Repository Webhook"
    url = "/repos/{owner}/{repo}/hooks/{hook_id}/tests"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Test_a_Repository_Webhook.method,
                Test_a_Repository_Webhook.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Test_a_Repository_Webhook': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class List_Repository_Languages(BaseFunction):
    """"""

    name = "List Repository Languages"
    url = "/repos/{owner}/{repo}/languages"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                List_Repository_Languages.method,
                List_Repository_Languages.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'List_Repository_Languages': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Check_if_Private_Vulnerability_Reporting_is_Enabled_for_a_Repository(
    BaseFunction
):
    """"""

    name = "Check if Private Vulnerability Reporting is Enabled for a Repository"
    url = "/repos/{owner}/{repo}/private-vulnerability-reporting"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Check_if_Private_Vulnerability_Reporting_is_Enabled_for_a_Repository.method,
                Check_if_Private_Vulnerability_Reporting_is_Enabled_for_a_Repository.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Check_if_Private_Vulnerability_Reporting_is_Enabled_for_a_Repository': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Enable_Private_Vulnerability_Reporting_for_a_Repository(BaseFunction):
    """"""

    name = "Enable Private Vulnerability Reporting for a Repository"
    url = "/repos/{owner}/{repo}/private-vulnerability-reporting"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Enable_Private_Vulnerability_Reporting_for_a_Repository.method,
                Enable_Private_Vulnerability_Reporting_for_a_Repository.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Enable_Private_Vulnerability_Reporting_for_a_Repository': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Disable_Private_Vulnerability_Reporting_for_a_Repository(BaseFunction):
    """"""

    name = "Disable Private Vulnerability Reporting for a Repository"
    url = "/repos/{owner}/{repo}/private-vulnerability-reporting"
    args_in_url = True
    method = DELETE

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Disable_Private_Vulnerability_Reporting_for_a_Repository.method,
                Disable_Private_Vulnerability_Reporting_for_a_Repository.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Disable_Private_Vulnerability_Reporting_for_a_Repository': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Get_Repository_Content_with_Path(BaseFunction):
    """"""

    name = "Get Repository Content with Path"
    url = "/repos/{owner}/{repo}/contents/{path}"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Get_Repository_Content_with_Path.method,
                Get_Repository_Content_with_Path.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = (
                f"Error running function 'Get_Repository_Content_with_Path': {str(e)}"
            )
            logging.error(error_msg)
            raise ValueError(error_msg)


class Create_or_Update_File_Contents_in_a_Repository_with_Path(BaseFunction):
    """"""

    name = "Create or Update File Contents in a Repository with Path"
    url = "/repos/{owner}/{repo}/contents/{path}"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Create_or_Update_File_Contents_in_a_Repository_with_Path.method,
                Create_or_Update_File_Contents_in_a_Repository_with_Path.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Create_or_Update_File_Contents_in_a_Repository_with_Path': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Delete_a_File_in_a_Repository_with_Path(BaseFunction):
    """"""

    name = "Delete a File in a Repository with Path"
    url = "/repos/{owner}/{repo}/contents/{path}"
    args_in_url = True
    method = DELETE

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Delete_a_File_in_a_Repository_with_Path.method,
                Delete_a_File_in_a_Repository_with_Path.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Delete_a_File_in_a_Repository_with_Path': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class List_Repository_Contributors(BaseFunction):
    """"""

    name = "List Repository Contributors"
    url = "/repos/{owner}/{repo}/contributors"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                List_Repository_Contributors.method,
                List_Repository_Contributors.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = (
                f"Error running function 'List_Repository_Contributors': {str(e)}"
            )
            logging.error(error_msg)
            raise ValueError(error_msg)


class Create_a_Repository_Dispatch_Event(BaseFunction):
    """"""

    name = "Create a Repository Dispatch Event"
    url = "/repos/{owner}/{repo}/dispatches"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Create_a_Repository_Dispatch_Event.method,
                Create_a_Repository_Dispatch_Event.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = (
                f"Error running function 'Create_a_Repository_Dispatch_Event': {str(e)}"
            )
            logging.error(error_msg)
            raise ValueError(error_msg)


class List_Repository_Forks(BaseFunction):
    """"""

    name = "List Repository Forks"
    url = "/repos/{owner}/{repo}/forks"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                List_Repository_Forks.method,
                List_Repository_Forks.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'List_Repository_Forks': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Create_a_Fork_of_a_Repository(BaseFunction):
    """"""

    name = "Create a Fork of a Repository"
    url = "/repos/{owner}/{repo}/forks"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Create_a_Fork_of_a_Repository.method,
                Create_a_Fork_of_a_Repository.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = (
                f"Error running function 'Create_a_Fork_of_a_Repository': {str(e)}"
            )
            logging.error(error_msg)
            raise ValueError(error_msg)


class List_Repository_Webhooks(BaseFunction):
    """"""

    name = "List Repository Webhooks"
    url = "/repos/{owner}/{repo}/hooks"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                List_Repository_Webhooks.method,
                List_Repository_Webhooks.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'List_Repository_Webhooks': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Create_a_Repository_Webhook(BaseFunction):
    """"""

    name = "Create a Repository Webhook"
    url = "/repos/{owner}/{repo}/hooks"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Create_a_Repository_Webhook.method,
                Create_a_Repository_Webhook.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = (
                f"Error running function 'Create_a_Repository_Webhook': {str(e)}"
            )
            logging.error(error_msg)
            raise ValueError(error_msg)


class Get_a_Repository_Webhook(BaseFunction):
    """"""

    name = "Get a Repository Webhook"
    url = "/repos/{owner}/{repo}/hooks/{hook_id}"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Get_a_Repository_Webhook.method,
                Get_a_Repository_Webhook.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_a_Repository_Webhook': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Update_a_Repository_Webhook(BaseFunction):
    """"""

    name = "Update a Repository Webhook"
    url = "/repos/{owner}/{repo}/hooks/{hook_id}"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Update_a_Repository_Webhook.method,
                Update_a_Repository_Webhook.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = (
                f"Error running function 'Update_a_Repository_Webhook': {str(e)}"
            )
            logging.error(error_msg)
            raise ValueError(error_msg)


class Delete_a_Repository_Webhook(BaseFunction):
    """"""

    name = "Delete a Repository Webhook"
    url = "/repos/{owner}/{repo}/hooks/{hook_id}"
    args_in_url = True
    method = DELETE

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Delete_a_Repository_Webhook.method,
                Delete_a_Repository_Webhook.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = (
                f"Error running function 'Delete_a_Repository_Webhook': {str(e)}"
            )
            logging.error(error_msg)
            raise ValueError(error_msg)


class Get_Webhook_Configuration_for_a_Repository(BaseFunction):
    """"""

    name = "Get Webhook Configuration for a Repository"
    url = "/repos/{owner}/{repo}/hooks/{hook_id}/config"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Get_Webhook_Configuration_for_a_Repository.method,
                Get_Webhook_Configuration_for_a_Repository.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_Webhook_Configuration_for_a_Repository': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Update_Webhook_Configuration_for_a_Repository(BaseFunction):
    """"""

    name = "Update Webhook Configuration for a Repository"
    url = "/repos/{owner}/{repo}/hooks/{hook_id}/config"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Update_Webhook_Configuration_for_a_Repository.method,
                Update_Webhook_Configuration_for_a_Repository.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Update_Webhook_Configuration_for_a_Repository': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class List_Deliveries_for_a_Repository_Webhook(BaseFunction):
    """"""

    name = "List Deliveries for a Repository Webhook"
    url = "/repos/{owner}/{repo}/hooks/{hook_id}/deliveries"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                List_Deliveries_for_a_Repository_Webhook.method,
                List_Deliveries_for_a_Repository_Webhook.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'List_Deliveries_for_a_Repository_Webhook': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Get_a_Delivery_for_a_Repository_Webhook(BaseFunction):
    """"""

    name = "Get a Delivery for a Repository Webhook"
    url = "/repos/{owner}/{repo}/hooks/{hook_id}/deliveries/{delivery_id}"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Get_a_Delivery_for_a_Repository_Webhook.method,
                Get_a_Delivery_for_a_Repository_Webhook.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_a_Delivery_for_a_Repository_Webhook': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Redeliver_a_Delivery_for_a_Repository_Webhook(BaseFunction):
    """"""

    name = "Redeliver a Delivery for a Repository Webhook"
    url = "/repos/{owner}/{repo}/hooks/{hook_id}/deliveries/{delivery_id}/attempts"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Redeliver_a_Delivery_for_a_Repository_Webhook.method,
                Redeliver_a_Delivery_for_a_Repository_Webhook.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Redeliver_a_Delivery_for_a_Repository_Webhook': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Ping_a_Repository_Webhook(BaseFunction):
    """"""

    name = "Ping a Repository Webhook"
    url = "/repos/{owner}/{repo}/hooks/{hook_id}/pings"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Ping_a_Repository_Webhook.method,
                Ping_a_Repository_Webhook.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Ping_a_Repository_Webhook': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Test_a_Repository_Webhook(BaseFunction):
    """"""

    name = "Test a Repository Webhook"
    url = "/repos/{owner}/{repo}/hooks/{hook_id}/tests"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Test_a_Repository_Webhook.method,
                Test_a_Repository_Webhook.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Test_a_Repository_Webhook': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class List_Repository_Languages(BaseFunction):
    """"""

    name = "List Repository Languages"
    url = "/repos/{owner}/{repo}/languages"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                List_Repository_Languages.method,
                List_Repository_Languages.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'List_Repository_Languages': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Check_if_Private_Vulnerability_Reporting_is_Enabled_for_a_Repository(
    BaseFunction
):
    """"""

    name = "Check if Private Vulnerability Reporting is Enabled for a Repository"
    url = "/repos/{owner}/{repo}/private-vulnerability-reporting"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Check_if_Private_Vulnerability_Reporting_is_Enabled_for_a_Repository.method,
                Check_if_Private_Vulnerability_Reporting_is_Enabled_for_a_Repository.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Check_if_Private_Vulnerability_Reporting_is_Enabled_for_a_Repository': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Enable_Private_Vulnerability_Reporting_for_a_Repository(BaseFunction):
    """"""

    name = "Enable Private Vulnerability Reporting for a Repository"
    url = "/repos/{owner}/{repo}/private-vulnerability-reporting"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Enable_Private_Vulnerability_Reporting_for_a_Repository.method,
                Enable_Private_Vulnerability_Reporting_for_a_Repository.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Enable_Private_Vulnerability_Reporting_for_a_Repository': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Disable_Private_Vulnerability_Reporting_for_a_Repository(BaseFunction):
    """"""

    name = "Disable Private Vulnerability Reporting for a Repository"
    url = "/repos/{owner}/{repo}/private-vulnerability-reporting"
    args_in_url = True
    method = DELETE

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Disable_Private_Vulnerability_Reporting_for_a_Repository.method,
                Disable_Private_Vulnerability_Reporting_for_a_Repository.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Disable_Private_Vulnerability_Reporting_for_a_Repository': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Get_Repository_Content_with_Path(BaseFunction):
    """"""

    name = "Get Repository Content with Path"
    url = "/repos/{owner}/{repo}/contents/{path}"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Get_Repository_Content_with_Path.method,
                Get_Repository_Content_with_Path.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = (
                f"Error running function 'Get_Repository_Content_with_Path': {str(e)}"
            )
            logging.error(error_msg)
            raise ValueError(error_msg)


class Create_or_Update_File_Contents_in_a_Repository_with_Path(BaseFunction):
    """"""

    name = "Create or Update File Contents in a Repository with Path"
    url = "/repos/{owner}/{repo}/contents/{path}"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Create_or_Update_File_Contents_in_a_Repository_with_Path.method,
                Create_or_Update_File_Contents_in_a_Repository_with_Path.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Create_or_Update_File_Contents_in_a_Repository_with_Path': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Delete_a_File_in_a_Repository_with_Path(BaseFunction):
    """"""

    name = "Delete a File in a Repository with Path"
    url = "/repos/{owner}/{repo}/contents/{path}"
    args_in_url = True
    method = DELETE

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Delete_a_File_in_a_Repository_with_Path.method,
                Delete_a_File_in_a_Repository_with_Path.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Delete_a_File_in_a_Repository_with_Path': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class List_Repository_Contributors(BaseFunction):
    """"""

    name = "List Repository Contributors"
    url = "/repos/{owner}/{repo}/contributors"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                List_Repository_Contributors.method,
                List_Repository_Contributors.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = (
                f"Error running function 'List_Repository_Contributors': {str(e)}"
            )
            logging.error(error_msg)
            raise ValueError(error_msg)


class Create_a_Repository_Dispatch_Event(BaseFunction):
    """"""

    name = "Create a Repository Dispatch Event"
    url = "/repos/{owner}/{repo}/dispatches"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Create_a_Repository_Dispatch_Event.method,
                Create_a_Repository_Dispatch_Event.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = (
                f"Error running function 'Create_a_Repository_Dispatch_Event': {str(e)}"
            )
            logging.error(error_msg)
            raise ValueError(error_msg)


class List_Repository_Forks(BaseFunction):
    """"""

    name = "List Repository Forks"
    url = "/repos/{owner}/{repo}/forks"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                List_Repository_Forks.method,
                List_Repository_Forks.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'List_Repository_Forks': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Create_a_Fork_of_a_Repository(BaseFunction):
    """"""

    name = "Create a Fork of a Repository"
    url = "/repos/{owner}/{repo}/forks"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Create_a_Fork_of_a_Repository.method,
                Create_a_Fork_of_a_Repository.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = (
                f"Error running function 'Create_a_Fork_of_a_Repository': {str(e)}"
            )
            logging.error(error_msg)
            raise ValueError(error_msg)


class List_Repository_Webhooks(BaseFunction):
    """"""

    name = "List Repository Webhooks"
    url = "/repos/{owner}/{repo}/hooks"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                List_Repository_Webhooks.method,
                List_Repository_Webhooks.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'List_Repository_Webhooks': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Create_a_Repository_Webhook(BaseFunction):
    """"""

    name = "Create a Repository Webhook"
    url = "/repos/{owner}/{repo}/hooks"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Create_a_Repository_Webhook.method,
                Create_a_Repository_Webhook.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = (
                f"Error running function 'Create_a_Repository_Webhook': {str(e)}"
            )
            logging.error(error_msg)
            raise ValueError(error_msg)


class Get_a_Repository_Webhook(BaseFunction):
    """"""

    name = "Get a Repository Webhook"
    url = "/repos/{owner}/{repo}/hooks/{hook_id}"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Get_a_Repository_Webhook.method,
                Get_a_Repository_Webhook.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_a_Repository_Webhook': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Update_a_Repository_Webhook(BaseFunction):
    """"""

    name = "Update a Repository Webhook"
    url = "/repos/{owner}/{repo}/hooks/{hook_id}"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Update_a_Repository_Webhook.method,
                Update_a_Repository_Webhook.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = (
                f"Error running function 'Update_a_Repository_Webhook': {str(e)}"
            )
            logging.error(error_msg)
            raise ValueError(error_msg)


class Delete_a_Repository_Webhook(BaseFunction):
    """"""

    name = "Delete a Repository Webhook"
    url = "/repos/{owner}/{repo}/hooks/{hook_id}"
    args_in_url = True
    method = DELETE

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Delete_a_Repository_Webhook.method,
                Delete_a_Repository_Webhook.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = (
                f"Error running function 'Delete_a_Repository_Webhook': {str(e)}"
            )
            logging.error(error_msg)
            raise ValueError(error_msg)


class Get_Webhook_Configuration_for_a_Repository(BaseFunction):
    """"""

    name = "Get Webhook Configuration for a Repository"
    url = "/repos/{owner}/{repo}/hooks/{hook_id}/config"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Get_Webhook_Configuration_for_a_Repository.method,
                Get_Webhook_Configuration_for_a_Repository.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_Webhook_Configuration_for_a_Repository': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Update_Webhook_Configuration_for_a_Repository(BaseFunction):
    """"""

    name = "Update Webhook Configuration for a Repository"
    url = "/repos/{owner}/{repo}/hooks/{hook_id}/config"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Update_Webhook_Configuration_for_a_Repository.method,
                Update_Webhook_Configuration_for_a_Repository.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Update_Webhook_Configuration_for_a_Repository': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class List_Deliveries_for_a_Repository_Webhook(BaseFunction):
    """"""

    name = "List Deliveries for a Repository Webhook"
    url = "/repos/{owner}/{repo}/hooks/{hook_id}/deliveries"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                List_Deliveries_for_a_Repository_Webhook.method,
                List_Deliveries_for_a_Repository_Webhook.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'List_Deliveries_for_a_Repository_Webhook': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Get_a_Delivery_for_a_Repository_Webhook(BaseFunction):
    """"""

    name = "Get a Delivery for a Repository Webhook"
    url = "/repos/{owner}/{repo}/hooks/{hook_id}/deliveries/{delivery_id}"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Get_a_Delivery_for_a_Repository_Webhook.method,
                Get_a_Delivery_for_a_Repository_Webhook.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_a_Delivery_for_a_Repository_Webhook': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Redeliver_a_Delivery_for_a_Repository_Webhook(BaseFunction):
    """"""

    name = "Redeliver a Delivery for a Repository Webhook"
    url = "/repos/{owner}/{repo}/hooks/{hook_id}/deliveries/{delivery_id}/attempts"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Redeliver_a_Delivery_for_a_Repository_Webhook.method,
                Redeliver_a_Delivery_for_a_Repository_Webhook.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Redeliver_a_Delivery_for_a_Repository_Webhook': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Ping_a_Repository_Webhook(BaseFunction):
    """"""

    name = "Ping a Repository Webhook"
    url = "/repos/{owner}/{repo}/hooks/{hook_id}/pings"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Ping_a_Repository_Webhook.method,
                Ping_a_Repository_Webhook.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Ping_a_Repository_Webhook': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Test_a_Repository_Webhook(BaseFunction):
    """"""

    name = "Test a Repository Webhook"
    url = "/repos/{owner}/{repo}/hooks/{hook_id}/tests"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Test_a_Repository_Webhook.method,
                Test_a_Repository_Webhook.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Test_a_Repository_Webhook': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class List_Repository_Languages(BaseFunction):
    """"""

    name = "List Repository Languages"
    url = "/repos/{owner}/{repo}/languages"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                List_Repository_Languages.method,
                List_Repository_Languages.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'List_Repository_Languages': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Check_if_Private_Vulnerability_Reporting_is_Enabled_for_a_Repository(
    BaseFunction
):
    """"""

    name = "Check if Private Vulnerability Reporting is Enabled for a Repository"
    url = "/repos/{owner}/{repo}/private-vulnerability-reporting"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Check_if_Private_Vulnerability_Reporting_is_Enabled_for_a_Repository.method,
                Check_if_Private_Vulnerability_Reporting_is_Enabled_for_a_Repository.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Check_if_Private_Vulnerability_Reporting_is_Enabled_for_a_Repository': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Enable_Private_Vulnerability_Reporting_for_a_Repository(BaseFunction):
    """"""

    name = "Enable Private Vulnerability Reporting for a Repository"
    url = "/repos/{owner}/{repo}/private-vulnerability-reporting"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Enable_Private_Vulnerability_Reporting_for_a_Repository.method,
                Enable_Private_Vulnerability_Reporting_for_a_Repository.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Enable_Private_Vulnerability_Reporting_for_a_Repository': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Disable_Private_Vulnerability_Reporting_for_a_Repository(BaseFunction):
    """"""

    name = "Disable Private Vulnerability Reporting for a Repository"
    url = "/repos/{owner}/{repo}/private-vulnerability-reporting"
    args_in_url = True
    method = DELETE

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Disable_Private_Vulnerability_Reporting_for_a_Repository.method,
                Disable_Private_Vulnerability_Reporting_for_a_Repository.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Disable_Private_Vulnerability_Reporting_for_a_Repository': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Get_Repository_Content_with_Path(BaseFunction):
    """"""

    name = "Get Repository Content with Path"
    url = "/repos/{owner}/{repo}/contents/{path}"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Get_Repository_Content_with_Path.method,
                Get_Repository_Content_with_Path.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = (
                f"Error running function 'Get_Repository_Content_with_Path': {str(e)}"
            )
            logging.error(error_msg)
            raise ValueError(error_msg)


class Create_or_Update_File_Contents_in_a_Repository_with_Path(BaseFunction):
    """"""

    name = "Create or Update File Contents in a Repository with Path"
    url = "/repos/{owner}/{repo}/contents/{path}"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Create_or_Update_File_Contents_in_a_Repository_with_Path.method,
                Create_or_Update_File_Contents_in_a_Repository_with_Path.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Create_or_Update_File_Contents_in_a_Repository_with_Path': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Delete_a_File_in_a_Repository_with_Path(BaseFunction):
    """"""

    name = "Delete a File in a Repository with Path"
    url = "/repos/{owner}/{repo}/contents/{path}"
    args_in_url = True
    method = DELETE

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Delete_a_File_in_a_Repository_with_Path.method,
                Delete_a_File_in_a_Repository_with_Path.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Delete_a_File_in_a_Repository_with_Path': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class List_Repository_Contributors(BaseFunction):
    """"""

    name = "List Repository Contributors"
    url = "/repos/{owner}/{repo}/contributors"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                List_Repository_Contributors.method,
                List_Repository_Contributors.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = (
                f"Error running function 'List_Repository_Contributors': {str(e)}"
            )
            logging.error(error_msg)
            raise ValueError(error_msg)


class Create_a_Repository_Dispatch_Event(BaseFunction):
    """"""

    name = "Create a Repository Dispatch Event"
    url = "/repos/{owner}/{repo}/dispatches"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Create_a_Repository_Dispatch_Event.method,
                Create_a_Repository_Dispatch_Event.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = (
                f"Error running function 'Create_a_Repository_Dispatch_Event': {str(e)}"
            )
            logging.error(error_msg)
            raise ValueError(error_msg)


class List_Repository_Forks(BaseFunction):
    """"""

    name = "List Repository Forks"
    url = "/repos/{owner}/{repo}/forks"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                List_Repository_Forks.method,
                List_Repository_Forks.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'List_Repository_Forks': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Create_a_Fork_of_a_Repository(BaseFunction):
    """"""

    name = "Create a Fork of a Repository"
    url = "/repos/{owner}/{repo}/forks"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Create_a_Fork_of_a_Repository.method,
                Create_a_Fork_of_a_Repository.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = (
                f"Error running function 'Create_a_Fork_of_a_Repository': {str(e)}"
            )
            logging.error(error_msg)
            raise ValueError(error_msg)


class List_Repository_Webhooks(BaseFunction):
    """"""

    name = "List Repository Webhooks"
    url = "/repos/{owner}/{repo}/hooks"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                List_Repository_Webhooks.method,
                List_Repository_Webhooks.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'List_Repository_Webhooks': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Create_a_Repository_Webhook(BaseFunction):
    """"""

    name = "Create a Repository Webhook"
    url = "/repos/{owner}/{repo}/hooks"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Create_a_Repository_Webhook.method,
                Create_a_Repository_Webhook.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = (
                f"Error running function 'Create_a_Repository_Webhook': {str(e)}"
            )
            logging.error(error_msg)
            raise ValueError(error_msg)


class Get_a_Repository_Webhook(BaseFunction):
    """"""

    name = "Get a Repository Webhook"
    url = "/repos/{owner}/{repo}/hooks/{hook_id}"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Get_a_Repository_Webhook.method,
                Get_a_Repository_Webhook.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_a_Repository_Webhook': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Update_a_Repository_Webhook(BaseFunction):
    """"""

    name = "Update a Repository Webhook"
    url = "/repos/{owner}/{repo}/hooks/{hook_id}"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Update_a_Repository_Webhook.method,
                Update_a_Repository_Webhook.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = (
                f"Error running function 'Update_a_Repository_Webhook': {str(e)}"
            )
            logging.error(error_msg)
            raise ValueError(error_msg)


class Delete_a_Repository_Webhook(BaseFunction):
    """"""

    name = "Delete a Repository Webhook"
    url = "/repos/{owner}/{repo}/hooks/{hook_id}"
    args_in_url = True
    method = DELETE

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Delete_a_Repository_Webhook.method,
                Delete_a_Repository_Webhook.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = (
                f"Error running function 'Delete_a_Repository_Webhook': {str(e)}"
            )
            logging.error(error_msg)
            raise ValueError(error_msg)


class Get_Webhook_Configuration_for_a_Repository(BaseFunction):
    """"""

    name = "Get Webhook Configuration for a Repository"
    url = "/repos/{owner}/{repo}/hooks/{hook_id}/config"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Get_Webhook_Configuration_for_a_Repository.method,
                Get_Webhook_Configuration_for_a_Repository.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_Webhook_Configuration_for_a_Repository': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Update_Webhook_Configuration_for_a_Repository(BaseFunction):
    """"""

    name = "Update Webhook Configuration for a Repository"
    url = "/repos/{owner}/{repo}/hooks/{hook_id}/config"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Update_Webhook_Configuration_for_a_Repository.method,
                Update_Webhook_Configuration_for_a_Repository.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Update_Webhook_Configuration_for_a_Repository': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class List_Deliveries_for_a_Repository_Webhook(BaseFunction):
    """"""

    name = "List Deliveries for a Repository Webhook"
    url = "/repos/{owner}/{repo}/hooks/{hook_id}/deliveries"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                List_Deliveries_for_a_Repository_Webhook.method,
                List_Deliveries_for_a_Repository_Webhook.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'List_Deliveries_for_a_Repository_Webhook': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Get_a_Delivery_for_a_Repository_Webhook(BaseFunction):
    """"""

    name = "Get a Delivery for a Repository Webhook"
    url = "/repos/{owner}/{repo}/hooks/{hook_id}/deliveries/{delivery_id}"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Get_a_Delivery_for_a_Repository_Webhook.method,
                Get_a_Delivery_for_a_Repository_Webhook.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_a_Delivery_for_a_Repository_Webhook': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Redeliver_a_Delivery_for_a_Repository_Webhook(BaseFunction):
    """"""

    name = "Redeliver a Delivery for a Repository Webhook"
    url = "/repos/{owner}/{repo}/hooks/{hook_id}/deliveries/{delivery_id}/attempts"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Redeliver_a_Delivery_for_a_Repository_Webhook.method,
                Redeliver_a_Delivery_for_a_Repository_Webhook.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Redeliver_a_Delivery_for_a_Repository_Webhook': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Ping_a_Repository_Webhook(BaseFunction):
    """"""

    name = "Ping a Repository Webhook"
    url = "/repos/{owner}/{repo}/hooks/{hook_id}/pings"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Ping_a_Repository_Webhook.method,
                Ping_a_Repository_Webhook.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Ping_a_Repository_Webhook': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Test_a_Repository_Webhook(BaseFunction):
    """"""

    name = "Test a Repository Webhook"
    url = "/repos/{owner}/{repo}/hooks/{hook_id}/tests"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Test_a_Repository_Webhook.method,
                Test_a_Repository_Webhook.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Test_a_Repository_Webhook': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class List_Repository_Languages(BaseFunction):
    """"""

    name = "List Repository Languages"
    url = "/repos/{owner}/{repo}/languages"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                List_Repository_Languages.method,
                List_Repository_Languages.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'List_Repository_Languages': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Check_if_Private_Vulnerability_Reporting_is_Enabled_for_a_Repository(
    BaseFunction
):
    """"""

    name = "Check if Private Vulnerability Reporting is Enabled for a Repository"
    url = "/repos/{owner}/{repo}/private-vulnerability-reporting"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Check_if_Private_Vulnerability_Reporting_is_Enabled_for_a_Repository.method,
                Check_if_Private_Vulnerability_Reporting_is_Enabled_for_a_Repository.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Check_if_Private_Vulnerability_Reporting_is_Enabled_for_a_Repository': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Enable_Private_Vulnerability_Reporting_for_a_Repository(BaseFunction):
    """"""

    name = "Enable Private Vulnerability Reporting for a Repository"
    url = "/repos/{owner}/{repo}/private-vulnerability-reporting"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Enable_Private_Vulnerability_Reporting_for_a_Repository.method,
                Enable_Private_Vulnerability_Reporting_for_a_Repository.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Enable_Private_Vulnerability_Reporting_for_a_Repository': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Disable_Private_Vulnerability_Reporting_for_a_Repository(BaseFunction):
    """"""

    name = "Disable Private Vulnerability Reporting for a Repository"
    url = "/repos/{owner}/{repo}/private-vulnerability-reporting"
    args_in_url = True
    method = DELETE

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Disable_Private_Vulnerability_Reporting_for_a_Repository.method,
                Disable_Private_Vulnerability_Reporting_for_a_Repository.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Disable_Private_Vulnerability_Reporting_for_a_Repository': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Get_Repository_Content_with_Path(BaseFunction):
    """"""

    name = "Get Repository Content with Path"
    url = "/repos/{owner}/{repo}/contents/{path}"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Get_Repository_Content_with_Path.method,
                Get_Repository_Content_with_Path.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = (
                f"Error running function 'Get_Repository_Content_with_Path': {str(e)}"
            )
            logging.error(error_msg)
            raise ValueError(error_msg)


class Create_or_Update_File_Contents_in_a_Repository_with_Path(BaseFunction):
    """"""

    name = "Create or Update File Contents in a Repository with Path"
    url = "/repos/{owner}/{repo}/contents/{path}"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Create_or_Update_File_Contents_in_a_Repository_with_Path.method,
                Create_or_Update_File_Contents_in_a_Repository_with_Path.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Create_or_Update_File_Contents_in_a_Repository_with_Path': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Delete_a_File_in_a_Repository_with_Path(BaseFunction):
    """"""

    name = "Delete a File in a Repository with Path"
    url = "/repos/{owner}/{repo}/contents/{path}"
    args_in_url = True
    method = DELETE

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Delete_a_File_in_a_Repository_with_Path.method,
                Delete_a_File_in_a_Repository_with_Path.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Delete_a_File_in_a_Repository_with_Path': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class List_Repository_Contributors(BaseFunction):
    """"""

    name = "List Repository Contributors"
    url = "/repos/{owner}/{repo}/contributors"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                List_Repository_Contributors.method,
                List_Repository_Contributors.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = (
                f"Error running function 'List_Repository_Contributors': {str(e)}"
            )
            logging.error(error_msg)
            raise ValueError(error_msg)


class Create_a_Repository_Dispatch_Event(BaseFunction):
    """"""

    name = "Create a Repository Dispatch Event"
    url = "/repos/{owner}/{repo}/dispatches"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Create_a_Repository_Dispatch_Event.method,
                Create_a_Repository_Dispatch_Event.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = (
                f"Error running function 'Create_a_Repository_Dispatch_Event': {str(e)}"
            )
            logging.error(error_msg)
            raise ValueError(error_msg)


class List_Repository_Forks(BaseFunction):
    """"""

    name = "List Repository Forks"
    url = "/repos/{owner}/{repo}/forks"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                List_Repository_Forks.method,
                List_Repository_Forks.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'List_Repository_Forks': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Create_a_Fork_of_a_Repository(BaseFunction):
    """"""

    name = "Create a Fork of a Repository"
    url = "/repos/{owner}/{repo}/forks"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Create_a_Fork_of_a_Repository.method,
                Create_a_Fork_of_a_Repository.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = (
                f"Error running function 'Create_a_Fork_of_a_Repository': {str(e)}"
            )
            logging.error(error_msg)
            raise ValueError(error_msg)


class List_Repository_Webhooks(BaseFunction):
    """"""

    name = "List Repository Webhooks"
    url = "/repos/{owner}/{repo}/hooks"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                List_Repository_Webhooks.method,
                List_Repository_Webhooks.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'List_Repository_Webhooks': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Create_a_Repository_Webhook(BaseFunction):
    """"""

    name = "Create a Repository Webhook"
    url = "/repos/{owner}/{repo}/hooks"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Create_a_Repository_Webhook.method,
                Create_a_Repository_Webhook.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = (
                f"Error running function 'Create_a_Repository_Webhook': {str(e)}"
            )
            logging.error(error_msg)
            raise ValueError(error_msg)


class Get_a_Repository_Webhook(BaseFunction):
    """"""

    name = "Get a Repository Webhook"
    url = "/repos/{owner}/{repo}/hooks/{hook_id}"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Get_a_Repository_Webhook.method,
                Get_a_Repository_Webhook.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_a_Repository_Webhook': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Update_a_Repository_Webhook(BaseFunction):
    """"""

    name = "Update a Repository Webhook"
    url = "/repos/{owner}/{repo}/hooks/{hook_id}"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Update_a_Repository_Webhook.method,
                Update_a_Repository_Webhook.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = (
                f"Error running function 'Update_a_Repository_Webhook': {str(e)}"
            )
            logging.error(error_msg)
            raise ValueError(error_msg)


class Delete_a_Repository_Webhook(BaseFunction):
    """"""

    name = "Delete a Repository Webhook"
    url = "/repos/{owner}/{repo}/hooks/{hook_id}"
    args_in_url = True
    method = DELETE

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Delete_a_Repository_Webhook.method,
                Delete_a_Repository_Webhook.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = (
                f"Error running function 'Delete_a_Repository_Webhook': {str(e)}"
            )
            logging.error(error_msg)
            raise ValueError(error_msg)


class Get_Webhook_Configuration_for_a_Repository(BaseFunction):
    """"""

    name = "Get Webhook Configuration for a Repository"
    url = "/repos/{owner}/{repo}/hooks/{hook_id}/config"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Get_Webhook_Configuration_for_a_Repository.method,
                Get_Webhook_Configuration_for_a_Repository.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_Webhook_Configuration_for_a_Repository': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Update_Webhook_Configuration_for_a_Repository(BaseFunction):
    """"""

    name = "Update Webhook Configuration for a Repository"
    url = "/repos/{owner}/{repo}/hooks/{hook_id}/config"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Update_Webhook_Configuration_for_a_Repository.method,
                Update_Webhook_Configuration_for_a_Repository.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Update_Webhook_Configuration_for_a_Repository': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class List_Deliveries_for_a_Repository_Webhook(BaseFunction):
    """"""

    name = "List Deliveries for a Repository Webhook"
    url = "/repos/{owner}/{repo}/hooks/{hook_id}/deliveries"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                List_Deliveries_for_a_Repository_Webhook.method,
                List_Deliveries_for_a_Repository_Webhook.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'List_Deliveries_for_a_Repository_Webhook': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Get_a_Delivery_for_a_Repository_Webhook(BaseFunction):
    """"""

    name = "Get a Delivery for a Repository Webhook"
    url = "/repos/{owner}/{repo}/hooks/{hook_id}/deliveries/{delivery_id}"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Get_a_Delivery_for_a_Repository_Webhook.method,
                Get_a_Delivery_for_a_Repository_Webhook.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_a_Delivery_for_a_Repository_Webhook': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Redeliver_a_Delivery_for_a_Repository_Webhook(BaseFunction):
    """"""

    name = "Redeliver a Delivery for a Repository Webhook"
    url = "/repos/{owner}/{repo}/hooks/{hook_id}/deliveries/{delivery_id}/attempts"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Redeliver_a_Delivery_for_a_Repository_Webhook.method,
                Redeliver_a_Delivery_for_a_Repository_Webhook.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Redeliver_a_Delivery_for_a_Repository_Webhook': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Ping_a_Repository_Webhook(BaseFunction):
    """"""

    name = "Ping a Repository Webhook"
    url = "/repos/{owner}/{repo}/hooks/{hook_id}/pings"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Ping_a_Repository_Webhook.method,
                Ping_a_Repository_Webhook.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Ping_a_Repository_Webhook': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Test_a_Repository_Webhook(BaseFunction):
    """"""

    name = "Test a Repository Webhook"
    url = "/repos/{owner}/{repo}/hooks/{hook_id}/tests"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Test_a_Repository_Webhook.method,
                Test_a_Repository_Webhook.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Test_a_Repository_Webhook': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class List_Repository_Languages(BaseFunction):
    """"""

    name = "List Repository Languages"
    url = "/repos/{owner}/{repo}/languages"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                List_Repository_Languages.method,
                List_Repository_Languages.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'List_Repository_Languages': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Check_if_Private_Vulnerability_Reporting_is_Enabled_for_a_Repository(
    BaseFunction
):
    """"""

    name = "Check if Private Vulnerability Reporting is Enabled for a Repository"
    url = "/repos/{owner}/{repo}/private-vulnerability-reporting"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Check_if_Private_Vulnerability_Reporting_is_Enabled_for_a_Repository.method,
                Check_if_Private_Vulnerability_Reporting_is_Enabled_for_a_Repository.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Check_if_Private_Vulnerability_Reporting_is_Enabled_for_a_Repository': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Enable_Private_Vulnerability_Reporting_for_a_Repository(BaseFunction):
    """"""

    name = "Enable Private Vulnerability Reporting for a Repository"
    url = "/repos/{owner}/{repo}/private-vulnerability-reporting"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Enable_Private_Vulnerability_Reporting_for_a_Repository.method,
                Enable_Private_Vulnerability_Reporting_for_a_Repository.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Enable_Private_Vulnerability_Reporting_for_a_Repository': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Disable_Private_Vulnerability_Reporting_for_a_Repository(BaseFunction):
    """"""

    name = "Disable Private Vulnerability Reporting for a Repository"
    url = "/repos/{owner}/{repo}/private-vulnerability-reporting"
    args_in_url = True
    method = DELETE

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Disable_Private_Vulnerability_Reporting_for_a_Repository.method,
                Disable_Private_Vulnerability_Reporting_for_a_Repository.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Disable_Private_Vulnerability_Reporting_for_a_Repository': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Get_Repository_Content_with_Path(BaseFunction):
    """"""

    name = "Get Repository Content with Path"
    url = "/repos/{owner}/{repo}/contents/{path}"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Get_Repository_Content_with_Path.method,
                Get_Repository_Content_with_Path.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = (
                f"Error running function 'Get_Repository_Content_with_Path': {str(e)}"
            )
            logging.error(error_msg)
            raise ValueError(error_msg)


class Create_or_Update_File_Contents_in_a_Repository_with_Path(BaseFunction):
    """"""

    name = "Create or Update File Contents in a Repository with Path"
    url = "/repos/{owner}/{repo}/contents/{path}"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Create_or_Update_File_Contents_in_a_Repository_with_Path.method,
                Create_or_Update_File_Contents_in_a_Repository_with_Path.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Create_or_Update_File_Contents_in_a_Repository_with_Path': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Delete_a_File_in_a_Repository_with_Path(BaseFunction):
    """"""

    name = "Delete a File in a Repository with Path"
    url = "/repos/{owner}/{repo}/contents/{path}"
    args_in_url = True
    method = DELETE

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Delete_a_File_in_a_Repository_with_Path.method,
                Delete_a_File_in_a_Repository_with_Path.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Delete_a_File_in_a_Repository_with_Path': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class List_Repository_Contributors(BaseFunction):
    """"""

    name = "List Repository Contributors"
    url = "/repos/{owner}/{repo}/contributors"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                List_Repository_Contributors.method,
                List_Repository_Contributors.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = (
                f"Error running function 'List_Repository_Contributors': {str(e)}"
            )
            logging.error(error_msg)
            raise ValueError(error_msg)


class Create_a_Repository_Dispatch_Event(BaseFunction):
    """"""

    name = "Create a Repository Dispatch Event"
    url = "/repos/{owner}/{repo}/dispatches"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Create_a_Repository_Dispatch_Event.method,
                Create_a_Repository_Dispatch_Event.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = (
                f"Error running function 'Create_a_Repository_Dispatch_Event': {str(e)}"
            )
            logging.error(error_msg)
            raise ValueError(error_msg)


class List_Repository_Forks(BaseFunction):
    """"""

    name = "List Repository Forks"
    url = "/repos/{owner}/{repo}/forks"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                List_Repository_Forks.method,
                List_Repository_Forks.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'List_Repository_Forks': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Create_a_Fork_of_a_Repository(BaseFunction):
    """"""

    name = "Create a Fork of a Repository"
    url = "/repos/{owner}/{repo}/forks"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Create_a_Fork_of_a_Repository.method,
                Create_a_Fork_of_a_Repository.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = (
                f"Error running function 'Create_a_Fork_of_a_Repository': {str(e)}"
            )
            logging.error(error_msg)
            raise ValueError(error_msg)


class List_Repository_Webhooks(BaseFunction):
    """"""

    name = "List Repository Webhooks"
    url = "/repos/{owner}/{repo}/hooks"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                List_Repository_Webhooks.method,
                List_Repository_Webhooks.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'List_Repository_Webhooks': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Create_a_Repository_Webhook(BaseFunction):
    """"""

    name = "Create a Repository Webhook"
    url = "/repos/{owner}/{repo}/hooks"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Create_a_Repository_Webhook.method,
                Create_a_Repository_Webhook.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = (
                f"Error running function 'Create_a_Repository_Webhook': {str(e)}"
            )
            logging.error(error_msg)
            raise ValueError(error_msg)


class Get_a_Repository_Webhook(BaseFunction):
    """"""

    name = "Get a Repository Webhook"
    url = "/repos/{owner}/{repo}/hooks/{hook_id}"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Get_a_Repository_Webhook.method,
                Get_a_Repository_Webhook.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_a_Repository_Webhook': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Update_a_Repository_Webhook(BaseFunction):
    """"""

    name = "Update a Repository Webhook"
    url = "/repos/{owner}/{repo}/hooks/{hook_id}"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Update_a_Repository_Webhook.method,
                Update_a_Repository_Webhook.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = (
                f"Error running function 'Update_a_Repository_Webhook': {str(e)}"
            )
            logging.error(error_msg)
            raise ValueError(error_msg)


class Delete_a_Repository_Webhook(BaseFunction):
    """"""

    name = "Delete a Repository Webhook"
    url = "/repos/{owner}/{repo}/hooks/{hook_id}"
    args_in_url = True
    method = DELETE

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Delete_a_Repository_Webhook.method,
                Delete_a_Repository_Webhook.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = (
                f"Error running function 'Delete_a_Repository_Webhook': {str(e)}"
            )
            logging.error(error_msg)
            raise ValueError(error_msg)


class Get_Webhook_Configuration_for_a_Repository(BaseFunction):
    """"""

    name = "Get Webhook Configuration for a Repository"
    url = "/repos/{owner}/{repo}/hooks/{hook_id}/config"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Get_Webhook_Configuration_for_a_Repository.method,
                Get_Webhook_Configuration_for_a_Repository.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_Webhook_Configuration_for_a_Repository': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Update_Webhook_Configuration_for_a_Repository(BaseFunction):
    """"""

    name = "Update Webhook Configuration for a Repository"
    url = "/repos/{owner}/{repo}/hooks/{hook_id}/config"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Update_Webhook_Configuration_for_a_Repository.method,
                Update_Webhook_Configuration_for_a_Repository.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Update_Webhook_Configuration_for_a_Repository': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class List_Deliveries_for_a_Repository_Webhook(BaseFunction):
    """"""

    name = "List Deliveries for a Repository Webhook"
    url = "/repos/{owner}/{repo}/hooks/{hook_id}/deliveries"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                List_Deliveries_for_a_Repository_Webhook.method,
                List_Deliveries_for_a_Repository_Webhook.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'List_Deliveries_for_a_Repository_Webhook': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Get_a_Delivery_for_a_Repository_Webhook(BaseFunction):
    """"""

    name = "Get a Delivery for a Repository Webhook"
    url = "/repos/{owner}/{repo}/hooks/{hook_id}/deliveries/{delivery_id}"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Get_a_Delivery_for_a_Repository_Webhook.method,
                Get_a_Delivery_for_a_Repository_Webhook.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_a_Delivery_for_a_Repository_Webhook': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Redeliver_a_Delivery_for_a_Repository_Webhook(BaseFunction):
    """"""

    name = "Redeliver a Delivery for a Repository Webhook"
    url = "/repos/{owner}/{repo}/hooks/{hook_id}/deliveries/{delivery_id}/attempts"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Redeliver_a_Delivery_for_a_Repository_Webhook.method,
                Redeliver_a_Delivery_for_a_Repository_Webhook.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Redeliver_a_Delivery_for_a_Repository_Webhook': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Ping_a_Repository_Webhook(BaseFunction):
    """"""

    name = "Ping a Repository Webhook"
    url = "/repos/{owner}/{repo}/hooks/{hook_id}/pings"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Ping_a_Repository_Webhook.method,
                Ping_a_Repository_Webhook.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Ping_a_Repository_Webhook': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Test_a_Repository_Webhook(BaseFunction):
    """"""

    name = "Test a Repository Webhook"
    url = "/repos/{owner}/{repo}/hooks/{hook_id}/tests"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Test_a_Repository_Webhook.method,
                Test_a_Repository_Webhook.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Test_a_Repository_Webhook': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class List_Repository_Languages(BaseFunction):
    """"""

    name = "List Repository Languages"
    url = "/repos/{owner}/{repo}/languages"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                List_Repository_Languages.method,
                List_Repository_Languages.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'List_Repository_Languages': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Check_if_Private_Vulnerability_Reporting_is_Enabled_for_a_Repository(
    BaseFunction
):
    """"""

    name = "Check if Private Vulnerability Reporting is Enabled for a Repository"
    url = "/repos/{owner}/{repo}/private-vulnerability-reporting"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Check_if_Private_Vulnerability_Reporting_is_Enabled_for_a_Repository.method,
                Check_if_Private_Vulnerability_Reporting_is_Enabled_for_a_Repository.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Check_if_Private_Vulnerability_Reporting_is_Enabled_for_a_Repository': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Enable_Private_Vulnerability_Reporting_for_a_Repository(BaseFunction):
    """"""

    name = "Enable Private Vulnerability Reporting for a Repository"
    url = "/repos/{owner}/{repo}/private-vulnerability-reporting"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Enable_Private_Vulnerability_Reporting_for_a_Repository.method,
                Enable_Private_Vulnerability_Reporting_for_a_Repository.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Enable_Private_Vulnerability_Reporting_for_a_Repository': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Disable_Private_Vulnerability_Reporting_for_a_Repository(BaseFunction):
    """"""

    name = "Disable Private Vulnerability Reporting for a Repository"
    url = "/repos/{owner}/{repo}/private-vulnerability-reporting"
    args_in_url = True
    method = DELETE

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Disable_Private_Vulnerability_Reporting_for_a_Repository.method,
                Disable_Private_Vulnerability_Reporting_for_a_Repository.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Disable_Private_Vulnerability_Reporting_for_a_Repository': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Get_Repository_Content_with_Path(BaseFunction):
    """"""

    name = "Get Repository Content with Path"
    url = "/repos/{owner}/{repo}/contents/{path}"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Get_Repository_Content_with_Path.method,
                Get_Repository_Content_with_Path.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = (
                f"Error running function 'Get_Repository_Content_with_Path': {str(e)}"
            )
            logging.error(error_msg)
            raise ValueError(error_msg)


class Create_or_Update_File_Contents_in_a_Repository_with_Path(BaseFunction):
    """"""

    name = "Create or Update File Contents in a Repository with Path"
    url = "/repos/{owner}/{repo}/contents/{path}"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Create_or_Update_File_Contents_in_a_Repository_with_Path.method,
                Create_or_Update_File_Contents_in_a_Repository_with_Path.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Create_or_Update_File_Contents_in_a_Repository_with_Path': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Delete_a_File_in_a_Repository_with_Path(BaseFunction):
    """"""

    name = "Delete a File in a Repository with Path"
    url = "/repos/{owner}/{repo}/contents/{path}"
    args_in_url = True
    method = DELETE

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Delete_a_File_in_a_Repository_with_Path.method,
                Delete_a_File_in_a_Repository_with_Path.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Delete_a_File_in_a_Repository_with_Path': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class List_Repository_Contributors(BaseFunction):
    """"""

    name = "List Repository Contributors"
    url = "/repos/{owner}/{repo}/contributors"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                List_Repository_Contributors.method,
                List_Repository_Contributors.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = (
                f"Error running function 'List_Repository_Contributors': {str(e)}"
            )
            logging.error(error_msg)
            raise ValueError(error_msg)


class Create_a_Repository_Dispatch_Event(BaseFunction):
    """"""

    name = "Create a Repository Dispatch Event"
    url = "/repos/{owner}/{repo}/dispatches"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Create_a_Repository_Dispatch_Event.method,
                Create_a_Repository_Dispatch_Event.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = (
                f"Error running function 'Create_a_Repository_Dispatch_Event': {str(e)}"
            )
            logging.error(error_msg)
            raise ValueError(error_msg)


class List_Repository_Forks(BaseFunction):
    """"""

    name = "List Repository Forks"
    url = "/repos/{owner}/{repo}/forks"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                List_Repository_Forks.method,
                List_Repository_Forks.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'List_Repository_Forks': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Create_a_Fork_of_a_Repository(BaseFunction):
    """"""

    name = "Create a Fork of a Repository"
    url = "/repos/{owner}/{repo}/forks"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Create_a_Fork_of_a_Repository.method,
                Create_a_Fork_of_a_Repository.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = (
                f"Error running function 'Create_a_Fork_of_a_Repository': {str(e)}"
            )
            logging.error(error_msg)
            raise ValueError(error_msg)


class List_Repository_Webhooks(BaseFunction):
    """"""

    name = "List Repository Webhooks"
    url = "/repos/{owner}/{repo}/hooks"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                List_Repository_Webhooks.method,
                List_Repository_Webhooks.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'List_Repository_Webhooks': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Create_a_Repository_Webhook(BaseFunction):
    """"""

    name = "Create a Repository Webhook"
    url = "/repos/{owner}/{repo}/hooks"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Create_a_Repository_Webhook.method,
                Create_a_Repository_Webhook.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = (
                f"Error running function 'Create_a_Repository_Webhook': {str(e)}"
            )
            logging.error(error_msg)
            raise ValueError(error_msg)


class Get_a_Repository_Webhook(BaseFunction):
    """"""

    name = "Get a Repository Webhook"
    url = "/repos/{owner}/{repo}/hooks/{hook_id}"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Get_a_Repository_Webhook.method,
                Get_a_Repository_Webhook.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_a_Repository_Webhook': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Update_a_Repository_Webhook(BaseFunction):
    """"""

    name = "Update a Repository Webhook"
    url = "/repos/{owner}/{repo}/hooks/{hook_id}"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Update_a_Repository_Webhook.method,
                Update_a_Repository_Webhook.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = (
                f"Error running function 'Update_a_Repository_Webhook': {str(e)}"
            )
            logging.error(error_msg)
            raise ValueError(error_msg)


class Delete_a_Repository_Webhook(BaseFunction):
    """"""

    name = "Delete a Repository Webhook"
    url = "/repos/{owner}/{repo}/hooks/{hook_id}"
    args_in_url = True
    method = DELETE

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Delete_a_Repository_Webhook.method,
                Delete_a_Repository_Webhook.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = (
                f"Error running function 'Delete_a_Repository_Webhook': {str(e)}"
            )
            logging.error(error_msg)
            raise ValueError(error_msg)


class Get_Webhook_Configuration_for_a_Repository(BaseFunction):
    """"""

    name = "Get Webhook Configuration for a Repository"
    url = "/repos/{owner}/{repo}/hooks/{hook_id}/config"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Get_Webhook_Configuration_for_a_Repository.method,
                Get_Webhook_Configuration_for_a_Repository.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_Webhook_Configuration_for_a_Repository': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Update_Webhook_Configuration_for_a_Repository(BaseFunction):
    """"""

    name = "Update Webhook Configuration for a Repository"
    url = "/repos/{owner}/{repo}/hooks/{hook_id}/config"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Update_Webhook_Configuration_for_a_Repository.method,
                Update_Webhook_Configuration_for_a_Repository.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Update_Webhook_Configuration_for_a_Repository': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class List_Deliveries_for_a_Repository_Webhook(BaseFunction):
    """"""

    name = "List Deliveries for a Repository Webhook"
    url = "/repos/{owner}/{repo}/hooks/{hook_id}/deliveries"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                List_Deliveries_for_a_Repository_Webhook.method,
                List_Deliveries_for_a_Repository_Webhook.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'List_Deliveries_for_a_Repository_Webhook': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Get_a_Delivery_for_a_Repository_Webhook(BaseFunction):
    """"""

    name = "Get a Delivery for a Repository Webhook"
    url = "/repos/{owner}/{repo}/hooks/{hook_id}/deliveries/{delivery_id}"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Get_a_Delivery_for_a_Repository_Webhook.method,
                Get_a_Delivery_for_a_Repository_Webhook.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_a_Delivery_for_a_Repository_Webhook': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Redeliver_a_Delivery_for_a_Webhook(BaseFunction):
    """"""

    name = "Redeliver a Delivery for a Webhook"
    url = "/repos/{owner}/{repo}/hooks/{hook_id}/deliveries/{delivery_id}/attempts"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Redeliver_a_Delivery_for_a_Webhook.method,
                Redeliver_a_Delivery_for_a_Webhook.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = (
                f"Error running function 'Redeliver_a_Delivery_for_a_Webhook': {str(e)}"
            )
            logging.error(error_msg)
            raise ValueError(error_msg)


class Ping_a_Webhook(BaseFunction):
    """"""

    name = "Ping a Webhook"
    url = "/repos/{owner}/{repo}/hooks/{hook_id}/pings"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Ping_a_Webhook.method, Ping_a_Webhook.url, input_data.validated_data
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Ping_a_Webhook': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Test_a_Webhook(BaseFunction):
    """"""

    name = "Test a Webhook"
    url = "/repos/{owner}/{repo}/hooks/{hook_id}/tests"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Test_a_Webhook.method, Test_a_Webhook.url, input_data.validated_data
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Test_a_Webhook': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class List_Repository_Languages(BaseFunction):
    """"""

    name = "List Repository Languages"
    url = "/repos/{owner}/{repo}/languages"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                List_Repository_Languages.method,
                List_Repository_Languages.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'List_Repository_Languages': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Check_if_Private_Vulnerability_Reporting_is_Enabled_for_a_Repository(
    BaseFunction
):
    """"""

    name = "Check if Private Vulnerability Reporting is Enabled for a Repository"
    url = "/repos/{owner}/{repo}/private-vulnerability-reporting"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Check_if_Private_Vulnerability_Reporting_is_Enabled_for_a_Repository.method,
                Check_if_Private_Vulnerability_Reporting_is_Enabled_for_a_Repository.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Check_if_Private_Vulnerability_Reporting_is_Enabled_for_a_Repository': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Enable_Private_Vulnerability_Reporting_for_a_Repository(BaseFunction):
    """"""

    name = "Enable Private Vulnerability Reporting for a Repository"
    url = "/repos/{owner}/{repo}/private-vulnerability-reporting"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Enable_Private_Vulnerability_Reporting_for_a_Repository.method,
                Enable_Private_Vulnerability_Reporting_for_a_Repository.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Enable_Private_Vulnerability_Reporting_for_a_Repository': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Disable_Private_Vulnerability_Reporting_for_a_Repository(BaseFunction):
    """"""

    name = "Disable Private Vulnerability Reporting for a Repository"
    url = "/repos/{owner}/{repo}/private-vulnerability-reporting"
    args_in_url = True
    method = DELETE

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Disable_Private_Vulnerability_Reporting_for_a_Repository.method,
                Disable_Private_Vulnerability_Reporting_for_a_Repository.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Disable_Private_Vulnerability_Reporting_for_a_Repository': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Get_Repository_Content_with_Path(BaseFunction):
    """"""

    name = "Get Repository Content with Path"
    url = "/repos/{owner}/{repo}/contents/{path}"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Get_Repository_Content_with_Path.method,
                Get_Repository_Content_with_Path.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = (
                f"Error running function 'Get_Repository_Content_with_Path': {str(e)}"
            )
            logging.error(error_msg)
            raise ValueError(error_msg)


class Create_or_Update_File_Contents_in_a_Repository_with_Path(BaseFunction):
    """"""

    name = "Create or Update File Contents in a Repository with Path"
    url = "/repos/{owner}/{repo}/contents/{path}"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Create_or_Update_File_Contents_in_a_Repository_with_Path.method,
                Create_or_Update_File_Contents_in_a_Repository_with_Path.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Create_or_Update_File_Contents_in_a_Repository_with_Path': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Delete_a_File_in_a_Repository_with_Path(BaseFunction):
    """"""

    name = "Delete a File in a Repository with Path"
    url = "/repos/{owner}/{repo}/contents/{path}"
    args_in_url = True
    method = DELETE

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Delete_a_File_in_a_Repository_with_Path.method,
                Delete_a_File_in_a_Repository_with_Path.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Delete_a_File_in_a_Repository_with_Path': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class List_Repository_Contributors(BaseFunction):
    """"""

    name = "List Repository Contributors"
    url = "/repos/{owner}/{repo}/contributors"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                List_Repository_Contributors.method,
                List_Repository_Contributors.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = (
                f"Error running function 'List_Repository_Contributors': {str(e)}"
            )
            logging.error(error_msg)
            raise ValueError(error_msg)


class Create_a_Repository_Dispatch_Event(BaseFunction):
    """"""

    name = "Create a Repository Dispatch Event"
    url = "/repos/{owner}/{repo}/dispatches"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Create_a_Repository_Dispatch_Event.method,
                Create_a_Repository_Dispatch_Event.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = (
                f"Error running function 'Create_a_Repository_Dispatch_Event': {str(e)}"
            )
            logging.error(error_msg)
            raise ValueError(error_msg)


class List_Repository_Forks(BaseFunction):
    """"""

    name = "List Repository Forks"
    url = "/repos/{owner}/{repo}/forks"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                List_Repository_Forks.method,
                List_Repository_Forks.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'List_Repository_Forks': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Create_a_Fork_of_a_Repository(BaseFunction):
    """"""

    name = "Create a Fork of a Repository"
    url = "/repos/{owner}/{repo}/forks"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Create_a_Fork_of_a_Repository.method,
                Create_a_Fork_of_a_Repository.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = (
                f"Error running function 'Create_a_Fork_of_a_Repository': {str(e)}"
            )
            logging.error(error_msg)
            raise ValueError(error_msg)


class List_Repository_Webhooks(BaseFunction):
    """"""

    name = "List Repository Webhooks"
    url = "/repos/{owner}/{repo}/hooks"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                List_Repository_Webhooks.method,
                List_Repository_Webhooks.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'List_Repository_Webhooks': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Create_a_Repository_Webhook(BaseFunction):
    """"""

    name = "Create a Repository Webhook"
    url = "/repos/{owner}/{repo}/hooks"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Create_a_Repository_Webhook.method,
                Create_a_Repository_Webhook.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = (
                f"Error running function 'Create_a_Repository_Webhook': {str(e)}"
            )
            logging.error(error_msg)
            raise ValueError(error_msg)


class Get_a_Repository_Webhook(BaseFunction):
    """"""

    name = "Get a Repository Webhook"
    url = "/repos/{owner}/{repo}/hooks/{hook_id}"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Get_a_Repository_Webhook.method,
                Get_a_Repository_Webhook.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_a_Repository_Webhook': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Update_a_Repository_Webhook(BaseFunction):
    """"""

    name = "Update a Repository Webhook"
    url = "/repos/{owner}/{repo}/hooks/{hook_id}"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Update_a_Repository_Webhook.method,
                Update_a_Repository_Webhook.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = (
                f"Error running function 'Update_a_Repository_Webhook': {str(e)}"
            )
            logging.error(error_msg)
            raise ValueError(error_msg)


class Delete_a_Repository_Webhook(BaseFunction):
    """"""

    name = "Delete a Repository Webhook"
    url = "/repos/{owner}/{repo}/hooks/{hook_id}"
    args_in_url = True
    method = DELETE

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Delete_a_Repository_Webhook.method,
                Delete_a_Repository_Webhook.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = (
                f"Error running function 'Delete_a_Repository_Webhook': {str(e)}"
            )
            logging.error(error_msg)
            raise ValueError(error_msg)


class Get_Webhook_Configuration_for_a_Repository(BaseFunction):
    """"""

    name = "Get Webhook Configuration for a Repository"
    url = "/repos/{owner}/{repo}/hooks/{hook_id}/config"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Get_Webhook_Configuration_for_a_Repository.method,
                Get_Webhook_Configuration_for_a_Repository.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_Webhook_Configuration_for_a_Repository': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Update_Webhook_Configuration_for_a_Repository(BaseFunction):
    """"""

    name = "Update Webhook Configuration for a Repository"
    url = "/repos/{owner}/{repo}/hooks/{hook_id}/config"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Update_Webhook_Configuration_for_a_Repository.method,
                Update_Webhook_Configuration_for_a_Repository.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Update_Webhook_Configuration_for_a_Repository': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class List_Deliveries_for_a_Repository_Webhook(BaseFunction):
    """"""

    name = "List Deliveries for a Repository Webhook"
    url = "/repos/{owner}/{repo}/hooks/{hook_id}/deliveries"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                List_Deliveries_for_a_Repository_Webhook.method,
                List_Deliveries_for_a_Repository_Webhook.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'List_Deliveries_for_a_Repository_Webhook': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Get_a_Delivery_for_a_Repository_Webhook(BaseFunction):
    """"""

    name = "Get a Delivery for a Repository Webhook"
    url = "/repos/{owner}/{repo}/hooks/{hook_id}/deliveries/{delivery_id}"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Get_a_Delivery_for_a_Repository_Webhook.method,
                Get_a_Delivery_for_a_Repository_Webhook.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_a_Delivery_for_a_Repository_Webhook': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Redeliver_a_Delivery_for_a_Repository_Webhook(BaseFunction):
    """"""

    name = "Redeliver a Delivery for a Repository Webhook"
    url = "/repos/{owner}/{repo}/hooks/{hook_id}/deliveries/{delivery_id}/attempts"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Redeliver_a_Delivery_for_a_Repository_Webhook.method,
                Redeliver_a_Delivery_for_a_Repository_Webhook.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Redeliver_a_Delivery_for_a_Repository_Webhook': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Ping_a_Repository_Webhook(BaseFunction):
    """"""

    name = "Ping a Repository Webhook"
    url = "/repos/{owner}/{repo}/hooks/{hook_id}/pings"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Ping_a_Repository_Webhook.method,
                Ping_a_Repository_Webhook.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Ping_a_Repository_Webhook': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Test_a_Repository_Webhook(BaseFunction):
    """"""

    name = "Test a Repository Webhook"
    url = "/repos/{owner}/{repo}/hooks/{hook_id}/tests"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Test_a_Repository_Webhook.method,
                Test_a_Repository_Webhook.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Test_a_Repository_Webhook': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class List_Repository_Languages(BaseFunction):
    """"""

    name = "List Repository Languages"
    url = "/repos/{owner}/{repo}/languages"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                List_Repository_Languages.method,
                List_Repository_Languages.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'List_Repository_Languages': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Check_if_Private_Vulnerability_Reporting_is_Enabled_for_a_Repository(
    BaseFunction
):
    """"""

    name = "Check if Private Vulnerability Reporting is Enabled for a Repository"
    url = "/repos/{owner}/{repo}/private-vulnerability-reporting"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Check_if_Private_Vulnerability_Reporting_is_Enabled_for_a_Repository.method,
                Check_if_Private_Vulnerability_Reporting_is_Enabled_for_a_Repository.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Check_if_Private_Vulnerability_Reporting_is_Enabled_for_a_Repository': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Enable_Private_Vulnerability_Reporting_for_a_Repository(BaseFunction):
    """"""

    name = "Enable Private Vulnerability Reporting for a Repository"
    url = "/repos/{owner}/{repo}/private-vulnerability-reporting"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Enable_Private_Vulnerability_Reporting_for_a_Repository.method,
                Enable_Private_Vulnerability_Reporting_for_a_Repository.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Enable_Private_Vulnerability_Reporting_for_a_Repository': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Disable_Private_Vulnerability_Reporting_for_a_Repository(BaseFunction):
    """"""

    name = "Disable Private Vulnerability Reporting for a Repository"
    url = "/repos/{owner}/{repo}/private-vulnerability-reporting"
    args_in_url = True
    method = DELETE

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Disable_Private_Vulnerability_Reporting_for_a_Repository.method,
                Disable_Private_Vulnerability_Reporting_for_a_Repository.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Disable_Private_Vulnerability_Reporting_for_a_Repository': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Get_organization_insights_API_routestats(BaseFunction):
    """Retrieve API route statistics for a specific actor within an organization."""

    name = "Get organization insights API route-stats"
    url = "https://docs.github.com/en/rest/orgs/api-insights#get-route-stats-by-actor"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="org", param_type=ParameterType.STRING, required=True
            ),  # The organization name.,
            Parameter(
                name="actor_type", param_type=ParameterType.STRING, required=True
            ),  # Type of actor, e.g., 'user' or 'team'.,
            Parameter(
                name="actor_id", param_type=ParameterType.INTEGER, required=True
            ),  # ID of the actor.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="route_stats_by_actor",
                param_type=OutputParameterType.OBJECT,
                is_array=True,
            ),  # List of route statistics objects.
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Get_organization_insights_API_routestats.method,
                Get_organization_insights_API_routestats.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_organization_insights_API_routestats': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Get_organization_insights_subjectstats(BaseFunction):
    """Retrieve subject statistics for an organization."""

    name = "Get organization insights subject-stats"
    url = "https://docs.github.com/en/rest/orgs/api-insights#get-subject-stats"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="org", param_type=ParameterType.STRING, required=True
            ),  # The organization name.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="subject_stats",
                param_type=OutputParameterType.OBJECT,
                is_array=True,
            ),  # List of subject statistics objects.
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Get_organization_insights_subjectstats.method,
                Get_organization_insights_subjectstats.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_organization_insights_subjectstats': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Get_organization_insights_summarystats(BaseFunction):
    """Retrieve summary statistics for an organization."""

    name = "Get organization insights summary-stats"
    url = "https://docs.github.com/en/rest/orgs/api-insights#get-summary-stats"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="org", param_type=ParameterType.STRING, required=True
            ),  # The organization name.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="summary_stats",
                param_type=OutputParameterType.OBJECT,
                is_array=True,
            ),  # List of summary statistics objects.
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Get_organization_insights_summarystats.method,
                Get_organization_insights_summarystats.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_organization_insights_summarystats': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Get_organization_insights_userstats(BaseFunction):
    """Retrieve user-specific statistics within an organization."""

    name = "Get organization insights user-stats"
    url = "https://docs.github.com/en/rest/orgs/api-insights#get-summary-stats-by-user"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="org", param_type=ParameterType.STRING, required=True
            ),  # The organization name.,
            Parameter(
                name="user_id", param_type=ParameterType.INTEGER, required=True
            ),  # User ID.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="user_stats", param_type=OutputParameterType.OBJECT, is_array=True
            ),  # List of user statistics objects.
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Get_organization_insights_userstats.method,
                Get_organization_insights_userstats.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_organization_insights_userstats': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Get_organization_insights_timestats(BaseFunction):
    """Retrieve time-based statistics for an organization."""

    name = "Get organization insights time-stats"
    url = "https://docs.github.com/en/rest/orgs/api-insights#get-time-stats"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="org", param_type=ParameterType.STRING, required=True
            ),  # The organization name.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="time_stats", param_type=OutputParameterType.OBJECT, is_array=True
            ),  # List of time-based statistics objects.
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Get_organization_insights_timestats.method,
                Get_organization_insights_timestats.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_organization_insights_timestats': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Get_organization_insights_timestats_by_user(BaseFunction):
    """Retrieve time-based statistics for a specific user within an organization."""

    name = "Get organization insights time-stats by user"
    url = "https://docs.github.com/en/rest/orgs/api-insights#get-time-stats-by-user"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="org", param_type=ParameterType.STRING, required=True
            ),  # The organization name.,
            Parameter(
                name="user_id", param_type=ParameterType.INTEGER, required=True
            ),  # User ID.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="user_time_stats",
                param_type=OutputParameterType.OBJECT,
                is_array=True,
            ),  # List of time statistics for a user.
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Get_organization_insights_timestats_by_user.method,
                Get_organization_insights_timestats_by_user.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_organization_insights_timestats_by_user': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Get_organization_insights_timestats_by_actor(BaseFunction):
    """Retrieve time-based statistics for a specific actor within an organization."""

    name = "Get organization insights time-stats by actor"
    url = "https://docs.github.com/en/rest/orgs/api-insights#get-time-stats-by-actor"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="org", param_type=ParameterType.STRING, required=True
            ),  # The organization name.,
            Parameter(
                name="actor_type", param_type=ParameterType.STRING, required=True
            ),  # Type of actor, e.g., 'user' or 'team'.,
            Parameter(
                name="actor_id", param_type=ParameterType.INTEGER, required=True
            ),  # ID of the actor.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="actor_time_stats",
                param_type=OutputParameterType.OBJECT,
                is_array=True,
            ),  # List of time statistics by actor.
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Get_organization_insights_timestats_by_actor.method,
                Get_organization_insights_timestats_by_actor.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_organization_insights_timestats_by_actor': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Get_organization_insights_userstats_details(BaseFunction):
    """Retrieve detailed statistics for a specific user in an organization."""

    name = "Get organization insights user-stats details"
    url = "https://docs.github.com/en/rest/orgs/api-insights#get-user-stats"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="org", param_type=ParameterType.STRING, required=True
            ),  # The organization name.,
            Parameter(
                name="user_id", param_type=ParameterType.INTEGER, required=True
            ),  # User ID.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="user_stats_details",
                param_type=OutputParameterType.OBJECT,
                is_array=True,
            ),  # Detailed user statistics.
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Get_organization_insights_userstats_details.method,
                Get_organization_insights_userstats_details.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_organization_insights_userstats_details': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Get_organization_insights_team_metrics(BaseFunction):
    """Retrieve metrics for a specific team within an organization."""

    name = "Get organization insights team metrics"
    url = "https://docs.github.com/en/rest/orgs/api-insights#get-team-metrics"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="org", param_type=ParameterType.STRING, required=True
            ),  # The organization name.,
            Parameter(
                name="team_slug", param_type=ParameterType.STRING, required=True
            ),  # Slug of the team.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="team_metrics",
                param_type=OutputParameterType.OBJECT,
                is_array=True,
            ),  # List of team metrics objects.
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Get_organization_insights_team_metrics.method,
                Get_organization_insights_team_metrics.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_organization_insights_team_metrics': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Update_organization_details(BaseFunction):
    """Update the details of a specified organization."""

    name = "Update organization details"
    url = "https://docs.github.com/en/rest/orgs#update-an-organization"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="org", param_type=ParameterType.STRING, required=True
            ),  # The organization name.,
            Parameter(
                name="data", param_type=OutputParameterType.OBJECT, required=True
            ),  # Organization update payload, e.g., {"name": "new name", "description": "description"}
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="organization",
                param_type=OutputParameterType.OBJECT,
                is_array=False,
            ),  # Updated organization details.
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Update_organization_details.method,
                Update_organization_details.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = (
                f"Error running function 'Update_organization_details': {str(e)}"
            )
            logging.error(error_msg)
            raise ValueError(error_msg)


class Delete_organization(BaseFunction):
    """Delete an organization."""

    name = "Delete organization"
    url = "https://docs.github.com/en/rest/orgs#delete-an-organization"
    args_in_url = True
    method = DELETE

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="org", param_type=ParameterType.STRING, required=True
            ),  # The organization name.
        ]

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Delete_organization.method,
                Delete_organization.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Delete_organization': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Create_a_new_organization(BaseFunction):
    """Create a new organization."""

    name = "Create a new organization"
    url = "https://docs.github.com/en/rest/orgs#create-an-organization"
    args_in_url = False
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="data", param_type=OutputParameterType.OBJECT, required=True
            ),  # Payload for creating a new organization, e.g., {"name": "org name"}
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="organization",
                param_type=OutputParameterType.OBJECT,
                is_array=False,
            ),  # Details of the newly created organization.
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Create_a_new_organization.method,
                Create_a_new_organization.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Create_a_new_organization': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class List_organization_repositories(BaseFunction):
    """List repositories for an organization."""

    name = "List organization repositories"
    url = "https://docs.github.com/en/rest/orgs#list-organization-repositories"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="org", param_type=ParameterType.STRING, required=True
            ),  # Organization name.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="repositories",
                param_type=OutputParameterType.OBJECT,
                is_array=True,
            ),  # List of repositories.
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                List_organization_repositories.method,
                List_organization_repositories.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = (
                f"Error running function 'List_organization_repositories': {str(e)}"
            )
            logging.error(error_msg)
            raise ValueError(error_msg)


class POST_orgsorgpersonalaccesstokenrequests(BaseFunction):
    """Endpoint to review requests for personal access tokens in an organization."""

    name = "POST /orgs/{org}/personal-access-token-requests"
    url = "https://docs.github.com/en/rest/orgs/personal-access-tokens#review-requests-to-access-organization-resources-with-fine-grained-personal-access-tokens"
    args_in_url = True
    method = INSERT

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="org", param_type=ParameterType.STRING, required=True
            ),  # Organization name
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="status", param_type=OutputParameterType.STRING, is_array=False
            ),  # Operation status
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                POST_orgsorgpersonalaccesstokenrequests.method,
                POST_orgsorgpersonalaccesstokenrequests.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'POST_orgsorgpersonalaccesstokenrequests': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class POST_orgsorgpersonalaccesstokenrequestspat_request_id(BaseFunction):
    """Endpoint to approve or reject a specific personal access token request in an organization."""

    name = "POST /orgs/{org}/personal-access-token-requests/{pat_request_id}"
    url = "https://docs.github.com/en/rest/orgs/personal-access-tokens#review-a-request-to-access-organization-resources-with-a-fine-grained-personal-access-token"
    args_in_url = True
    method = INSERT

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="org", param_type=ParameterType.STRING, required=True
            ),  # Organization name,
            Parameter(
                name="pat_request_id", param_type=ParameterType.STRING, required=True
            ),  # Personal access token request ID
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="review_result",
                param_type=OutputParameterType.STRING,
                is_array=False,
            ),  # Result of the review process
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                POST_orgsorgpersonalaccesstokenrequestspat_request_id.method,
                POST_orgsorgpersonalaccesstokenrequestspat_request_id.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'POST_orgsorgpersonalaccesstokenrequestspat_request_id': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class GET_orgsorgpersonalaccesstokenrequests(BaseFunction):
    """Retrieve a list of all personal access token requests for an organization."""

    name = "GET /orgs/{org}/personal-access-token-requests"
    url = "https://docs.github.com/en/rest/orgs/personal-access-tokens#list-requests-to-access-organization-resources-with-fine-grained-personal-access-tokens"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="org", param_type=ParameterType.STRING, required=True
            ),  # Organization name
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="requests", param_type=OutputParameterType.OBJECT, is_array=True
            ),  # List of token requests
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                GET_orgsorgpersonalaccesstokenrequests.method,
                GET_orgsorgpersonalaccesstokenrequests.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'GET_orgsorgpersonalaccesstokenrequests': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class GET_orgsorgpersonalaccesstokenrequestspat_request_idrepositories(BaseFunction):
    """List repositories requested in a personal access token request."""

    name = (
        "GET /orgs/{org}/personal-access-token-requests/{pat_request_id}/repositories"
    )
    url = "https://docs.github.com/en/rest/orgs/personal-access-tokens#list-repositories-requested-to-be-accessed-by-a-fine-grained-personal-access-token"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="org", param_type=ParameterType.STRING, required=True
            ),  # Organization name,
            Parameter(
                name="pat_request_id", param_type=ParameterType.STRING, required=True
            ),  # Personal access token request ID
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="repositories",
                param_type=OutputParameterType.STRING,
                is_array=True,
            ),  # List of repository names requested for access
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                GET_orgsorgpersonalaccesstokenrequestspat_request_idrepositories.method,
                GET_orgsorgpersonalaccesstokenrequestspat_request_idrepositories.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'GET_orgsorgpersonalaccesstokenrequestspat_request_idrepositories': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class POST_orgsorgpersonalaccesstokens(BaseFunction):
    """Create or update organization personal access tokens."""

    name = "POST /orgs/{org}/personal-access-tokens"
    url = "https://docs.github.com/en/rest/orgs/personal-access-tokens#update-the-access-to-organization-resources-via-fine-grained-personal-access-tokens"
    args_in_url = True
    method = INSERT

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="org", param_type=ParameterType.STRING, required=True
            ),  # Organization name
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="tokens", param_type=OutputParameterType.STRING, is_array=True
            ),  # List of personal access tokens
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                POST_orgsorgpersonalaccesstokens.method,
                POST_orgsorgpersonalaccesstokens.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = (
                f"Error running function 'POST_orgsorgpersonalaccesstokens': {str(e)}"
            )
            logging.error(error_msg)
            raise ValueError(error_msg)


class POST_orgsorgpersonalaccesstokenspat_id(BaseFunction):
    """Update a specific organization personal access token."""

    name = "POST /orgs/{org}/personal-access-tokens/{pat_id}"
    url = "https://docs.github.com/en/rest/orgs/personal-access-tokens#update-the-access-a-fine-grained-personal-access-token-has-to-organization-resources"
    args_in_url = True
    method = INSERT

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="org", param_type=ParameterType.STRING, required=True
            ),  # Organization name,
            Parameter(
                name="pat_id", param_type=ParameterType.STRING, required=True
            ),  # Personal access token ID
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="token_details",
                param_type=OutputParameterType.OBJECT,
                is_array=False,
            ),  # Details of the specified token
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                POST_orgsorgpersonalaccesstokenspat_id.method,
                POST_orgsorgpersonalaccesstokenspat_id.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'POST_orgsorgpersonalaccesstokenspat_id': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class GET_orgsorgpersonalaccesstokens(BaseFunction):
    """List all fine-grained personal access tokens with access to organization resources."""

    name = "GET /orgs/{org}/personal-access-tokens"
    url = "https://docs.github.com/en/rest/orgs/personal-access-tokens#list-fine-grained-personal-access-tokens-with-access-to-organization-resources"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="org", param_type=ParameterType.STRING, required=True
            ),  # Organization name
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="tokens", param_type=OutputParameterType.OBJECT, is_array=True
            ),  # List of personal access tokens with details
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                GET_orgsorgpersonalaccesstokens.method,
                GET_orgsorgpersonalaccesstokens.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = (
                f"Error running function 'GET_orgsorgpersonalaccesstokens': {str(e)}"
            )
            logging.error(error_msg)
            raise ValueError(error_msg)


class GET_orgsorgpersonalaccesstokenspat_idrepositories(BaseFunction):
    """Retrieve repositories accessible by a specific fine-grained personal access token."""

    name = "GET /orgs/{org}/personal-access-tokens/{pat_id}/repositories"
    url = "https://docs.github.com/en/rest/orgs/personal-access-tokens#list-repositories-a-fine-grained-personal-access-token-has-access-to"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="org", param_type=ParameterType.STRING, required=True
            ),  # Organization name,
            Parameter(
                name="pat_id", param_type=ParameterType.STRING, required=True
            ),  # Personal access token ID
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="repositories",
                param_type=OutputParameterType.STRING,
                is_array=True,
            ),  # Repositories accessible by the token
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                GET_orgsorgpersonalaccesstokenspat_idrepositories.method,
                GET_orgsorgpersonalaccesstokenspat_idrepositories.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'GET_orgsorgpersonalaccesstokenspat_idrepositories': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class PUT_orgsorgteamsteam_slugprojectsproject_id(BaseFunction):
    """Add or update permissions for a team on a project."""

    name = "PUT /orgs/{org}/teams/{team_slug}/projects/{project_id}"
    url = "https://docs.github.com/en/rest/teams/teams#add-or-update-team-project-permissions"
    args_in_url = True
    method = UPDATE

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="org", param_type=ParameterType.STRING, required=True
            ),  # Organization name,
            Parameter(
                name="team_slug", param_type=ParameterType.STRING, required=True
            ),  # Slug name of the team,
            Parameter(
                name="project_id", param_type=ParameterType.INTEGER, required=True
            ),  # Project ID
        ]

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                PUT_orgsorgteamsteam_slugprojectsproject_id.method,
                PUT_orgsorgteamsteam_slugprojectsproject_id.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'PUT_orgsorgteamsteam_slugprojectsproject_id': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class DELETE_orgsorgteamsteam_slugprojectsproject_id(BaseFunction):
    """Remove a project from a team."""

    name = "DELETE /orgs/{org}/teams/{team_slug}/projects/{project_id}"
    url = "https://docs.github.com/en/rest/teams/teams#remove-a-project-from-a-team"
    args_in_url = True
    method = DELETE

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="org", param_type=ParameterType.STRING, required=True
            ),  # Organization name,
            Parameter(
                name="team_slug", param_type=ParameterType.STRING, required=True
            ),  # Slug name of the team,
            Parameter(
                name="project_id", param_type=ParameterType.INTEGER, required=True
            ),  # Project ID
        ]

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                DELETE_orgsorgteamsteam_slugprojectsproject_id.method,
                DELETE_orgsorgteamsteam_slugprojectsproject_id.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'DELETE_orgsorgteamsteam_slugprojectsproject_id': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class GET_projectsproject_idcollaborators(BaseFunction):
    """List collaborators on a project."""

    name = "GET /projects/{project_id}/collaborators"
    url = "https://docs.github.com/en/rest/projects/collaborators#list-project-collaborators"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="project_id", param_type=ParameterType.INTEGER, required=True
            ),  # Project ID
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="collaborators",
                param_type=OutputParameterType.STRING,
                is_array=True,
            ),  # List of project collaborators
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                GET_projectsproject_idcollaborators.method,
                GET_projectsproject_idcollaborators.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'GET_projectsproject_idcollaborators': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class PUT_projectsproject_idcollaboratorsusername(BaseFunction):
    """Add a collaborator to a project."""

    name = "PUT /projects/{project_id}/collaborators/{username}"
    url = "https://docs.github.com/en/rest/projects/collaborators#add-project-collaborator"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="project_id", param_type=ParameterType.INTEGER, required=True
            ),  # Project ID,
            Parameter(
                name="username", param_type=ParameterType.STRING, required=True
            ),  # GitHub username of the collaborator
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="status", param_type=OutputParameterType.STRING, is_array=False
            ),  # Result of adding collaborator
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                PUT_projectsproject_idcollaboratorsusername.method,
                PUT_projectsproject_idcollaboratorsusername.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'PUT_projectsproject_idcollaboratorsusername': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class DELETE_projectsproject_idcollaboratorsusername(BaseFunction):
    """Remove a collaborator from a project."""

    name = "DELETE /projects/{project_id}/collaborators/{username}"
    url = "https://docs.github.com/en/rest/projects/collaborators#remove-user-as-a-collaborator"
    args_in_url = True
    method = DELETE

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="project_id", param_type=ParameterType.INTEGER, required=True
            ),  # Project ID,
            Parameter(
                name="username", param_type=ParameterType.STRING, required=True
            ),  # GitHub username of the collaborator to remove
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="status", param_type=OutputParameterType.STRING, is_array=False
            ),  # Result of removal
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                DELETE_projectsproject_idcollaboratorsusername.method,
                DELETE_projectsproject_idcollaboratorsusername.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'DELETE_projectsproject_idcollaboratorsusername': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class GET_projectsproject_idcollaboratorsusernamepermission(BaseFunction):
    """Get permission for a user on a project."""

    name = "GET /projects/{project_id}/collaborators/{username}/permission"
    url = "https://docs.github.com/en/rest/projects/collaborators#get-project-permission-for-a-user"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="project_id", param_type=ParameterType.INTEGER, required=True
            ),  # Project ID,
            Parameter(
                name="username", param_type=ParameterType.STRING, required=True
            ),  # GitHub username
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="permission", param_type=OutputParameterType.STRING, is_array=False
            ),  # Permission level for the user
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                GET_projectsproject_idcollaboratorsusernamepermission.method,
                GET_projectsproject_idcollaboratorsusernamepermission.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'GET_projectsproject_idcollaboratorsusernamepermission': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class POST_orgsorgprojects(BaseFunction):
    """Create a new project for an organization."""

    name = "POST /orgs/{org}/projects"
    url = "https://docs.github.com/en/rest/projects/projects#create-an-organization-project"
    args_in_url = True
    method = INSERT

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="org", param_type=ParameterType.STRING, required=True
            ),  # Organization name,
            Parameter(
                name="name", param_type=ParameterType.STRING, required=True
            ),  # Name of the new project
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="project", param_type=OutputParameterType.OBJECT, is_array=False
            ),  # Created project details
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                POST_orgsorgprojects.method,
                POST_orgsorgprojects.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'POST_orgsorgprojects': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class PATCH_projectsproject_id(BaseFunction):
    """Update a project."""

    name = "PATCH /projects/{project_id}"
    url = "https://docs.github.com/en/rest/projects/projects#update-a-project"
    args_in_url = True
    method = UPDATE

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="project_id", param_type=ParameterType.INTEGER, required=True
            ),  # Project ID
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="project", param_type=OutputParameterType.OBJECT, is_array=False
            ),  # Updated project details
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                PATCH_projectsproject_id.method,
                PATCH_projectsproject_id.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'PATCH_projectsproject_id': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class DELETE_projectsproject_id(BaseFunction):
    """Delete a project."""

    name = "DELETE /projects/{project_id}"
    url = "https://docs.github.com/en/rest/projects/projects#delete-a-project"
    args_in_url = True
    method = DELETE

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="project_id", param_type=ParameterType.INTEGER, required=True
            ),  # Project ID
        ]

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                DELETE_projectsproject_id.method,
                DELETE_projectsproject_id.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'DELETE_projectsproject_id': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class POST_projectsproject_idcolumns(BaseFunction):
    """Create a column in a project."""

    name = "POST /projects/{project_id}/columns"
    url = "https://docs.github.com/en/rest/projects/columns#create-a-project-column"
    args_in_url = True
    method = INSERT

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="project_id", param_type=ParameterType.INTEGER, required=True
            ),  # Project ID,
            Parameter(
                name="name", param_type=ParameterType.STRING, required=True
            ),  # Name of the column
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="column", param_type=OutputParameterType.OBJECT, is_array=False
            ),  # Created column details
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                POST_projectsproject_idcolumns.method,
                POST_projectsproject_idcolumns.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = (
                f"Error running function 'POST_projectsproject_idcolumns': {str(e)}"
            )
            logging.error(error_msg)
            raise ValueError(error_msg)


class GET_orgsorgprojects(BaseFunction):
    """List organization projects."""

    name = "GET /orgs/{org}/projects"
    url = "https://docs.github.com/en/rest/projects/projects#list-organization-projects"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="org", param_type=ParameterType.STRING, required=True
            ),  # Organization name
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="projects", param_type=OutputParameterType.OBJECT, is_array=True
            ),  # List of projects
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                GET_orgsorgprojects.method,
                GET_orgsorgprojects.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'GET_orgsorgprojects': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class GET_projectsproject_id(BaseFunction):
    """Get a project."""

    name = "GET /projects/{project_id}"
    url = "https://docs.github.com/en/rest/projects/projects#get-a-project"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="project_id", param_type=ParameterType.INTEGER, required=True
            ),  # Project ID
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="project", param_type=OutputParameterType.OBJECT, is_array=False
            ),  # Project details
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                GET_projectsproject_id.method,
                GET_projectsproject_id.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'GET_projectsproject_id': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class GET_projectsproject_idcolumns(BaseFunction):
    """List columns in a project."""

    name = "GET /projects/{project_id}/columns"
    url = "https://docs.github.com/en/rest/projects/columns#list-project-columns"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="project_id", param_type=ParameterType.INTEGER, required=True
            ),  # Project ID
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="columns", param_type=OutputParameterType.OBJECT, is_array=True
            ),  # List of columns
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                GET_projectsproject_idcolumns.method,
                GET_projectsproject_idcolumns.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = (
                f"Error running function 'GET_projectsproject_idcolumns': {str(e)}"
            )
            logging.error(error_msg)
            raise ValueError(error_msg)


class GET_projectsproject_idcolumnscolumn_id(BaseFunction):
    """Get a project column."""

    name = "GET /projects/{project_id}/columns/{column_id}"
    url = "https://docs.github.com/en/rest/projects/columns#get-a-project-column"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="project_id", param_type=ParameterType.INTEGER, required=True
            ),  # Project ID,
            Parameter(
                name="column_id", param_type=ParameterType.INTEGER, required=True
            ),  # Column ID
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="column", param_type=OutputParameterType.OBJECT, is_array=False
            ),  # Column details
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                GET_projectsproject_idcolumnscolumn_id.method,
                GET_projectsproject_idcolumnscolumn_id.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'GET_projectsproject_idcolumnscolumn_id': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class GET_projectsproject_idcolumnscolumn_idcards(BaseFunction):
    """List project cards in a column."""

    name = "GET /projects/{project_id}/columns/{column_id}/cards"
    url = "https://docs.github.com/en/rest/projects/cards#list-project-cards"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="project_id", param_type=ParameterType.INTEGER, required=True
            ),  # Project ID,
            Parameter(
                name="column_id", param_type=ParameterType.INTEGER, required=True
            ),  # Column ID
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="cards", param_type=OutputParameterType.OBJECT, is_array=True
            ),  # List of cards
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                GET_projectsproject_idcolumnscolumn_idcards.method,
                GET_projectsproject_idcolumnscolumn_idcards.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'GET_projectsproject_idcolumnscolumn_idcards': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class GET_projectsproject_idcollaborators(BaseFunction):
    """List collaborators on a project."""

    name = "GET /projects/{project_id}/collaborators"
    url = "https://docs.github.com/en/rest/projects/collaborators#list-project-collaborators"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="project_id", param_type=ParameterType.INTEGER, required=True
            ),  # Project ID
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="collaborators",
                param_type=OutputParameterType.STRING,
                is_array=True,
            ),  # List of collaborators
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                GET_projectsproject_idcollaborators.method,
                GET_projectsproject_idcollaborators.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'GET_projectsproject_idcollaborators': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class PUT_projectsproject_idcollaboratorsusername(BaseFunction):
    """Add a collaborator to a project."""

    name = "PUT /projects/{project_id}/collaborators/{username}"
    url = "https://docs.github.com/en/rest/projects/collaborators#add-project-collaborator"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="project_id", param_type=ParameterType.INTEGER, required=True
            ),  # Project ID,
            Parameter(
                name="username", param_type=ParameterType.STRING, required=True
            ),  # GitHub username of the collaborator
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="status", param_type=OutputParameterType.STRING, is_array=False
            ),  # Result of adding collaborator
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                PUT_projectsproject_idcollaboratorsusername.method,
                PUT_projectsproject_idcollaboratorsusername.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'PUT_projectsproject_idcollaboratorsusername': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class DELETE_projectsproject_idcollaboratorsusername(BaseFunction):
    """Remove a collaborator from a project."""

    name = "DELETE /projects/{project_id}/collaborators/{username}"
    url = "https://docs.github.com/en/rest/projects/collaborators#remove-user-as-a-collaborator"
    args_in_url = True
    method = DELETE

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="project_id", param_type=ParameterType.INTEGER, required=True
            ),  # Project ID,
            Parameter(
                name="username", param_type=ParameterType.STRING, required=True
            ),  # GitHub username of the collaborator to remove
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="status", param_type=OutputParameterType.STRING, is_array=False
            ),  # Result of removal
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                DELETE_projectsproject_idcollaboratorsusername.method,
                DELETE_projectsproject_idcollaboratorsusername.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'DELETE_projectsproject_idcollaboratorsusername': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class GET_projectsproject_idcollaboratorsusernamepermission(BaseFunction):
    """Get a user's permission level for a project."""

    name = "GET /projects/{project_id}/collaborators/{username}/permission"
    url = "https://docs.github.com/en/rest/projects/collaborators#get-project-permission-for-a-user"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="project_id", param_type=ParameterType.INTEGER, required=True
            ),  # Project ID,
            Parameter(
                name="username", param_type=ParameterType.STRING, required=True
            ),  # GitHub username
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="permission", param_type=OutputParameterType.STRING, is_array=False
            ),  # Permission level for the user
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                GET_projectsproject_idcollaboratorsusernamepermission.method,
                GET_projectsproject_idcollaboratorsusernamepermission.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'GET_projectsproject_idcollaboratorsusernamepermission': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class POST_orgsorgprojects(BaseFunction):
    """Create a new project within an organization."""

    name = "POST /orgs/{org}/projects"
    url = "https://docs.github.com/en/rest/projects/projects#create-an-organization-project"
    args_in_url = True
    method = INSERT

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="org", param_type=ParameterType.STRING, required=True
            ),  # Organization name,
            Parameter(
                name="name", param_type=ParameterType.STRING, required=True
            ),  # Name of the new project
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="project", param_type=OutputParameterType.OBJECT, is_array=False
            ),  # Created project details
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                POST_orgsorgprojects.method,
                POST_orgsorgprojects.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'POST_orgsorgprojects': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class PATCH_projectsproject_id(BaseFunction):
    """Update an existing project."""

    name = "PATCH /projects/{project_id}"
    url = "https://docs.github.com/en/rest/projects/projects#update-a-project"
    args_in_url = True
    method = UPDATE

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="project_id", param_type=ParameterType.INTEGER, required=True
            ),  # Project ID
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="project", param_type=OutputParameterType.OBJECT, is_array=False
            ),  # Updated project details
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                PATCH_projectsproject_id.method,
                PATCH_projectsproject_id.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'PATCH_projectsproject_id': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class DELETE_projectsproject_id(BaseFunction):
    """Delete a project."""

    name = "DELETE /projects/{project_id}"
    url = "https://docs.github.com/en/rest/projects/projects#delete-a-project"
    args_in_url = True
    method = DELETE

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="project_id", param_type=ParameterType.INTEGER, required=True
            ),  # Project ID
        ]

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                DELETE_projectsproject_id.method,
                DELETE_projectsproject_id.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'DELETE_projectsproject_id': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class POST_projectsproject_idcolumns(BaseFunction):
    """Create a column in a project."""

    name = "POST /projects/{project_id}/columns"
    url = "https://docs.github.com/en/rest/projects/columns#create-a-project-column"
    args_in_url = True
    method = INSERT

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="project_id", param_type=ParameterType.INTEGER, required=True
            ),  # Project ID,
            Parameter(
                name="name", param_type=ParameterType.STRING, required=True
            ),  # Name of the column
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="column", param_type=OutputParameterType.OBJECT, is_array=False
            ),  # Created column details
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                POST_projectsproject_idcolumns.method,
                POST_projectsproject_idcolumns.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = (
                f"Error running function 'POST_projectsproject_idcolumns': {str(e)}"
            )
            logging.error(error_msg)
            raise ValueError(error_msg)


class GET_orgsorgprojects(BaseFunction):
    """List organization projects."""

    name = "GET /orgs/{org}/projects"
    url = "https://docs.github.com/en/rest/projects/projects#list-organization-projects"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="org", param_type=ParameterType.STRING, required=True
            ),  # Organization name
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="projects", param_type=OutputParameterType.OBJECT, is_array=True
            ),  # List of projects
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                GET_orgsorgprojects.method,
                GET_orgsorgprojects.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'GET_orgsorgprojects': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class GET_projectsproject_id(BaseFunction):
    """Get a specific project."""

    name = "GET /projects/{project_id}"
    url = "https://docs.github.com/en/rest/projects/projects#get-a-project"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="project_id", param_type=ParameterType.INTEGER, required=True
            ),  # Project ID
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="project", param_type=OutputParameterType.OBJECT, is_array=False
            ),  # Project details
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                GET_projectsproject_id.method,
                GET_projectsproject_id.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'GET_projectsproject_id': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class GET_projectsproject_idcolumns(BaseFunction):
    """List columns for a project."""

    name = "GET /projects/{project_id}/columns"
    url = "https://docs.github.com/en/rest/projects/columns#list-project-columns"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="project_id", param_type=ParameterType.INTEGER, required=True
            ),  # Project ID
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="columns", param_type=OutputParameterType.OBJECT, is_array=True
            ),  # List of columns in the project
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                GET_projectsproject_idcolumns.method,
                GET_projectsproject_idcolumns.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = (
                f"Error running function 'GET_projectsproject_idcolumns': {str(e)}"
            )
            logging.error(error_msg)
            raise ValueError(error_msg)


class GET_projectsproject_idcolumnscolumn_id(BaseFunction):
    """Get details of a specific project column."""

    name = "GET /projects/{project_id}/columns/{column_id}"
    url = "https://docs.github.com/en/rest/projects/columns#get-a-project-column"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="project_id", param_type=ParameterType.INTEGER, required=True
            ),  # Project ID,
            Parameter(
                name="column_id", param_type=ParameterType.INTEGER, required=True
            ),  # Column ID
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="column", param_type=OutputParameterType.OBJECT, is_array=False
            ),  # Column details
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                GET_projectsproject_idcolumnscolumn_id.method,
                GET_projectsproject_idcolumnscolumn_id.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'GET_projectsproject_idcolumnscolumn_id': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class GET_projectsproject_idcolumnscolumn_idcards(BaseFunction):
    """List project cards within a column."""

    name = "GET /projects/{project_id}/columns/{column_id}/cards"
    url = "https://docs.github.com/en/rest/projects/cards#list-project-cards"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="project_id", param_type=ParameterType.INTEGER, required=True
            ),  # Project ID,
            Parameter(
                name="column_id", param_type=ParameterType.INTEGER, required=True
            ),  # Column ID
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="cards", param_type=OutputParameterType.OBJECT, is_array=True
            ),  # List of project cards
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                GET_projectsproject_idcolumnscolumn_idcards.method,
                GET_projectsproject_idcolumnscolumn_idcards.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'GET_projectsproject_idcolumnscolumn_idcards': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class GET_projectsproject_idcollaborators(BaseFunction):
    """Get collaborators on a project."""

    name = "GET /projects/{project_id}/collaborators"
    url = "https://docs.github.com/en/rest/projects/collaborators#list-project-collaborators"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="project_id", param_type=ParameterType.INTEGER, required=True
            ),  # Project ID
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="collaborators",
                param_type=OutputParameterType.STRING,
                is_array=True,
            ),  # List of collaborators
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                GET_projectsproject_idcollaborators.method,
                GET_projectsproject_idcollaborators.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'GET_projectsproject_idcollaborators': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class PUT_projectsproject_idcollaboratorsusername(BaseFunction):
    """Add a collaborator to a project."""

    name = "PUT /projects/{project_id}/collaborators/{username}"
    url = "https://docs.github.com/en/rest/projects/collaborators#add-project-collaborator"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="project_id", param_type=ParameterType.INTEGER, required=True
            ),  # Project ID,
            Parameter(
                name="username", param_type=ParameterType.STRING, required=True
            ),  # GitHub username of the collaborator
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="status", param_type=OutputParameterType.STRING, is_array=False
            ),  # Result of adding collaborator
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                PUT_projectsproject_idcollaboratorsusername.method,
                PUT_projectsproject_idcollaboratorsusername.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'PUT_projectsproject_idcollaboratorsusername': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class DELETE_projectsproject_idcollaboratorsusername(BaseFunction):
    """Remove a collaborator from a project."""

    name = "DELETE /projects/{project_id}/collaborators/{username}"
    url = "https://docs.github.com/en/rest/projects/collaborators#remove-user-as-a-collaborator"
    args_in_url = True
    method = DELETE

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="project_id", param_type=ParameterType.INTEGER, required=True
            ),  # Project ID,
            Parameter(
                name="username", param_type=ParameterType.STRING, required=True
            ),  # GitHub username of the collaborator to remove
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="status", param_type=OutputParameterType.STRING, is_array=False
            ),  # Result of removal
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                DELETE_projectsproject_idcollaboratorsusername.method,
                DELETE_projectsproject_idcollaboratorsusername.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'DELETE_projectsproject_idcollaboratorsusername': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class GET_projectsproject_idcollaboratorsusernamepermission(BaseFunction):
    """Get a user's permission level on a project."""

    name = "GET /projects/{project_id}/collaborators/{username}/permission"
    url = "https://docs.github.com/en/rest/projects/collaborators#get-project-permission-for-a-user"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="project_id", param_type=ParameterType.INTEGER, required=True
            ),  # Project ID,
            Parameter(
                name="username", param_type=ParameterType.STRING, required=True
            ),  # GitHub username
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="permission", param_type=OutputParameterType.STRING, is_array=False
            ),  # Permission level for the user
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                GET_projectsproject_idcollaboratorsusernamepermission.method,
                GET_projectsproject_idcollaboratorsusernamepermission.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'GET_projectsproject_idcollaboratorsusernamepermission': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class POST_orgsorgprojects(BaseFunction):
    """Create a new project within an organization."""

    name = "POST /orgs/{org}/projects"
    url = "https://docs.github.com/en/rest/projects/projects#create-an-organization-project"
    args_in_url = True
    method = INSERT

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="org", param_type=ParameterType.STRING, required=True
            ),  # Organization name,
            Parameter(
                name="name", param_type=ParameterType.STRING, required=True
            ),  # Name of the project
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="project", param_type=OutputParameterType.OBJECT, is_array=False
            ),  # Created project details
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                POST_orgsorgprojects.method,
                POST_orgsorgprojects.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'POST_orgsorgprojects': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class PATCH_projectsproject_id(BaseFunction):
    """Update a project."""

    name = "PATCH /projects/{project_id}"
    url = "https://docs.github.com/en/rest/projects/projects#update-a-project"
    args_in_url = True
    method = UPDATE

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="project_id", param_type=ParameterType.INTEGER, required=True
            ),  # Project ID
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="project", param_type=OutputParameterType.OBJECT, is_array=False
            ),  # Updated project details
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                PATCH_projectsproject_id.method,
                PATCH_projectsproject_id.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'PATCH_projectsproject_id': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class DELETE_projectsproject_id(BaseFunction):
    """Delete a project."""

    name = "DELETE /projects/{project_id}"
    url = "https://docs.github.com/en/rest/projects/projects#delete-a-project"
    args_in_url = True
    method = DELETE

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="project_id", param_type=ParameterType.INTEGER, required=True
            ),  # Project ID
        ]

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                DELETE_projectsproject_id.method,
                DELETE_projectsproject_id.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'DELETE_projectsproject_id': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class POST_projectsproject_idcolumns(BaseFunction):
    """Create a column in a project."""

    name = "POST /projects/{project_id}/columns"
    url = "https://docs.github.com/en/rest/projects/columns#create-a-project-column"
    args_in_url = True
    method = INSERT

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="project_id", param_type=ParameterType.INTEGER, required=True
            ),  # Project ID,
            Parameter(
                name="name", param_type=ParameterType.STRING, required=True
            ),  # Name of the column
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="column", param_type=OutputParameterType.OBJECT, is_array=False
            ),  # Created column details
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                POST_projectsproject_idcolumns.method,
                POST_projectsproject_idcolumns.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = (
                f"Error running function 'POST_projectsproject_idcolumns': {str(e)}"
            )
            logging.error(error_msg)
            raise ValueError(error_msg)


class GET_orgsorgprojects(BaseFunction):
    """List organization projects."""

    name = "GET /orgs/{org}/projects"
    url = "https://docs.github.com/en/rest/projects/projects#list-organization-projects"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="org", param_type=ParameterType.STRING, required=True
            ),  # Organization name
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="projects", param_type=OutputParameterType.OBJECT, is_array=True
            ),  # List of projects
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                GET_orgsorgprojects.method,
                GET_orgsorgprojects.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'GET_orgsorgprojects': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class GET_projectsproject_id(BaseFunction):
    """Get a specific project."""

    name = "GET /projects/{project_id}"
    url = "https://docs.github.com/en/rest/projects/projects#get-a-project"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="project_id", param_type=ParameterType.INTEGER, required=True
            ),  # Project ID
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="project", param_type=OutputParameterType.OBJECT, is_array=False
            ),  # Project details
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                GET_projectsproject_id.method,
                GET_projectsproject_id.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'GET_projectsproject_id': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class GET_projectsproject_idcolumns(BaseFunction):
    """List columns in a project."""

    name = "GET /projects/{project_id}/columns"
    url = "https://docs.github.com/en/rest/projects/columns#list-project-columns"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="project_id", param_type=ParameterType.INTEGER, required=True
            ),  # Project ID
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="columns", param_type=OutputParameterType.OBJECT, is_array=True
            ),  # List of columns in the project
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                GET_projectsproject_idcolumns.method,
                GET_projectsproject_idcolumns.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = (
                f"Error running function 'GET_projectsproject_idcolumns': {str(e)}"
            )
            logging.error(error_msg)
            raise ValueError(error_msg)


class GET_projectsproject_idcolumnscolumn_id(BaseFunction):
    """Get a project column."""

    name = "GET /projects/{project_id}/columns/{column_id}"
    url = "https://docs.github.com/en/rest/projects/columns#get-a-project-column"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="project_id", param_type=ParameterType.INTEGER, required=True
            ),  # Project ID,
            Parameter(
                name="column_id", param_type=ParameterType.INTEGER, required=True
            ),  # Column ID
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="column", param_type=OutputParameterType.OBJECT, is_array=False
            ),  # Column details
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                GET_projectsproject_idcolumnscolumn_id.method,
                GET_projectsproject_idcolumnscolumn_id.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'GET_projectsproject_idcolumnscolumn_id': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class GET_projectsproject_idcolumnscolumn_idcards(BaseFunction):
    """List project cards in a column."""

    name = "GET /projects/{project_id}/columns/{column_id}/cards"
    url = "https://docs.github.com/en/rest/projects/cards#list-project-cards"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="project_id", param_type=ParameterType.INTEGER, required=True
            ),  # Project ID,
            Parameter(
                name="column_id", param_type=ParameterType.INTEGER, required=True
            ),  # Column ID
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="cards", param_type=OutputParameterType.OBJECT, is_array=True
            ),  # List of project cards
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                GET_projectsproject_idcolumnscolumn_idcards.method,
                GET_projectsproject_idcolumnscolumn_idcards.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'GET_projectsproject_idcolumnscolumn_idcards': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class GET_projectsproject_idcollaborators(BaseFunction):
    """List collaborators on a project."""

    name = "GET /projects/{project_id}/collaborators"
    url = "https://docs.github.com/en/rest/projects/collaborators#list-project-collaborators"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="project_id", param_type=ParameterType.INTEGER, required=True
            ),  # Project ID
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="collaborators",
                param_type=OutputParameterType.STRING,
                is_array=True,
            ),  # List of collaborators
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                GET_projectsproject_idcollaborators.method,
                GET_projectsproject_idcollaborators.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'GET_projectsproject_idcollaborators': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class PUT_projectsproject_idcollaboratorsusername(BaseFunction):
    """Add a collaborator to a project."""

    name = "PUT /projects/{project_id}/collaborators/{username}"
    url = "https://docs.github.com/en/rest/projects/collaborators#add-project-collaborator"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="project_id", param_type=ParameterType.INTEGER, required=True
            ),  # Project ID,
            Parameter(
                name="username", param_type=ParameterType.STRING, required=True
            ),  # GitHub username of the collaborator
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="status", param_type=OutputParameterType.STRING, is_array=False
            ),  # Result of adding collaborator
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                PUT_projectsproject_idcollaboratorsusername.method,
                PUT_projectsproject_idcollaboratorsusername.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'PUT_projectsproject_idcollaboratorsusername': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class DELETE_projectsproject_idcollaboratorsusername(BaseFunction):
    """Remove a collaborator from a project."""

    name = "DELETE /projects/{project_id}/collaborators/{username}"
    url = "https://docs.github.com/en/rest/projects/collaborators#remove-user-as-a-collaborator"
    args_in_url = True
    method = DELETE

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="project_id", param_type=ParameterType.INTEGER, required=True
            ),  # Project ID,
            Parameter(
                name="username", param_type=ParameterType.STRING, required=True
            ),  # GitHub username of the collaborator to remove
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="status", param_type=OutputParameterType.STRING, is_array=False
            ),  # Result of removal
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                DELETE_projectsproject_idcollaboratorsusername.method,
                DELETE_projectsproject_idcollaboratorsusername.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'DELETE_projectsproject_idcollaboratorsusername': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class GET_projectsproject_idcollaboratorsusernamepermission(BaseFunction):
    """Get a user's permission level for a project."""

    name = "GET /projects/{project_id}/collaborators/{username}/permission"
    url = "https://docs.github.com/en/rest/projects/collaborators#get-project-permission-for-a-user"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="project_id", param_type=ParameterType.INTEGER, required=True
            ),  # Project ID,
            Parameter(
                name="username", param_type=ParameterType.STRING, required=True
            ),  # GitHub username
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="permission", param_type=OutputParameterType.STRING, is_array=False
            ),  # Permission level for the user
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                GET_projectsproject_idcollaboratorsusernamepermission.method,
                GET_projectsproject_idcollaboratorsusernamepermission.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'GET_projectsproject_idcollaboratorsusernamepermission': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class POST_orgsorgprojects(BaseFunction):
    """Create a new project for an organization."""

    name = "POST /orgs/{org}/projects"
    url = "https://docs.github.com/en/rest/projects/projects#create-an-organization-project"
    args_in_url = True
    method = INSERT

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="org", param_type=ParameterType.STRING, required=True
            ),  # Organization name,
            Parameter(
                name="name", param_type=ParameterType.STRING, required=True
            ),  # Name of the new project
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="project", param_type=OutputParameterType.OBJECT, is_array=False
            ),  # Created project details
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                POST_orgsorgprojects.method,
                POST_orgsorgprojects.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'POST_orgsorgprojects': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class PATCH_projectsproject_id(BaseFunction):
    """Update a project."""

    name = "PATCH /projects/{project_id}"
    url = "https://docs.github.com/en/rest/projects/projects#update-a-project"
    args_in_url = True
    method = UPDATE

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="project_id", param_type=ParameterType.INTEGER, required=True
            ),  # Project ID
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="project", param_type=OutputParameterType.OBJECT, is_array=False
            ),  # Updated project details
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                PATCH_projectsproject_id.method,
                PATCH_projectsproject_id.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'PATCH_projectsproject_id': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class DELETE_projectsproject_id(BaseFunction):
    """Delete a project."""

    name = "DELETE /projects/{project_id}"
    url = "https://docs.github.com/en/rest/projects/projects#delete-a-project"
    args_in_url = True
    method = DELETE

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="project_id", param_type=ParameterType.INTEGER, required=True
            ),  # Project ID
        ]

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                DELETE_projectsproject_id.method,
                DELETE_projectsproject_id.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'DELETE_projectsproject_id': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class POST_projectsproject_idcolumns(BaseFunction):
    """Create a column in a project."""

    name = "POST /projects/{project_id}/columns"
    url = "https://docs.github.com/en/rest/projects/columns#create-a-project-column"
    args_in_url = True
    method = INSERT

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="project_id", param_type=ParameterType.INTEGER, required=True
            ),  # Project ID,
            Parameter(
                name="name", param_type=ParameterType.STRING, required=True
            ),  # Name of the column
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="column", param_type=OutputParameterType.OBJECT, is_array=False
            ),  # Created column details
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                POST_projectsproject_idcolumns.method,
                POST_projectsproject_idcolumns.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = (
                f"Error running function 'POST_projectsproject_idcolumns': {str(e)}"
            )
            logging.error(error_msg)
            raise ValueError(error_msg)


class GET_orgsorgprojects(BaseFunction):
    """List organization projects."""

    name = "GET /orgs/{org}/projects"
    url = "https://docs.github.com/en/rest/projects/projects#list-organization-projects"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="org", param_type=ParameterType.STRING, required=True
            ),  # Organization name
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="projects", param_type=OutputParameterType.OBJECT, is_array=True
            ),  # List of projects
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                GET_orgsorgprojects.method,
                GET_orgsorgprojects.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'GET_orgsorgprojects': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class GET_projectsproject_id(BaseFunction):
    """Get a specific project."""

    name = "GET /projects/{project_id}"
    url = "https://docs.github.com/en/rest/projects/projects#get-a-project"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="project_id", param_type=ParameterType.INTEGER, required=True
            ),  # Project ID
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="project", param_type=OutputParameterType.OBJECT, is_array=False
            ),  # Project details
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                GET_projectsproject_id.method,
                GET_projectsproject_id.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'GET_projectsproject_id': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class GET_projectsproject_idcolumns(BaseFunction):
    """List columns in a project."""

    name = "GET /projects/{project_id}/columns"
    url = "https://docs.github.com/en/rest/projects/columns#list-project-columns"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="project_id", param_type=ParameterType.INTEGER, required=True
            ),  # Project ID
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="columns", param_type=OutputParameterType.OBJECT, is_array=True
            ),  # List of columns in the project
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                GET_projectsproject_idcolumns.method,
                GET_projectsproject_idcolumns.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = (
                f"Error running function 'GET_projectsproject_idcolumns': {str(e)}"
            )
            logging.error(error_msg)
            raise ValueError(error_msg)


class GET_projectsproject_idcolumnscolumn_id(BaseFunction):
    """Get a project column."""

    name = "GET /projects/{project_id}/columns/{column_id}"
    url = "https://docs.github.com/en/rest/projects/columns#get-a-project-column"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="project_id", param_type=ParameterType.INTEGER, required=True
            ),  # Project ID,
            Parameter(
                name="column_id", param_type=ParameterType.INTEGER, required=True
            ),  # Column ID
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="column", param_type=OutputParameterType.OBJECT, is_array=False
            ),  # Column details
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                GET_projectsproject_idcolumnscolumn_id.method,
                GET_projectsproject_idcolumnscolumn_id.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'GET_projectsproject_idcolumnscolumn_id': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class GET_projectsproject_idcolumnscolumn_idcards(BaseFunction):
    """List project cards in a column."""

    name = "GET /projects/{project_id}/columns/{column_id}/cards"
    url = "https://docs.github.com/en/rest/projects/cards#list-project-cards"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="project_id", param_type=ParameterType.INTEGER, required=True
            ),  # Project ID,
            Parameter(
                name="column_id", param_type=ParameterType.INTEGER, required=True
            ),  # Column ID
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="cards", param_type=OutputParameterType.OBJECT, is_array=True
            ),  # List of project cards
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                GET_projectsproject_idcolumnscolumn_idcards.method,
                GET_projectsproject_idcolumnscolumn_idcards.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'GET_projectsproject_idcolumnscolumn_idcards': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class GET_projectsproject_idcollaborators(BaseFunction):
    """List collaborators on a project."""

    name = "GET /projects/{project_id}/collaborators"
    url = "https://docs.github.com/en/rest/projects/collaborators#list-project-collaborators"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="project_id", param_type=ParameterType.INTEGER, required=True
            ),  # Project ID
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="collaborators",
                param_type=OutputParameterType.STRING,
                is_array=True,
            ),  # List of collaborators
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                GET_projectsproject_idcollaborators.method,
                GET_projectsproject_idcollaborators.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'GET_projectsproject_idcollaborators': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class PUT_projectsproject_idcollaboratorsusername(BaseFunction):
    """Add a collaborator to a project."""

    name = "PUT /projects/{project_id}/collaborators/{username}"
    url = "https://docs.github.com/en/rest/projects/collaborators#add-project-collaborator"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="project_id", param_type=ParameterType.INTEGER, required=True
            ),  # Project ID,
            Parameter(
                name="username", param_type=ParameterType.STRING, required=True
            ),  # GitHub username of the collaborator
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="status", param_type=OutputParameterType.STRING, is_array=False
            ),  # Result of adding collaborator
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                PUT_projectsproject_idcollaboratorsusername.method,
                PUT_projectsproject_idcollaboratorsusername.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'PUT_projectsproject_idcollaboratorsusername': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class DELETE_projectsproject_idcollaboratorsusername(BaseFunction):
    """Remove a collaborator from a project."""

    name = "DELETE /projects/{project_id}/collaborators/{username}"
    url = "https://docs.github.com/en/rest/projects/collaborators#remove-user-as-a-collaborator"
    args_in_url = True
    method = DELETE

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="project_id", param_type=ParameterType.INTEGER, required=True
            ),  # Project ID,
            Parameter(
                name="username", param_type=ParameterType.STRING, required=True
            ),  # GitHub username of the collaborator to remove
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="status", param_type=OutputParameterType.STRING, is_array=False
            ),  # Result of removal
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                DELETE_projectsproject_idcollaboratorsusername.method,
                DELETE_projectsproject_idcollaboratorsusername.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'DELETE_projectsproject_idcollaboratorsusername': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class GET_projectsproject_idcollaboratorsusernamepermission(BaseFunction):
    """Get a user's permission level for a project."""

    name = "GET /projects/{project_id}/collaborators/{username}/permission"
    url = "https://docs.github.com/en/rest/projects/collaborators#get-project-permission-for-a-user"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="project_id", param_type=ParameterType.INTEGER, required=True
            ),  # Project ID,
            Parameter(
                name="username", param_type=ParameterType.STRING, required=True
            ),  # GitHub username
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="permission", param_type=OutputParameterType.STRING, is_array=False
            ),  # Permission level for the user
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                GET_projectsproject_idcollaboratorsusernamepermission.method,
                GET_projectsproject_idcollaboratorsusernamepermission.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'GET_projectsproject_idcollaboratorsusernamepermission': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class POST_orgsorgprojects(BaseFunction):
    """Create a new project for an organization."""

    name = "POST /orgs/{org}/projects"
    url = "https://docs.github.com/en/rest/projects/projects#create-an-organization-project"
    args_in_url = True
    method = INSERT

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="org", param_type=ParameterType.STRING, required=True
            ),  # Organization name,
            Parameter(
                name="name", param_type=ParameterType.STRING, required=True
            ),  # Name of the new project
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="project", param_type=OutputParameterType.OBJECT, is_array=False
            ),  # Created project details
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                POST_orgsorgprojects.method,
                POST_orgsorgprojects.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'POST_orgsorgprojects': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class PATCH_projectsproject_id(BaseFunction):
    """Update a project."""

    name = "PATCH /projects/{project_id}"
    url = "https://docs.github.com/en/rest/projects/projects#update-a-project"
    args_in_url = True
    method = UPDATE

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="project_id", param_type=ParameterType.INTEGER, required=True
            ),  # Project ID
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="project", param_type=OutputParameterType.OBJECT, is_array=False
            ),  # Updated project details
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                PATCH_projectsproject_id.method,
                PATCH_projectsproject_id.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'PATCH_projectsproject_id': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class DELETE_projectsproject_id(BaseFunction):
    """Delete a project."""

    name = "DELETE /projects/{project_id}"
    url = "https://docs.github.com/en/rest/projects/projects#delete-a-project"
    args_in_url = True
    method = DELETE

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="project_id", param_type=ParameterType.INTEGER, required=True
            ),  # Project ID
        ]

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                DELETE_projectsproject_id.method,
                DELETE_projectsproject_id.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'DELETE_projectsproject_id': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class POST_projectsproject_idcolumns(BaseFunction):
    """Create a column in a project."""

    name = "POST /projects/{project_id}/columns"
    url = "https://docs.github.com/en/rest/projects/columns#create-a-project-column"
    args_in_url = True
    method = INSERT

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="project_id", param_type=ParameterType.INTEGER, required=True
            ),  # Project ID,
            Parameter(
                name="name", param_type=ParameterType.STRING, required=True
            ),  # Name of the column
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="column", param_type=OutputParameterType.OBJECT, is_array=False
            ),  # Created column details
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                POST_projectsproject_idcolumns.method,
                POST_projectsproject_idcolumns.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = (
                f"Error running function 'POST_projectsproject_idcolumns': {str(e)}"
            )
            logging.error(error_msg)
            raise ValueError(error_msg)


class GET_orgsorgprojects(BaseFunction):
    """List organization projects."""

    name = "GET /orgs/{org}/projects"
    url = "https://docs.github.com/en/rest/projects/projects#list-organization-projects"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="org", param_type=ParameterType.STRING, required=True
            ),  # Organization name
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="projects", param_type=OutputParameterType.OBJECT, is_array=True
            ),  # List of projects
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                GET_orgsorgprojects.method,
                GET_orgsorgprojects.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'GET_orgsorgprojects': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class GET_projectsproject_id(BaseFunction):
    """Get a specific project."""

    name = "GET /projects/{project_id}"
    url = "https://docs.github.com/en/rest/projects/projects#get-a-project"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="project_id", param_type=ParameterType.INTEGER, required=True
            ),  # Project ID
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="project", param_type=OutputParameterType.OBJECT, is_array=False
            ),  # Project details
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                GET_projectsproject_id.method,
                GET_projectsproject_id.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'GET_projectsproject_id': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class GET_projectsproject_idcolumns(BaseFunction):
    """List columns in a project."""

    name = "GET /projects/{project_id}/columns"
    url = "https://docs.github.com/en/rest/projects/columns#list-project-columns"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="project_id", param_type=ParameterType.INTEGER, required=True
            ),  # Project ID
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="columns", param_type=OutputParameterType.OBJECT, is_array=True
            ),  # List of columns in the project
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                GET_projectsproject_idcolumns.method,
                GET_projectsproject_idcolumns.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = (
                f"Error running function 'GET_projectsproject_idcolumns': {str(e)}"
            )
            logging.error(error_msg)
            raise ValueError(error_msg)


class GET_projectsproject_idcolumnscolumn_id(BaseFunction):
    """Get a project column."""

    name = "GET /projects/{project_id}/columns/{column_id}"
    url = "https://docs.github.com/en/rest/projects/columns#get-a-project-column"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="project_id", param_type=ParameterType.INTEGER, required=True
            ),  # Project ID,
            Parameter(
                name="column_id", param_type=ParameterType.INTEGER, required=True
            ),  # Column ID
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="column", param_type=OutputParameterType.OBJECT, is_array=False
            ),  # Column details
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                GET_projectsproject_idcolumnscolumn_id.method,
                GET_projectsproject_idcolumnscolumn_id.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'GET_projectsproject_idcolumnscolumn_id': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class GET_projectsproject_idcolumnscolumn_idcards(BaseFunction):
    """List project cards in a column."""

    name = "GET /projects/{project_id}/columns/{column_id}/cards"
    url = "https://docs.github.com/en/rest/projects/cards#list-project-cards"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="project_id", param_type=ParameterType.INTEGER, required=True
            ),  # Project ID,
            Parameter(
                name="column_id", param_type=ParameterType.INTEGER, required=True
            ),  # Column ID
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="cards", param_type=OutputParameterType.OBJECT, is_array=True
            ),  # List of project cards
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                GET_projectsproject_idcolumnscolumn_idcards.method,
                GET_projectsproject_idcolumnscolumn_idcards.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'GET_projectsproject_idcolumnscolumn_idcards': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class GET_projectsproject_idcollaborators(BaseFunction):
    """Get collaborators on a project."""

    name = "GET /projects/{project_id}/collaborators"
    url = "https://docs.github.com/en/rest/projects/collaborators#list-project-collaborators"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="project_id", param_type=ParameterType.INTEGER, required=True
            ),  # Project ID
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="collaborators",
                param_type=OutputParameterType.STRING,
                is_array=True,
            ),  # List of collaborators
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                GET_projectsproject_idcollaborators.method,
                GET_projectsproject_idcollaborators.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'GET_projectsproject_idcollaborators': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class PUT_projectsproject_idcollaboratorsusername(BaseFunction):
    """Add a collaborator to a project."""

    name = "PUT /projects/{project_id}/collaborators/{username}"
    url = "https://docs.github.com/en/rest/projects/collaborators#add-project-collaborator"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="project_id", param_type=ParameterType.INTEGER, required=True
            ),  # Project ID,
            Parameter(
                name="username", param_type=ParameterType.STRING, required=True
            ),  # GitHub username of the collaborator
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="status", param_type=OutputParameterType.STRING, is_array=False
            ),  # Result of adding collaborator
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                PUT_projectsproject_idcollaboratorsusername.method,
                PUT_projectsproject_idcollaboratorsusername.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'PUT_projectsproject_idcollaboratorsusername': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class DELETE_projectsproject_idcollaboratorsusername(BaseFunction):
    """Remove a collaborator from a project."""

    name = "DELETE /projects/{project_id}/collaborators/{username}"
    url = "https://docs.github.com/en/rest/projects/collaborators#remove-user-as-a-collaborator"
    args_in_url = True
    method = DELETE

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="project_id", param_type=ParameterType.INTEGER, required=True
            ),  # Project ID,
            Parameter(
                name="username", param_type=ParameterType.STRING, required=True
            ),  # GitHub username of the collaborator to remove
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="status", param_type=OutputParameterType.STRING, is_array=False
            ),  # Result of removal
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                DELETE_projectsproject_idcollaboratorsusername.method,
                DELETE_projectsproject_idcollaboratorsusername.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'DELETE_projectsproject_idcollaboratorsusername': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class GET_projectsproject_idcollaboratorsusernamepermission(BaseFunction):
    """Get a user's permission level for a project."""

    name = "GET /projects/{project_id}/collaborators/{username}/permission"
    url = "https://docs.github.com/en/rest/projects/collaborators#get-project-permission-for-a-user"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="project_id", param_type=ParameterType.INTEGER, required=True
            ),  # Project ID,
            Parameter(
                name="username", param_type=ParameterType.STRING, required=True
            ),  # GitHub username
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="permission", param_type=OutputParameterType.STRING, is_array=False
            ),  # Permission level for the user
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                GET_projectsproject_idcollaboratorsusernamepermission.method,
                GET_projectsproject_idcollaboratorsusernamepermission.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'GET_projectsproject_idcollaboratorsusernamepermission': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class POST_orgsorgprojects(BaseFunction):
    """Create a new project for an organization."""

    name = "POST /orgs/{org}/projects"
    url = "https://docs.github.com/en/rest/projects/projects#create-an-organization-project"
    args_in_url = True
    method = INSERT

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="org", param_type=ParameterType.STRING, required=True
            ),  # Organization name,
            Parameter(
                name="name", param_type=ParameterType.STRING, required=True
            ),  # Name of the new project
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="project", param_type=OutputParameterType.OBJECT, is_array=False
            ),  # Created project details
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                POST_orgsorgprojects.method,
                POST_orgsorgprojects.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'POST_orgsorgprojects': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class PATCH_projectsproject_id(BaseFunction):
    """Update a project."""

    name = "PATCH /projects/{project_id}"
    url = "https://docs.github.com/en/rest/projects/projects#update-a-project"
    args_in_url = True
    method = UPDATE

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="project_id", param_type=ParameterType.INTEGER, required=True
            ),  # Project ID
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="project", param_type=OutputParameterType.OBJECT, is_array=False
            ),  # Updated project details
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                PATCH_projectsproject_id.method,
                PATCH_projectsproject_id.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'PATCH_projectsproject_id': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class DELETE_projectsproject_id(BaseFunction):
    """Delete a project."""

    name = "DELETE /projects/{project_id}"
    url = "https://docs.github.com/en/rest/projects/projects#delete-a-project"
    args_in_url = True
    method = DELETE

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="project_id", param_type=ParameterType.INTEGER, required=True
            ),  # Project ID
        ]

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                DELETE_projectsproject_id.method,
                DELETE_projectsproject_id.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'DELETE_projectsproject_id': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class POST_projectsproject_idcolumns(BaseFunction):
    """Create a column in a project."""

    name = "POST /projects/{project_id}/columns"
    url = "https://docs.github.com/en/rest/projects/columns#create-a-project-column"
    args_in_url = True
    method = INSERT

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="project_id", param_type=ParameterType.INTEGER, required=True
            ),  # Project ID,
            Parameter(
                name="name", param_type=ParameterType.STRING, required=True
            ),  # Name of the column
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="column", param_type=OutputParameterType.OBJECT, is_array=False
            ),  # Created column details
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                POST_projectsproject_idcolumns.method,
                POST_projectsproject_idcolumns.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = (
                f"Error running function 'POST_projectsproject_idcolumns': {str(e)}"
            )
            logging.error(error_msg)
            raise ValueError(error_msg)


class GET_orgsorgprojects(BaseFunction):
    """List organization projects."""

    name = "GET /orgs/{org}/projects"
    url = "https://docs.github.com/en/rest/projects/projects#list-organization-projects"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="org", param_type=ParameterType.STRING, required=True
            ),  # Organization name
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="projects", param_type=OutputParameterType.OBJECT, is_array=True
            ),  # List of projects
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                GET_orgsorgprojects.method,
                GET_orgsorgprojects.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'GET_orgsorgprojects': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class GET_projectsproject_id(BaseFunction):
    """Get a specific project."""

    name = "GET /projects/{project_id}"
    url = "https://docs.github.com/en/rest/projects/projects#get-a-project"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="project_id", param_type=ParameterType.INTEGER, required=True
            ),  # Project ID
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="project", param_type=OutputParameterType.OBJECT, is_array=False
            ),  # Project details
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                GET_projectsproject_id.method,
                GET_projectsproject_id.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'GET_projectsproject_id': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class GET_projectsproject_idcolumns(BaseFunction):
    """List columns in a project."""

    name = "GET /projects/{project_id}/columns"
    url = "https://docs.github.com/en/rest/projects/columns#list-project-columns"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="project_id", param_type=ParameterType.INTEGER, required=True
            ),  # Project ID
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="columns", param_type=OutputParameterType.OBJECT, is_array=True
            ),  # List of columns in the project
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                GET_projectsproject_idcolumns.method,
                GET_projectsproject_idcolumns.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = (
                f"Error running function 'GET_projectsproject_idcolumns': {str(e)}"
            )
            logging.error(error_msg)
            raise ValueError(error_msg)


class GET_projectsproject_idcolumnscolumn_id(BaseFunction):
    """Get a project column."""

    name = "GET /projects/{project_id}/columns/{column_id}"
    url = "https://docs.github.com/en/rest/projects/columns#get-a-project-column"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="project_id", param_type=ParameterType.INTEGER, required=True
            ),  # Project ID,
            Parameter(
                name="column_id", param_type=ParameterType.INTEGER, required=True
            ),  # Column ID
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="column", param_type=OutputParameterType.OBJECT, is_array=False
            ),  # Column details
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                GET_projectsproject_idcolumnscolumn_id.method,
                GET_projectsproject_idcolumnscolumn_id.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'GET_projectsproject_idcolumnscolumn_id': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class GET_projectsproject_idcolumnscolumn_idcards(BaseFunction):
    """List project cards in a column."""

    name = "GET /projects/{project_id}/columns/{column_id}/cards"
    url = "https://docs.github.com/en/rest/projects/cards#list-project-cards"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="project_id", param_type=ParameterType.INTEGER, required=True
            ),  # Project ID,
            Parameter(
                name="column_id", param_type=ParameterType.INTEGER, required=True
            ),  # Column ID
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="cards", param_type=OutputParameterType.OBJECT, is_array=True
            ),  # List of project cards
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                GET_projectsproject_idcolumnscolumn_idcards.method,
                GET_projectsproject_idcolumnscolumn_idcards.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'GET_projectsproject_idcolumnscolumn_idcards': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class GET_projectsproject_idcollaborators(BaseFunction):
    """Get collaborators on a project."""

    name = "GET /projects/{project_id}/collaborators"
    url = "https://docs.github.com/en/rest/projects/collaborators#list-project-collaborators"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="project_id", param_type=ParameterType.INTEGER, required=True
            ),  # Project ID
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="collaborators",
                param_type=OutputParameterType.STRING,
                is_array=True,
            ),  # List of collaborators
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                GET_projectsproject_idcollaborators.method,
                GET_projectsproject_idcollaborators.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'GET_projectsproject_idcollaborators': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class PUT_projectsproject_idcollaboratorsusername(BaseFunction):
    """Add a collaborator to a project."""

    name = "PUT /projects/{project_id}/collaborators/{username}"
    url = "https://docs.github.com/en/rest/projects/collaborators#add-project-collaborator"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="project_id", param_type=ParameterType.INTEGER, required=True
            ),  # Project ID,
            Parameter(
                name="username", param_type=ParameterType.STRING, required=True
            ),  # GitHub username of the collaborator
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="status", param_type=OutputParameterType.STRING, is_array=False
            ),  # Result of adding collaborator
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                PUT_projectsproject_idcollaboratorsusername.method,
                PUT_projectsproject_idcollaboratorsusername.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'PUT_projectsproject_idcollaboratorsusername': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class DELETE_projectsproject_idcollaboratorsusername(BaseFunction):
    """Remove a collaborator from a project."""

    name = "DELETE /projects/{project_id}/collaborators/{username}"
    url = "https://docs.github.com/en/rest/projects/collaborators#remove-user-as-a-collaborator"
    args_in_url = True
    method = DELETE

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="project_id", param_type=ParameterType.INTEGER, required=True
            ),  # Project ID,
            Parameter(
                name="username", param_type=ParameterType.STRING, required=True
            ),  # GitHub username of the collaborator to remove
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="status", param_type=OutputParameterType.STRING, is_array=False
            ),  # Result of removal
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                DELETE_projectsproject_idcollaboratorsusername.method,
                DELETE_projectsproject_idcollaboratorsusername.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'DELETE_projectsproject_idcollaboratorsusername': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class GET_projectsproject_idcollaboratorsusernamepermission(BaseFunction):
    """Get a user's permission level for a project."""

    name = "GET /projects/{project_id}/collaborators/{username}/permission"
    url = "https://docs.github.com/en/rest/projects/collaborators#get-project-permission-for-a-user"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="project_id", param_type=ParameterType.INTEGER, required=True
            ),  # Project ID,
            Parameter(
                name="username", param_type=ParameterType.STRING, required=True
            ),  # GitHub username
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="permission", param_type=OutputParameterType.STRING, is_array=False
            ),  # Permission level for the user
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                GET_projectsproject_idcollaboratorsusernamepermission.method,
                GET_projectsproject_idcollaboratorsusernamepermission.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'GET_projectsproject_idcollaboratorsusernamepermission': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class POST_orgsorgprojects(BaseFunction):
    """Create a new project for an organization."""

    name = "POST /orgs/{org}/projects"
    url = "https://docs.github.com/en/rest/projects/projects#create-an-organization-project"
    args_in_url = True
    method = INSERT

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="org", param_type=ParameterType.STRING, required=True
            ),  # Organization name,
            Parameter(
                name="name", param_type=ParameterType.STRING, required=True
            ),  # Name of the new project
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="project", param_type=OutputParameterType.OBJECT, is_array=False
            ),  # Created project details
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                POST_orgsorgprojects.method,
                POST_orgsorgprojects.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'POST_orgsorgprojects': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class PATCH_projectsproject_id(BaseFunction):
    """Update a project."""

    name = "PATCH /projects/{project_id}"
    url = "https://docs.github.com/en/rest/projects/projects#update-a-project"
    args_in_url = True
    method = UPDATE

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="project_id", param_type=ParameterType.INTEGER, required=True
            ),  # Project ID
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="project", param_type=OutputParameterType.OBJECT, is_array=False
            ),  # Updated project details
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                PATCH_projectsproject_id.method,
                PATCH_projectsproject_id.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'PATCH_projectsproject_id': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class DELETE_projectsproject_id(BaseFunction):
    """Delete a project."""

    name = "DELETE /projects/{project_id}"
    url = "https://docs.github.com/en/rest/projects/projects#delete-a-project"
    args_in_url = True
    method = DELETE

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="project_id", param_type=ParameterType.INTEGER, required=True
            ),  # Project ID
        ]

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                DELETE_projectsproject_id.method,
                DELETE_projectsproject_id.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'DELETE_projectsproject_id': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class POST_projectsproject_idcolumns(BaseFunction):
    """Create a column in a project."""

    name = "POST /projects/{project_id}/columns"
    url = "https://docs.github.com/en/rest/projects/columns#create-a-project-column"
    args_in_url = True
    method = INSERT

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="project_id", param_type=ParameterType.INTEGER, required=True
            ),  # Project ID,
            Parameter(
                name="name", param_type=ParameterType.STRING, required=True
            ),  # Name of the column
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="column", param_type=OutputParameterType.OBJECT, is_array=False
            ),  # Created column details
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                POST_projectsproject_idcolumns.method,
                POST_projectsproject_idcolumns.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = (
                f"Error running function 'POST_projectsproject_idcolumns': {str(e)}"
            )
            logging.error(error_msg)
            raise ValueError(error_msg)


class GET_orgsorgprojects(BaseFunction):
    """List organization projects."""

    name = "GET /orgs/{org}/projects"
    url = "https://docs.github.com/en/rest/projects/projects#list-organization-projects"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="org", param_type=ParameterType.STRING, required=True
            ),  # Organization name
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="projects", param_type=OutputParameterType.OBJECT, is_array=True
            ),  # List of projects
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                GET_orgsorgprojects.method,
                GET_orgsorgprojects.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'GET_orgsorgprojects': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class GET_projectsproject_id(BaseFunction):
    """Get a specific project."""

    name = "GET /projects/{project_id}"
    url = "https://docs.github.com/en/rest/projects/projects#get-a-project"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="project_id", param_type=ParameterType.INTEGER, required=True
            ),  # Project ID
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="project", param_type=OutputParameterType.OBJECT, is_array=False
            ),  # Project details
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                GET_projectsproject_id.method,
                GET_projectsproject_id.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'GET_projectsproject_id': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class GET_projectsproject_idcolumns(BaseFunction):
    """List columns in a project."""

    name = "GET /projects/{project_id}/columns"
    url = "https://docs.github.com/en/rest/projects/columns#list-project-columns"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="project_id", param_type=ParameterType.INTEGER, required=True
            ),  # Project ID
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="columns", param_type=OutputParameterType.OBJECT, is_array=True
            ),  # List of columns in the project
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                GET_projectsproject_idcolumns.method,
                GET_projectsproject_idcolumns.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = (
                f"Error running function 'GET_projectsproject_idcolumns': {str(e)}"
            )
            logging.error(error_msg)
            raise ValueError(error_msg)


class GET_projectsproject_idcolumnscolumn_id(BaseFunction):
    """Get a project column."""

    name = "GET /projects/{project_id}/columns/{column_id}"
    url = "https://docs.github.com/en/rest/projects/columns#get-a-project-column"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="project_id", param_type=ParameterType.INTEGER, required=True
            ),  # Project ID,
            Parameter(
                name="column_id", param_type=ParameterType.INTEGER, required=True
            ),  # Column ID
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="column", param_type=OutputParameterType.OBJECT, is_array=False
            ),  # Column details
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                GET_projectsproject_idcolumnscolumn_id.method,
                GET_projectsproject_idcolumnscolumn_id.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'GET_projectsproject_idcolumnscolumn_id': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class GET_projectsproject_idcolumnscolumn_idcards(BaseFunction):
    """List project cards in a column."""

    name = "GET /projects/{project_id}/columns/{column_id}/cards"
    url = "https://docs.github.com/en/rest/projects/cards#list-project-cards"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="project_id", param_type=ParameterType.INTEGER, required=True
            ),  # Project ID,
            Parameter(
                name="column_id", param_type=ParameterType.INTEGER, required=True
            ),  # Column ID
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="cards", param_type=OutputParameterType.OBJECT, is_array=True
            ),  # List of project cards
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                GET_projectsproject_idcolumnscolumn_idcards.method,
                GET_projectsproject_idcolumnscolumn_idcards.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'GET_projectsproject_idcolumnscolumn_idcards': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class GET_projectsproject_idcollaborators(BaseFunction):
    """Get collaborators on a project."""

    name = "GET /projects/{project_id}/collaborators"
    url = "https://docs.github.com/en/rest/projects/collaborators#list-project-collaborators"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="project_id", param_type=ParameterType.INTEGER, required=True
            ),  # Project ID
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="collaborators",
                param_type=OutputParameterType.STRING,
                is_array=True,
            ),  # List of collaborators
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                GET_projectsproject_idcollaborators.method,
                GET_projectsproject_idcollaborators.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'GET_projectsproject_idcollaborators': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class PUT_projectsproject_idcollaboratorsusername(BaseFunction):
    """Add collaborator to a project."""

    name = "PUT /projects/{project_id}/collaborators/{username}"
    url = "https://docs.github.com/en/rest/projects/collaborators#add-project-collaborator"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="project_id", param_type=ParameterType.INTEGER, required=True
            ),  # Project ID,
            Parameter(
                name="username", param_type=ParameterType.STRING, required=True
            ),  # GitHub username of the collaborator
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="status", param_type=OutputParameterType.STRING, is_array=False
            ),  # Result of adding collaborator
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                PUT_projectsproject_idcollaboratorsusername.method,
                PUT_projectsproject_idcollaboratorsusername.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'PUT_projectsproject_idcollaboratorsusername': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class DELETE_projectsproject_idcollaboratorsusername(BaseFunction):
    """Remove collaborator from the project."""

    name = "DELETE /projects/{project_id}/collaborators/{username}"
    url = "https://docs.github.com/en/rest/projects/collaborators#remove-user-as-a-collaborator"
    args_in_url = True
    method = DELETE

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="project_id", param_type=ParameterType.INTEGER, required=True
            ),  # Project ID,
            Parameter(
                name="username", param_type=ParameterType.STRING, required=True
            ),  # GitHub username to remove
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="status", param_type=OutputParameterType.STRING, is_array=False
            ),  # Result of removal
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                DELETE_projectsproject_idcollaboratorsusername.method,
                DELETE_projectsproject_idcollaboratorsusername.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'DELETE_projectsproject_idcollaboratorsusername': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class GET_projectsproject_idcollaboratorsusernamepermission(BaseFunction):
    """Get user's permission level on a project."""

    name = "GET /projects/{project_id}/collaborators/{username}/permission"
    url = "https://docs.github.com/en/rest/projects/collaborators#get-project-permission-for-a-user"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="project_id", param_type=ParameterType.INTEGER, required=True
            ),  # Project ID,
            Parameter(
                name="username", param_type=ParameterType.STRING, required=True
            ),  # GitHub username
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="permission", param_type=OutputParameterType.STRING, is_array=False
            ),  # Permission level
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                GET_projectsproject_idcollaboratorsusernamepermission.method,
                GET_projectsproject_idcollaboratorsusernamepermission.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'GET_projectsproject_idcollaboratorsusernamepermission': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class POST_orgsorgprojects(BaseFunction):
    """Create a new project for an organization."""

    name = "POST /orgs/{org}/projects"
    url = "https://docs.github.com/en/rest/projects/projects#create-an-organization-project"
    args_in_url = True
    method = INSERT

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="org", param_type=ParameterType.STRING, required=True
            ),  # Organization name,
            Parameter(
                name="name", param_type=ParameterType.STRING, required=True
            ),  # Project name
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="project", param_type=OutputParameterType.OBJECT, is_array=False
            ),  # Created project
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                POST_orgsorgprojects.method,
                POST_orgsorgprojects.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'POST_orgsorgprojects': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class PATCH_projectsproject_id(BaseFunction):
    """Update a project."""

    name = "PATCH /projects/{project_id}"
    url = "https://docs.github.com/en/rest/projects/projects#update-a-project"
    args_in_url = True
    method = UPDATE

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="project_id", param_type=ParameterType.INTEGER, required=True
            ),  # Project ID
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="project", param_type=OutputParameterType.OBJECT, is_array=False
            ),  # Updated project
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                PATCH_projectsproject_id.method,
                PATCH_projectsproject_id.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'PATCH_projectsproject_id': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class DELETE_projectsproject_id(BaseFunction):
    """Delete a project."""

    name = "DELETE /projects/{project_id}"
    url = "https://docs.github.com/en/rest/projects/projects#delete-a-project"
    args_in_url = True
    method = DELETE

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="project_id", param_type=ParameterType.INTEGER, required=True
            ),  # Project ID
        ]

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                DELETE_projectsproject_id.method,
                DELETE_projectsproject_id.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'DELETE_projectsproject_id': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class POST_projectsproject_idcolumns(BaseFunction):
    """Create a project column."""

    name = "POST /projects/{project_id}/columns"
    url = "https://docs.github.com/en/rest/projects/columns#create-a-project-column"
    args_in_url = True
    method = INSERT

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="project_id", param_type=ParameterType.INTEGER, required=True
            ),  # Project ID,
            Parameter(
                name="name", param_type=ParameterType.STRING, required=True
            ),  # Column name
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="column", param_type=OutputParameterType.OBJECT, is_array=False
            ),  # Created column
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                POST_projectsproject_idcolumns.method,
                POST_projectsproject_idcolumns.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = (
                f"Error running function 'POST_projectsproject_idcolumns': {str(e)}"
            )
            logging.error(error_msg)
            raise ValueError(error_msg)


class GET_orgsorgprojects(BaseFunction):
    """List organization projects."""

    name = "GET /orgs/{org}/projects"
    url = "https://docs.github.com/en/rest/projects/projects#list-organization-projects"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="org", param_type=ParameterType.STRING, required=True
            ),  # Organization name
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="projects", param_type=OutputParameterType.OBJECT, is_array=True
            ),  # List of projects
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                GET_orgsorgprojects.method,
                GET_orgsorgprojects.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'GET_orgsorgprojects': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class GET_projectsproject_id(BaseFunction):
    """Get a project."""

    name = "GET /projects/{project_id}"
    url = "https://docs.github.com/en/rest/projects/projects#get-a-project"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="project_id", param_type=ParameterType.INTEGER, required=True
            ),  # Project ID
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="project", param_type=OutputParameterType.OBJECT, is_array=False
            ),  # Project details
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                GET_projectsproject_id.method,
                GET_projectsproject_id.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'GET_projectsproject_id': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class GET_projectsproject_idcolumns(BaseFunction):
    """List project columns."""

    name = "GET /projects/{project_id}/columns"
    url = "https://docs.github.com/en/rest/projects/columns#list-project-columns"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="project_id", param_type=ParameterType.INTEGER, required=True
            ),  # Project ID
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="columns", param_type=OutputParameterType.OBJECT, is_array=True
            ),  # List of columns in the project
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                GET_projectsproject_idcolumns.method,
                GET_projectsproject_idcolumns.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = (
                f"Error running function 'GET_projectsproject_idcolumns': {str(e)}"
            )
            logging.error(error_msg)
            raise ValueError(error_msg)


class GET_projectsproject_idcolumnscolumn_id(BaseFunction):
    """Get project column."""

    name = "GET /projects/{project_id}/columns/{column_id}"
    url = "https://docs.github.com/en/rest/projects/columns#get-a-project-column"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="project_id", param_type=ParameterType.INTEGER, required=True
            ),  # Project ID,
            Parameter(
                name="column_id", param_type=ParameterType.INTEGER, required=True
            ),  # Column ID
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="column", param_type=OutputParameterType.OBJECT, is_array=False
            ),  # Column details
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                GET_projectsproject_idcolumnscolumn_id.method,
                GET_projectsproject_idcolumnscolumn_id.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'GET_projectsproject_idcolumnscolumn_id': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class GET_projectsproject_idcolumnscolumn_idcards(BaseFunction):
    """List project cards."""

    name = "GET /projects/{project_id}/columns/{column_id}/cards"
    url = "https://docs.github.com/en/rest/projects/cards#list-project-cards"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="project_id", param_type=ParameterType.INTEGER, required=True
            ),  # Project ID,
            Parameter(
                name="column_id", param_type=ParameterType.INTEGER, required=True
            ),  # Column ID
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="cards", param_type=OutputParameterType.OBJECT, is_array=True
            ),  # List of project cards
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                GET_projectsproject_idcolumnscolumn_idcards.method,
                GET_projectsproject_idcolumnscolumn_idcards.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'GET_projectsproject_idcolumnscolumn_idcards': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class GET_projectsproject_idcollaborators(BaseFunction):
    """Get list of collaborators."""

    name = "GET /projects/{project_id}/collaborators"
    url = "https://docs.github.com/en/rest/projects/collaborators#list-project-collaborators"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="project_id", param_type=ParameterType.INTEGER, required=True
            ),  # Project ID
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="collaborators",
                param_type=OutputParameterType.STRING,
                is_array=True,
            ),  # List of collaborators
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                GET_projectsproject_idcollaborators.method,
                GET_projectsproject_idcollaborators.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'GET_projectsproject_idcollaborators': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class PUT_projectsproject_idcollaboratorsusername(BaseFunction):
    """Add collaborator."""

    name = "PUT /projects/{project_id}/collaborators/{username}"
    url = "https://docs.github.com/en/rest/projects/collaborators#add-project-collaborator"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="project_id", param_type=ParameterType.INTEGER, required=True
            ),  # Project ID,
            Parameter(
                name="username", param_type=ParameterType.STRING, required=True
            ),  # GitHub username
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="status", param_type=OutputParameterType.STRING, is_array=False
            ),  # Operation status
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                PUT_projectsproject_idcollaboratorsusername.method,
                PUT_projectsproject_idcollaboratorsusername.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'PUT_projectsproject_idcollaboratorsusername': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class DELETE_projectsproject_idcollaboratorsusername(BaseFunction):
    """Remove collaborator."""

    name = "DELETE /projects/{project_id}/collaborators/{username}"
    url = "https://docs.github.com/en/rest/projects/collaborators#remove-user-as-a-collaborator"
    args_in_url = True
    method = DELETE

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="project_id", param_type=ParameterType.INTEGER, required=True
            ),  # Project ID,
            Parameter(
                name="username", param_type=ParameterType.STRING, required=True
            ),  # GitHub username
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="status", param_type=OutputParameterType.STRING, is_array=False
            ),  # Operation status
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                DELETE_projectsproject_idcollaboratorsusername.method,
                DELETE_projectsproject_idcollaboratorsusername.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'DELETE_projectsproject_idcollaboratorsusername': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class GET_projectsproject_idcollaboratorsusernamepermission(BaseFunction):
    """Get user's permission level."""

    name = "GET /projects/{project_id}/collaborators/{username}/permission"
    url = "https://docs.github.com/en/rest/projects/collaborators#get-project-permission-for-a-user"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="project_id", param_type=ParameterType.INTEGER, required=True
            ),  # Project ID,
            Parameter(
                name="username", param_type=ParameterType.STRING, required=True
            ),  # GitHub username
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="permission", param_type=OutputParameterType.STRING, is_array=False
            ),  # Permission level
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                GET_projectsproject_idcollaboratorsusernamepermission.method,
                GET_projectsproject_idcollaboratorsusernamepermission.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'GET_projectsproject_idcollaboratorsusernamepermission': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class POST_orgsorgprojects(BaseFunction):
    """Create project."""

    name = "POST /orgs/{org}/projects"
    url = "https://docs.github.com/en/rest/projects/projects#create-an-organization-project"
    args_in_url = True
    method = INSERT

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="org", param_type=ParameterType.STRING, required=True
            ),  # Organization name,
            Parameter(
                name="name", param_type=ParameterType.STRING, required=True
            ),  # Project name
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="project", param_type=OutputParameterType.OBJECT, is_array=False
            ),  # Created project
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                POST_orgsorgprojects.method,
                POST_orgsorgprojects.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'POST_orgsorgprojects': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class PATCH_projectsproject_id(BaseFunction):
    """Update project."""

    name = "PATCH /projects/{project_id}"
    url = "https://docs.github.com/en/rest/projects/projects#update-a-project"
    args_in_url = True
    method = UPDATE

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="project_id", param_type=ParameterType.INTEGER, required=True
            ),  # Project ID
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="project", param_type=OutputParameterType.OBJECT, is_array=False
            ),  # Updated project
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                PATCH_projectsproject_id.method,
                PATCH_projectsproject_id.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'PATCH_projectsproject_id': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class DELETE_projectsproject_id(BaseFunction):
    """Delete project."""

    name = "DELETE /projects/{project_id}"
    url = "https://docs.github.com/en/rest/projects/projects#delete-a-project"
    args_in_url = True
    method = DELETE

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="project_id", param_type=ParameterType.INTEGER, required=True
            ),  # Project ID
        ]

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                DELETE_projectsproject_id.method,
                DELETE_projectsproject_id.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'DELETE_projectsproject_id': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class POST_projectsproject_idcolumns(BaseFunction):
    """Create column."""

    name = "POST /projects/{project_id}/columns"
    url = "https://docs.github.com/en/rest/projects/columns#create-a-project-column"
    args_in_url = True
    method = INSERT

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="project_id", param_type=ParameterType.INTEGER, required=True
            ),  # Project ID,
            Parameter(
                name="name", param_type=ParameterType.STRING, required=True
            ),  # Column name
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="column", param_type=OutputParameterType.OBJECT, is_array=False
            ),  # Created column
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                POST_projectsproject_idcolumns.method,
                POST_projectsproject_idcolumns.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = (
                f"Error running function 'POST_projectsproject_idcolumns': {str(e)}"
            )
            logging.error(error_msg)
            raise ValueError(error_msg)


class GET_orgsorgprojects(BaseFunction):
    """List organization projects."""

    name = "GET /orgs/{org}/projects"
    url = "https://docs.github.com/en/rest/projects/projects#list-organization-projects"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="org", param_type=ParameterType.STRING, required=True
            ),  # Organization name
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="projects", param_type=OutputParameterType.OBJECT, is_array=True
            ),  # List of projects
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                GET_orgsorgprojects.method,
                GET_orgsorgprojects.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'GET_orgsorgprojects': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class GET_projectsproject_id(BaseFunction):
    """Get project."""

    name = "GET /projects/{project_id}"
    url = "https://docs.github.com/en/rest/projects/projects#get-a-project"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="project_id", param_type=ParameterType.INTEGER, required=True
            ),  # Project ID
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="project", param_type=OutputParameterType.OBJECT, is_array=False
            ),  # Project details
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                GET_projectsproject_id.method,
                GET_projectsproject_id.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'GET_projectsproject_id': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class GET_projectsproject_idcolumns(BaseFunction):
    """List columns."""

    name = "GET /projects/{project_id}/columns"
    url = "https://docs.github.com/en/rest/projects/columns#list-project-columns"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="project_id", param_type=ParameterType.INTEGER, required=True
            ),  # Project ID
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="columns", param_type=OutputParameterType.OBJECT, is_array=True
            ),  # List of columns
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                GET_projectsproject_idcolumns.method,
                GET_projectsproject_idcolumns.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = (
                f"Error running function 'GET_projectsproject_idcolumns': {str(e)}"
            )
            logging.error(error_msg)
            raise ValueError(error_msg)


class GET_projectsproject_idcolumnscolumn_id(BaseFunction):
    """Get column."""

    name = "GET /projects/{project_id}/columns/{column_id}"
    url = "https://docs.github.com/en/rest/projects/columns#get-a-project-column"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="project_id", param_type=ParameterType.INTEGER, required=True
            ),  # Project ID,
            Parameter(
                name="column_id", param_type=ParameterType.INTEGER, required=True
            ),  # Column ID
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="column", param_type=OutputParameterType.OBJECT, is_array=False
            ),  # Column details
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                GET_projectsproject_idcolumnscolumn_id.method,
                GET_projectsproject_idcolumnscolumn_id.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'GET_projectsproject_idcolumnscolumn_id': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class GET_projectsproject_idcolumnscolumn_idcards(BaseFunction):
    """List cards."""

    name = "GET /projects/{project_id}/columns/{column_id}/cards"
    url = "https://docs.github.com/en/rest/projects/cards#list-project-cards"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="project_id", param_type=ParameterType.INTEGER, required=True
            ),  # Project ID,
            Parameter(
                name="column_id", param_type=ParameterType.INTEGER, required=True
            ),  # Column ID
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="cards", param_type=OutputParameterType.OBJECT, is_array=True
            ),  # List of cards
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                GET_projectsproject_idcolumnscolumn_idcards.method,
                GET_projectsproject_idcolumnscolumn_idcards.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'GET_projectsproject_idcolumnscolumn_idcards': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class GET_projectsproject_idcollaborators(BaseFunction):
    """Get collaborators."""

    name = "GET /projects/{project_id}/collaborators"
    url = "https://docs.github.com/en/rest/projects/collaborators#list-project-collaborators"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="project_id", param_type=ParameterType.INTEGER, required=True
            ),  # Project ID
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="collaborators",
                param_type=OutputParameterType.STRING,
                is_array=True,
            ),  # List of collaborators
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                GET_projectsproject_idcollaborators.method,
                GET_projectsproject_idcollaborators.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'GET_projectsproject_idcollaborators': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class PUT_projectsproject_idcollaboratorsusername(BaseFunction):
    """Add collaborator."""

    name = "PUT /projects/{project_id}/collaborators/{username}"
    url = "https://docs.github.com/en/rest/projects/collaborators#add-project-collaborator"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="project_id", param_type=ParameterType.INTEGER, required=True
            ),  # Project ID,
            Parameter(
                name="username", param_type=ParameterType.STRING, required=True
            ),  # GitHub username
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="status", param_type=OutputParameterType.STRING, is_array=False
            ),  # Operation status
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                PUT_projectsproject_idcollaboratorsusername.method,
                PUT_projectsproject_idcollaboratorsusername.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'PUT_projectsproject_idcollaboratorsusername': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class DELETE_projectsproject_idcollaboratorsusername(BaseFunction):
    """Remove collaborator."""

    name = "DELETE /projects/{project_id}/collaborators/{username}"
    url = "https://docs.github.com/en/rest/projects/collaborators#remove-user-as-a-collaborator"
    args_in_url = True
    method = DELETE

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="project_id", param_type=ParameterType.INTEGER, required=True
            ),  # Project ID,
            Parameter(
                name="username", param_type=ParameterType.STRING, required=True
            ),  # GitHub username
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="status", param_type=OutputParameterType.STRING, is_array=False
            ),  # Operation status
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                DELETE_projectsproject_idcollaboratorsusername.method,
                DELETE_projectsproject_idcollaboratorsusername.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'DELETE_projectsproject_idcollaboratorsusername': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class GET_projectsproject_idcollaboratorsusernamepermission(BaseFunction):
    """Get user's permission."""

    name = "GET /projects/{project_id}/collaborators/{username}/permission"
    url = "https://docs.github.com/en/rest/projects/collaborators#get-project-permission-for-a-user"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="project_id", param_type=ParameterType.INTEGER, required=True
            ),  # Project ID,
            Parameter(
                name="username", param_type=ParameterType.STRING, required=True
            ),  # GitHub username
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="permission", param_type=OutputParameterType.STRING, is_array=False
            ),  # Permission level
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                GET_projectsproject_idcollaboratorsusernamepermission.method,
                GET_projectsproject_idcollaboratorsusernamepermission.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'GET_projectsproject_idcollaboratorsusernamepermission': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Get_a_selfhosted_runner_for_a_repository(BaseFunction):
    """"""

    name = "Get a self-hosted runner for a repository"
    url = "https://docs.github.com/en/rest/actions/self-hosted-runners#get-a-self-hosted-runner-for-a-repository"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name,
            Parameter(
                name="runner_id", param_type=ParameterType.INTEGER, required=True
            ),  # ID of the self-hosted runner
        ]

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Get_a_selfhosted_runner_for_a_repository.method,
                Get_a_selfhosted_runner_for_a_repository.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_a_selfhosted_runner_for_a_repository': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class List_labels_for_a_selfhosted_runner_for_a_repository(BaseFunction):
    """"""

    name = "List labels for a self-hosted runner for a repository"
    url = "https://docs.github.com/en/rest/actions/self-hosted-runners#list-labels-for-a-self-hosted-runner-for-a-repository"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name,
            Parameter(
                name="runner_id", param_type=ParameterType.INTEGER, required=True
            ),  # ID of the self-hosted runner
        ]

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                List_labels_for_a_selfhosted_runner_for_a_repository.method,
                List_labels_for_a_selfhosted_runner_for_a_repository.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'List_labels_for_a_selfhosted_runner_for_a_repository': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Get_all_autolinks_of_a_repository(BaseFunction):
    """"""

    name = "Get all autolinks of a repository"
    url = "https://docs.github.com/en/rest/repos/autolinks#get-all-autolinks-of-a-repository"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name
        ]

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Get_all_autolinks_of_a_repository.method,
                Get_all_autolinks_of_a_repository.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = (
                f"Error running function 'Get_all_autolinks_of_a_repository': {str(e)}"
            )
            logging.error(error_msg)
            raise ValueError(error_msg)


class Get_an_autolink_reference_of_a_repository(BaseFunction):
    """"""

    name = "Get an autolink reference of a repository"
    url = "https://docs.github.com/en/rest/repos/autolinks#get-an-autolink-reference-of-a-repository"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name,
            Parameter(
                name="autolink_id", param_type=ParameterType.INTEGER, required=True
            ),  # ID of the autolink
        ]

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Get_an_autolink_reference_of_a_repository.method,
                Get_an_autolink_reference_of_a_repository.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_an_autolink_reference_of_a_repository': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Check_if_dependabot_security_updates_are_enabled_for_a_repository(BaseFunction):
    """"""

    name = "Check if dependabot security updates are enabled for a repository"
    url = "https://docs.github.com/en/rest/repos/repos#check-if-dependabot-security-updates-are-enabled-for-a-repository"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name
        ]

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Check_if_dependabot_security_updates_are_enabled_for_a_repository.method,
                Check_if_dependabot_security_updates_are_enabled_for_a_repository.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Check_if_dependabot_security_updates_are_enabled_for_a_repository': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Get_protection_status_of_a_branch(BaseFunction):
    """"""

    name = "Get protection status of a branch"
    url = "https://docs.github.com/en/rest/branches/branch-protection#get-branch-protection"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name,
            Parameter(
                name="branch", param_type=ParameterType.STRING, required=True
            ),  # Branch name
        ]

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Get_protection_status_of_a_branch.method,
                Get_protection_status_of_a_branch.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = (
                f"Error running function 'Get_protection_status_of_a_branch': {str(e)}"
            )
            logging.error(error_msg)
            raise ValueError(error_msg)


class Get_admin_branch_protection(BaseFunction):
    """"""

    name = "Get admin branch protection"
    url = "https://docs.github.com/en/rest/branches/branch-protection#get-admin-branch-protection"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name,
            Parameter(
                name="branch", param_type=ParameterType.STRING, required=True
            ),  # Branch name
        ]

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Get_admin_branch_protection.method,
                Get_admin_branch_protection.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = (
                f"Error running function 'Get_admin_branch_protection': {str(e)}"
            )
            logging.error(error_msg)
            raise ValueError(error_msg)


class Get_pull_request_review_protection(BaseFunction):
    """"""

    name = "Get pull request review protection"
    url = "https://docs.github.com/en/rest/branches/branch-protection#get-pull-request-review-protection"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name,
            Parameter(
                name="branch", param_type=ParameterType.STRING, required=True
            ),  # Branch name
        ]

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Get_pull_request_review_protection.method,
                Get_pull_request_review_protection.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = (
                f"Error running function 'Get_pull_request_review_protection': {str(e)}"
            )
            logging.error(error_msg)
            raise ValueError(error_msg)


class Get_commit_signature_protection(BaseFunction):
    """"""

    name = "Get commit signature protection"
    url = "https://docs.github.com/en/rest/branches/branch-protection#get-commit-signature-protection"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name,
            Parameter(
                name="branch", param_type=ParameterType.STRING, required=True
            ),  # Branch name
        ]

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Get_commit_signature_protection.method,
                Get_commit_signature_protection.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = (
                f"Error running function 'Get_commit_signature_protection': {str(e)}"
            )
            logging.error(error_msg)
            raise ValueError(error_msg)


class Get_status_checks_protection(BaseFunction):
    """"""

    name = "Get status checks protection"
    url = "https://docs.github.com/en/rest/branches/branch-protection#get-status-checks-protection"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name,
            Parameter(
                name="branch", param_type=ParameterType.STRING, required=True
            ),  # Branch name
        ]

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Get_status_checks_protection.method,
                Get_status_checks_protection.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = (
                f"Error running function 'Get_status_checks_protection': {str(e)}"
            )
            logging.error(error_msg)
            raise ValueError(error_msg)


class Get_all_status_check_contexts(BaseFunction):
    """"""

    name = "Get all status check contexts"
    url = "https://docs.github.com/en/rest/branches/branch-protection#get-all-status-check-contexts"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name,
            Parameter(
                name="branch", param_type=ParameterType.STRING, required=True
            ),  # Branch name
        ]

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Get_all_status_check_contexts.method,
                Get_all_status_check_contexts.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = (
                f"Error running function 'Get_all_status_check_contexts': {str(e)}"
            )
            logging.error(error_msg)
            raise ValueError(error_msg)


class Get_access_restrictions(BaseFunction):
    """"""

    name = "Get access restrictions"
    url = "https://docs.github.com/en/rest/branches/branch-protection#get-access-restrictions"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name,
            Parameter(
                name="branch", param_type=ParameterType.STRING, required=True
            ),  # Branch name
        ]

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Get_access_restrictions.method,
                Get_access_restrictions.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_access_restrictions': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Get_apps_with_access_to_the_protected_branch(BaseFunction):
    """"""

    name = "Get apps with access to the protected branch"
    url = "https://docs.github.com/en/rest/branches/branch-protection#get-apps-with-access-to-the-protected-branch"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name,
            Parameter(
                name="branch", param_type=ParameterType.STRING, required=True
            ),  # Branch name
        ]

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Get_apps_with_access_to_the_protected_branch.method,
                Get_apps_with_access_to_the_protected_branch.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_apps_with_access_to_the_protected_branch': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Get_teams_with_access_to_the_protected_branch(BaseFunction):
    """"""

    name = "Get teams with access to the protected branch"
    url = "https://docs.github.com/en/rest/branches/branch-protection#get-teams-with-access-to-the-protected-branch"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name,
            Parameter(
                name="branch", param_type=ParameterType.STRING, required=True
            ),  # Branch name
        ]

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Get_teams_with_access_to_the_protected_branch.method,
                Get_teams_with_access_to_the_protected_branch.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_teams_with_access_to_the_protected_branch': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Get_users_with_access_to_the_protected_branch(BaseFunction):
    """"""

    name = "Get users with access to the protected branch"
    url = "https://docs.github.com/en/rest/branches/branch-protection#get-users-with-access-to-the-protected-branch"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name,
            Parameter(
                name="branch", param_type=ParameterType.STRING, required=True
            ),  # Branch name
        ]

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Get_users_with_access_to_the_protected_branch.method,
                Get_users_with_access_to_the_protected_branch.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_users_with_access_to_the_protected_branch': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Get_code_scanning_default_setup(BaseFunction):
    """"""

    name = "Get code scanning default setup"
    url = "https://docs.github.com/en/rest/code-scanning/code-scanning#get-a-code-scanning-default-setup-configuration"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name
        ]

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Get_code_scanning_default_setup.method,
                Get_code_scanning_default_setup.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = (
                f"Error running function 'Get_code_scanning_default_setup': {str(e)}"
            )
            logging.error(error_msg)
            raise ValueError(error_msg)


class Get_code_security_configuration(BaseFunction):
    """"""

    name = "Get code security configuration"
    url = "https://docs.github.com/en/rest/code-security/configurations#get-the-code-security-configuration-associated-with-a-repository"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name
        ]

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Get_code_security_configuration.method,
                Get_code_security_configuration.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = (
                f"Error running function 'Get_code_security_configuration': {str(e)}"
            )
            logging.error(error_msg)
            raise ValueError(error_msg)


class List_deployment_protection_rules_apps_in_an_environment(BaseFunction):
    """"""

    name = "List deployment protection rules apps in an environment"
    url = "https://docs.github.com/en/rest/deployments/protection-rules#list-custom-deployment-rule-integrations-available-for-an-environment"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name,
            Parameter(
                name="environment_name", param_type=ParameterType.STRING, required=True
            ),  # Environment name
        ]

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                List_deployment_protection_rules_apps_in_an_environment.method,
                List_deployment_protection_rules_apps_in_an_environment.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'List_deployment_protection_rules_apps_in_an_environment': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Get_interaction_restrictions_for_a_repository(BaseFunction):
    """"""

    name = "Get interaction restrictions for a repository"
    url = "https://docs.github.com/en/rest/interactions/repos#get-interaction-restrictions-for-a-repository"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name
        ]

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Get_interaction_restrictions_for_a_repository.method,
                Get_interaction_restrictions_for_a_repository.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_interaction_restrictions_for_a_repository': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class List_repository_invitations_for_the_authenticated_user(BaseFunction):
    """"""

    name = "List repository invitations for the authenticated user"
    url = "https://docs.github.com/en/rest/collaborators/invitations#list-repository-invitations-for-the-authenticated-user"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name
        ]

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                List_repository_invitations_for_the_authenticated_user.method,
                List_repository_invitations_for_the_authenticated_user.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'List_repository_invitations_for_the_authenticated_user': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class List_deploy_keys_for_a_repository(BaseFunction):
    """"""

    name = "List deploy keys for a repository"
    url = "https://docs.github.com/en/rest/deploy-keys/deploy-keys#list-deploy-keys"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name
        ]

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                List_deploy_keys_for_a_repository.method,
                List_deploy_keys_for_a_repository.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = (
                f"Error running function 'List_deploy_keys_for_a_repository': {str(e)}"
            )
            logging.error(error_msg)
            raise ValueError(error_msg)


class Get_a_deploy_key_for_a_repository(BaseFunction):
    """"""

    name = "Get a deploy key for a repository"
    url = "https://docs.github.com/en/rest/deploy-keys/deploy-keys#get-a-deploy-key"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name,
            Parameter(
                name="key_id", param_type=ParameterType.INTEGER, required=True
            ),  # ID of the deploy key
        ]

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Get_a_deploy_key_for_a_repository.method,
                Get_a_deploy_key_for_a_repository.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = (
                f"Error running function 'Get_a_deploy_key_for_a_repository': {str(e)}"
            )
            logging.error(error_msg)
            raise ValueError(error_msg)


class Get_list_of_list_tag_protection_states_for_a_repository(BaseFunction):
    """"""

    name = "Get list of list tag protection states for a repository"
    url = "https://docs.github.com/en/rest/repos/tags#closing-down---list-tag-protection-states-for-a-repository"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name
        ]

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Get_list_of_list_tag_protection_states_for_a_repository.method,
                Get_list_of_list_tag_protection_states_for_a_repository.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_list_of_list_tag_protection_states_for_a_repository': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class List_repository_teams(BaseFunction):
    """"""

    name = "List repository teams"
    url = "https://docs.github.com/en/rest/repos/repos#list-repository-teams"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name
        ]

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                List_repository_teams.method,
                List_repository_teams.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'List_repository_teams': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Get_repository_traffic_clones(BaseFunction):
    """"""

    name = "Get repository traffic clones"
    url = "https://docs.github.com/en/rest/metrics/traffic#get-repository-clones"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name
        ]

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Get_repository_traffic_clones.method,
                Get_repository_traffic_clones.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = (
                f"Error running function 'Get_repository_traffic_clones': {str(e)}"
            )
            logging.error(error_msg)
            raise ValueError(error_msg)


class Get_repository_traffic_popular_paths(BaseFunction):
    """"""

    name = "Get repository traffic popular paths"
    url = "https://docs.github.com/en/rest/metrics/traffic#get-top-referral-paths"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name
        ]

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Get_repository_traffic_popular_paths.method,
                Get_repository_traffic_popular_paths.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_repository_traffic_popular_paths': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Get_repository_traffic_referrers(BaseFunction):
    """"""

    name = "Get repository traffic referrers"
    url = "https://docs.github.com/en/rest/metrics/traffic#get-top-referral-sources"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name
        ]

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Get_repository_traffic_referrers.method,
                Get_repository_traffic_referrers.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = (
                f"Error running function 'Get_repository_traffic_referrers': {str(e)}"
            )
            logging.error(error_msg)
            raise ValueError(error_msg)


class Get_page_views_of_a_repository(BaseFunction):
    """"""

    name = "Get page views of a repository"
    url = "https://docs.github.com/en/rest/metrics/traffic#get-page-views"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name
        ]

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Get_page_views_of_a_repository.method,
                Get_page_views_of_a_repository.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = (
                f"Error running function 'Get_page_views_of_a_repository': {str(e)}"
            )
            logging.error(error_msg)
            raise ValueError(error_msg)


class Check_if_vulnerability_alerts_are_enabled_for_a_repository(BaseFunction):
    """"""

    name = "Check if vulnerability alerts are enabled for a repository"
    url = "https://docs.github.com/en/rest/repos/repos#check-if-vulnerability-alerts-are-enabled-for-a-repository"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name
        ]

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Check_if_vulnerability_alerts_are_enabled_for_a_repository.method,
                Check_if_vulnerability_alerts_are_enabled_for_a_repository.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Check_if_vulnerability_alerts_are_enabled_for_a_repository': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class List_repository_invitations_for_the_authenticated_user(BaseFunction):
    """"""

    name = "List repository invitations for the authenticated user"
    url = "https://docs.github.com/en/rest/collaborators/invitations#list-repository-invitations-for-the-authenticated-user"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name
        ]

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                List_repository_invitations_for_the_authenticated_user.method,
                List_repository_invitations_for_the_authenticated_user.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'List_repository_invitations_for_the_authenticated_user': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Create_an_attestation_for_a_repository(BaseFunction):
    """"""

    name = "Create an attestation for a repository"
    url = "https://docs.github.com/en/rest/repos/repos#create-an-attestation"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name
        ]

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Create_an_attestation_for_a_repository.method,
                Create_an_attestation_for_a_repository.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Create_an_attestation_for_a_repository': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class List_attestations_for_a_subject(BaseFunction):
    """"""

    name = "List attestations for a subject"
    url = "https://docs.github.com/en/rest/repos/repos#list-attestations"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name,
            Parameter(
                name="subject_digest", param_type=ParameterType.STRING, required=True
            ),  # Subject digest
        ]

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                List_attestations_for_a_subject.method,
                List_attestations_for_a_subject.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = (
                f"Error running function 'List_attestations_for_a_subject': {str(e)}"
            )
            logging.error(error_msg)
            raise ValueError(error_msg)


class Create_a_check_run(BaseFunction):
    """"""

    name = "Create a check run"
    url = "https://docs.github.com/en/rest/checks/runs#create-a-check-run"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name
        ]

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Create_a_check_run.method,
                Create_a_check_run.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Create_a_check_run': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Update_a_check_run(BaseFunction):
    """"""

    name = "Update a check run"
    url = "https://docs.github.com/en/rest/checks/runs#update-a-check-run"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name,
            Parameter(
                name="check_run_id", param_type=ParameterType.INTEGER, required=True
            ),  # ID of the check run
        ]

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Update_a_check_run.method,
                Update_a_check_run.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Update_a_check_run': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class ReRequest_a_check_run(BaseFunction):
    """"""

    name = "Re-Request a check run"
    url = "https://docs.github.com/en/rest/checks/runs#rerequest-a-check-run"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name,
            Parameter(
                name="check_run_id", param_type=ParameterType.INTEGER, required=True
            ),  # ID of the check run
        ]

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                ReRequest_a_check_run.method,
                ReRequest_a_check_run.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'ReRequest_a_check_run': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Create_a_check_suite(BaseFunction):
    """"""

    name = "Create a check suite"
    url = "https://docs.github.com/en/rest/checks/suites#create-a-check-suite"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name
        ]

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Create_a_check_suite.method,
                Create_a_check_suite.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Create_a_check_suite': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Update_repository_preferences_for_check_suites(BaseFunction):
    """"""

    name = "Update repository preferences for check suites"
    url = "https://docs.github.com/en/rest/checks/suites#update-repository-preferences-for-check-suites"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name
        ]

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Update_repository_preferences_for_check_suites.method,
                Update_repository_preferences_for_check_suites.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Update_repository_preferences_for_check_suites': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class ReRequest_a_check_suite(BaseFunction):
    """"""

    name = "Re-Request a check suite"
    url = "https://docs.github.com/en/rest/checks/suites#rerequest-a-check-suite"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name,
            Parameter(
                name="check_suite_id", param_type=ParameterType.INTEGER, required=True
            ),  # ID of the check suite
        ]

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                ReRequest_a_check_suite.method,
                ReRequest_a_check_suite.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'ReRequest_a_check_suite': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Get_a_check_run(BaseFunction):
    """"""

    name = "Get a check run"
    url = "https://docs.github.com/en/rest/checks/runs#get-a-check-run"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name,
            Parameter(
                name="check_run_id", param_type=ParameterType.INTEGER, required=True
            ),  # ID of the check run
        ]

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Get_a_check_run.method, Get_a_check_run.url, input_data.validated_data
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_a_check_run': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class List_check_run_annotations(BaseFunction):
    """"""

    name = "List check run annotations"
    url = "https://docs.github.com/en/rest/checks/runs#list-check-run-annotations"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name,
            Parameter(
                name="check_run_id", param_type=ParameterType.INTEGER, required=True
            ),  # ID of the check run
        ]

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                List_check_run_annotations.method,
                List_check_run_annotations.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'List_check_run_annotations': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Get_a_check_suite(BaseFunction):
    """"""

    name = "Get a check suite"
    url = "https://docs.github.com/en/rest/checks/suites#get-a-check-suite"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name,
            Parameter(
                name="check_suite_id", param_type=ParameterType.INTEGER, required=True
            ),  # ID of the check suite
        ]

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Get_a_check_suite.method,
                Get_a_check_suite.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_a_check_suite': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class List_check_rans_in_a_check_suite(BaseFunction):
    """"""

    name = "List check rans in a check suite"
    url = "https://docs.github.com/en/rest/checks/runs#list-check-runs-in-a-check-suite"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name,
            Parameter(
                name="check_suite_id", param_type=ParameterType.INTEGER, required=True
            ),  # ID of the check suite
        ]

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                List_check_rans_in_a_check_suite.method,
                List_check_rans_in_a_check_suite.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = (
                f"Error running function 'List_check_rans_in_a_check_suite': {str(e)}"
            )
            logging.error(error_msg)
            raise ValueError(error_msg)


class List_check_runs_for_a_git_reference(BaseFunction):
    """"""

    name = "List check runs for a git reference"
    url = "https://docs.github.com/en/rest/checks/runs#list-check-runs-for-a-git-reference"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name,
            Parameter(
                name="ref", param_type=ParameterType.STRING, required=True
            ),  # Git reference
        ]

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                List_check_runs_for_a_git_reference.method,
                List_check_runs_for_a_git_reference.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'List_check_runs_for_a_git_reference': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class List_check_suites_for_a_git_reference(BaseFunction):
    """"""

    name = "List check suites for a git reference"
    url = "https://docs.github.com/en/rest/checks/suites#list-check-suites-for-a-git-reference"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name,
            Parameter(
                name="ref", param_type=ParameterType.STRING, required=True
            ),  # Git reference
        ]

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                List_check_suites_for_a_git_reference.method,
                List_check_suites_for_a_git_reference.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'List_check_suites_for_a_git_reference': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Update_a_code_scanning_alert(BaseFunction):
    """"""

    name = "Update a code scanning alert"
    url = "https://docs.github.com/en/rest/code-scanning/code-scanning#update-a-code-scanning-alert"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name,
            Parameter(
                name="alert_number", param_type=ParameterType.INTEGER, required=True
            ),  # Alert number
        ]

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Update_a_code_scanning_alert.method,
                Update_a_code_scanning_alert.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = (
                f"Error running function 'Update_a_code_scanning_alert': {str(e)}"
            )
            logging.error(error_msg)
            raise ValueError(error_msg)


class Create_an_autofix_for_a_code_scanning_alert(BaseFunction):
    """"""

    name = "Create an autofix for a code scanning alert"
    url = "https://docs.github.com/en/rest/code-scanning/code-scanning#create-an-autofix-for-a-code-scanning-alert"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name,
            Parameter(
                name="alert_number", param_type=ParameterType.INTEGER, required=True
            ),  # Alert number
        ]

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Create_an_autofix_for_a_code_scanning_alert.method,
                Create_an_autofix_for_a_code_scanning_alert.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Create_an_autofix_for_a_code_scanning_alert': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Delete_a_code_scanning_analysis_from_a_repository(BaseFunction):
    """"""

    name = "Delete a code scanning analysis from a repository"
    url = "https://docs.github.com/en/rest/code-scanning/code-scanning#delete-a-code-scanning-analysis-from-a-repository"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name,
            Parameter(
                name="analysis_id", param_type=ParameterType.INTEGER, required=True
            ),  # Analysis ID
        ]

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Delete_a_code_scanning_analysis_from_a_repository.method,
                Delete_a_code_scanning_analysis_from_a_repository.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Delete_a_code_scanning_analysis_from_a_repository': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Upload_an_analysis_as_SARIF_data(BaseFunction):
    """"""

    name = "Upload an analysis as SARIF data"
    url = "https://docs.github.com/en/rest/code-scanning/code-scanning#upload-an-analysis-as-sarif-data"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name
        ]

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Upload_an_analysis_as_SARIF_data.method,
                Upload_an_analysis_as_SARIF_data.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = (
                f"Error running function 'Upload_an_analysis_as_SARIF_data': {str(e)}"
            )
            logging.error(error_msg)
            raise ValueError(error_msg)


class List_code_scanning_alerts_for_an_organization(BaseFunction):
    """"""

    name = "List code scanning alerts for an organization"
    url = "https://docs.github.com/en/rest/code-scanning/code-scanning#list-code-scanning-alerts-for-an-organization"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="org", param_type=ParameterType.STRING, required=True
            ),  # Organization
        ]

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                List_code_scanning_alerts_for_an_organization.method,
                List_code_scanning_alerts_for_an_organization.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'List_code_scanning_alerts_for_an_organization': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class List_code_scanning_alerts_for_a_repository(BaseFunction):
    """"""

    name = "List code scanning alerts for a repository"
    url = "https://docs.github.com/en/rest/code-scanning/code-scanning#list-code-scanning-alerts-for-a-repository"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name
        ]

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                List_code_scanning_alerts_for_a_repository.method,
                List_code_scanning_alerts_for_a_repository.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'List_code_scanning_alerts_for_a_repository': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Get_a_specific_code_scanning_alert(BaseFunction):
    """"""

    name = "Get a specific code scanning alert"
    url = "https://docs.github.com/en/rest/code-scanning/code-scanning#get-a-code-scanning-alert"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name,
            Parameter(
                name="alert_number", param_type=ParameterType.INTEGER, required=True
            ),  # Alert number
        ]

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Get_a_specific_code_scanning_alert.method,
                Get_a_specific_code_scanning_alert.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = (
                f"Error running function 'Get_a_specific_code_scanning_alert': {str(e)}"
            )
            logging.error(error_msg)
            raise ValueError(error_msg)


class Get_the_status_of_an_autofix_for_a_code_scanning_alert(BaseFunction):
    """"""

    name = "Get the status of an autofix for a code scanning alert"
    url = "https://docs.github.com/en/rest/code-scanning/code-scanning#get-the-status-of-an-autofix-for-a-code-scanning-alert"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name,
            Parameter(
                name="alert_number", param_type=ParameterType.INTEGER, required=True
            ),  # Alert number
        ]

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Get_the_status_of_an_autofix_for_a_code_scanning_alert.method,
                Get_the_status_of_an_autofix_for_a_code_scanning_alert.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_the_status_of_an_autofix_for_a_code_scanning_alert': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class List_instances_of_a_code_scanning_alert(BaseFunction):
    """"""

    name = "List instances of a code scanning alert"
    url = "https://docs.github.com/en/rest/code-scanning/code-scanning#list-instances-of-a-code-scanning-alert"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name,
            Parameter(
                name="alert_number", param_type=ParameterType.INTEGER, required=True
            ),  # Alert number
        ]

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                List_instances_of_a_code_scanning_alert.method,
                List_instances_of_a_code_scanning_alert.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'List_instances_of_a_code_scanning_alert': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class List_code_scanning_analyses_for_a_repository(BaseFunction):
    """"""

    name = "List code scanning analyses for a repository"
    url = "https://docs.github.com/en/rest/code-scanning/code-scanning#list-code-scanning-analyses-for-a-repository"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name
        ]

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                List_code_scanning_analyses_for_a_repository.method,
                List_code_scanning_analyses_for_a_repository.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'List_code_scanning_analyses_for_a_repository': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Get_a_code_scanning_analysis_for_a_repository(BaseFunction):
    """"""

    name = "Get a code scanning analysis for a repository"
    url = "https://docs.github.com/en/rest/code-scanning/code-scanning#get-a-code-scanning-analysis-for-a-repository"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name,
            Parameter(
                name="analysis_id", param_type=ParameterType.INTEGER, required=True
            ),  # Analysis ID
        ]

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Get_a_code_scanning_analysis_for_a_repository.method,
                Get_a_code_scanning_analysis_for_a_repository.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_a_code_scanning_analysis_for_a_repository': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Get_information_about_a_SARIF_upload(BaseFunction):
    """"""

    name = "Get information about a SARIF upload"
    url = "https://docs.github.com/en/rest/code-scanning/code-scanning#get-information-about-a-sarif-upload"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name,
            Parameter(
                name="sarif_id", param_type=ParameterType.STRING, required=True
            ),  # SARIF upload ID
        ]

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Get_information_about_a_SARIF_upload.method,
                Get_information_about_a_SARIF_upload.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_information_about_a_SARIF_upload': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class List_custom_deployment_rule_applications_in_an_environment(BaseFunction):
    """"""

    name = "List custom deployment rule applications in an environment"
    url = "https://docs.github.com/en/rest/deployments/protection-rules#list-custom-deployment-rule-integrations-available-for-an-environment"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name,
            Parameter(
                name="environment_name", param_type=ParameterType.STRING, required=True
            ),  # Environment name
        ]

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                List_custom_deployment_rule_applications_in_an_environment.method,
                List_custom_deployment_rule_applications_in_an_environment.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'List_custom_deployment_rule_applications_in_an_environment': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Get_interaction_restrictions_for_a_repository(BaseFunction):
    """"""

    name = "Get interaction restrictions for a repository"
    url = "https://docs.github.com/en/rest/interactions/repos#get-interaction-restrictions-for-a-repository"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name
        ]

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Get_interaction_restrictions_for_a_repository.method,
                Get_interaction_restrictions_for_a_repository.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_interaction_restrictions_for_a_repository': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class List_repository_invitations_for_the_authenticated_user(BaseFunction):
    """"""

    name = "List repository invitations for the authenticated user"
    url = "https://docs.github.com/en/rest/collaborators/invitations#list-repository-invitations-for-the-authenticated-user"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name
        ]

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                List_repository_invitations_for_the_authenticated_user.method,
                List_repository_invitations_for_the_authenticated_user.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'List_repository_invitations_for_the_authenticated_user': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class List_deploy_keys_for_a_repository(BaseFunction):
    """"""

    name = "List deploy keys for a repository"
    url = "https://docs.github.com/en/rest/deploy-keys/deploy-keys#list-deploy-keys"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name
        ]

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                List_deploy_keys_for_a_repository.method,
                List_deploy_keys_for_a_repository.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = (
                f"Error running function 'List_deploy_keys_for_a_repository': {str(e)}"
            )
            logging.error(error_msg)
            raise ValueError(error_msg)


class Get_a_deploy_key_for_a_repository(BaseFunction):
    """"""

    name = "Get a deploy key for a repository"
    url = "https://docs.github.com/en/rest/deploy-keys/deploy-keys#get-a-deploy-key"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name,
            Parameter(
                name="key_id", param_type=ParameterType.INTEGER, required=True
            ),  # ID of the deploy key
        ]

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Get_a_deploy_key_for_a_repository.method,
                Get_a_deploy_key_for_a_repository.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = (
                f"Error running function 'Get_a_deploy_key_for_a_repository': {str(e)}"
            )
            logging.error(error_msg)
            raise ValueError(error_msg)


class Get_list_of_list_tag_protection_states_for_a_repository(BaseFunction):
    """"""

    name = "Get list of list tag protection states for a repository"
    url = "https://docs.github.com/en/rest/repos/tags#closing-down---list-tag-protection-states-for-a-repository"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name
        ]

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Get_list_of_list_tag_protection_states_for_a_repository.method,
                Get_list_of_list_tag_protection_states_for_a_repository.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_list_of_list_tag_protection_states_for_a_repository': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class List_repository_teams(BaseFunction):
    """"""

    name = "List repository teams"
    url = "https://docs.github.com/en/rest/repos/repos#list-repository-teams"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name
        ]

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                List_repository_teams.method,
                List_repository_teams.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'List_repository_teams': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Get_repository_traffic_clones(BaseFunction):
    """"""

    name = "Get repository traffic clones"
    url = "https://docs.github.com/en/rest/metrics/traffic#get-repository-clones"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name
        ]

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Get_repository_traffic_clones.method,
                Get_repository_traffic_clones.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = (
                f"Error running function 'Get_repository_traffic_clones': {str(e)}"
            )
            logging.error(error_msg)
            raise ValueError(error_msg)


class Get_repository_traffic_popular_paths(BaseFunction):
    """"""

    name = "Get repository traffic popular paths"
    url = "https://docs.github.com/en/rest/metrics/traffic#get-top-referral-paths"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name
        ]

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Get_repository_traffic_popular_paths.method,
                Get_repository_traffic_popular_paths.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_repository_traffic_popular_paths': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Get_repository_traffic_referrers(BaseFunction):
    """"""

    name = "Get repository traffic referrers"
    url = "https://docs.github.com/en/rest/metrics/traffic#get-top-referral-sources"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name
        ]

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Get_repository_traffic_referrers.method,
                Get_repository_traffic_referrers.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = (
                f"Error running function 'Get_repository_traffic_referrers': {str(e)}"
            )
            logging.error(error_msg)
            raise ValueError(error_msg)


class Get_page_views_of_a_repository(BaseFunction):
    """"""

    name = "Get page views of a repository"
    url = "https://docs.github.com/en/rest/metrics/traffic#get-page-views"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name
        ]

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Get_page_views_of_a_repository.method,
                Get_page_views_of_a_repository.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = (
                f"Error running function 'Get_page_views_of_a_repository': {str(e)}"
            )
            logging.error(error_msg)
            raise ValueError(error_msg)


class Check_if_vulnerability_alerts_are_enabled_for_a_repository(BaseFunction):
    """"""

    name = "Check if vulnerability alerts are enabled for a repository"
    url = "https://docs.github.com/en/rest/repos/repos#check-if-vulnerability-alerts-are-enabled-for-a-repository"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name
        ]

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Check_if_vulnerability_alerts_are_enabled_for_a_repository.method,
                Check_if_vulnerability_alerts_are_enabled_for_a_repository.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Check_if_vulnerability_alerts_are_enabled_for_a_repository': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class List_repository_invitations_for_the_authenticated_user(BaseFunction):
    """"""

    name = "List repository invitations for the authenticated user"
    url = "https://docs.github.com/en/rest/collaborators/invitations#list-repository-invitations-for-the-authenticated-user"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name
        ]

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                List_repository_invitations_for_the_authenticated_user.method,
                List_repository_invitations_for_the_authenticated_user.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'List_repository_invitations_for_the_authenticated_user': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Create_an_attestation_for_a_repository(BaseFunction):
    """"""

    name = "Create an attestation for a repository"
    url = "https://docs.github.com/en/rest/repos/repos#create-an-attestation"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name
        ]

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Create_an_attestation_for_a_repository.method,
                Create_an_attestation_for_a_repository.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Create_an_attestation_for_a_repository': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class List_attestations_for_a_subject(BaseFunction):
    """"""

    name = "List attestations for a subject"
    url = "https://docs.github.com/en/rest/repos/repos#list-attestations"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name,
            Parameter(
                name="subject_digest", param_type=ParameterType.STRING, required=True
            ),  # Subject digest
        ]

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                List_attestations_for_a_subject.method,
                List_attestations_for_a_subject.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = (
                f"Error running function 'List_attestations_for_a_subject': {str(e)}"
            )
            logging.error(error_msg)
            raise ValueError(error_msg)


class Create_a_check_run(BaseFunction):
    """"""

    name = "Create a check run"
    url = "https://docs.github.com/en/rest/checks/runs#create-a-check-run"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name
        ]

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Create_a_check_run.method,
                Create_a_check_run.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Create_a_check_run': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Update_a_check_run(BaseFunction):
    """"""

    name = "Update a check run"
    url = "https://docs.github.com/en/rest/checks/runs#update-a-check-run"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name,
            Parameter(
                name="check_run_id", param_type=ParameterType.INTEGER, required=True
            ),  # ID of the check run
        ]

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Update_a_check_run.method,
                Update_a_check_run.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Update_a_check_run': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class ReRequest_a_check_run(BaseFunction):
    """"""

    name = "Re-Request a check run"
    url = "https://docs.github.com/en/rest/checks/runs#rerequest-a-check-run"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name,
            Parameter(
                name="check_run_id", param_type=ParameterType.INTEGER, required=True
            ),  # ID of the check run
        ]

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                ReRequest_a_check_run.method,
                ReRequest_a_check_run.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'ReRequest_a_check_run': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Create_a_check_suite(BaseFunction):
    """"""

    name = "Create a check suite"
    url = "https://docs.github.com/en/rest/checks/suites#create-a-check-suite"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name
        ]

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Create_a_check_suite.method,
                Create_a_check_suite.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Create_a_check_suite': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Update_repository_preferences_for_check_suites(BaseFunction):
    """"""

    name = "Update repository preferences for check suites"
    url = "https://docs.github.com/en/rest/checks/suites#update-repository-preferences-for-check-suites"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name
        ]

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Update_repository_preferences_for_check_suites.method,
                Update_repository_preferences_for_check_suites.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Update_repository_preferences_for_check_suites': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class ReRequest_a_check_suite(BaseFunction):
    """"""

    name = "Re-Request a check suite"
    url = "https://docs.github.com/en/rest/checks/suites#rerequest-a-check-suite"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name,
            Parameter(
                name="check_suite_id", param_type=ParameterType.INTEGER, required=True
            ),  # ID of the check suite
        ]

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                ReRequest_a_check_suite.method,
                ReRequest_a_check_suite.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'ReRequest_a_check_suite': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Get_a_check_run(BaseFunction):
    """"""

    name = "Get a check run"
    url = "https://docs.github.com/en/rest/checks/runs#get-a-check-run"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name,
            Parameter(
                name="check_run_id", param_type=ParameterType.INTEGER, required=True
            ),  # ID of the check run
        ]

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Get_a_check_run.method, Get_a_check_run.url, input_data.validated_data
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_a_check_run': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class List_check_run_annotations(BaseFunction):
    """"""

    name = "List check run annotations"
    url = "https://docs.github.com/en/rest/checks/runs#list-check-run-annotations"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name,
            Parameter(
                name="check_run_id", param_type=ParameterType.INTEGER, required=True
            ),  # ID of the check run
        ]

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                List_check_run_annotations.method,
                List_check_run_annotations.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'List_check_run_annotations': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Get_a_check_suite(BaseFunction):
    """"""

    name = "Get a check suite"
    url = "https://docs.github.com/en/rest/checks/suites#get-a-check-suite"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name,
            Parameter(
                name="check_suite_id", param_type=ParameterType.INTEGER, required=True
            ),  # ID of the check suite
        ]

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Get_a_check_suite.method,
                Get_a_check_suite.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_a_check_suite': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class List_check_runs_in_a_check_suite(BaseFunction):
    """"""

    name = "List check runs in a check suite"
    url = "https://docs.github.com/en/rest/checks/runs#list-check-runs-in-a-check-suite"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name,
            Parameter(
                name="check_suite_id", param_type=ParameterType.INTEGER, required=True
            ),  # ID of the check suite
        ]

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                List_check_runs_in_a_check_suite.method,
                List_check_runs_in_a_check_suite.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = (
                f"Error running function 'List_check_runs_in_a_check_suite': {str(e)}"
            )
            logging.error(error_msg)
            raise ValueError(error_msg)


class List_check_runs_for_a_Git_reference(BaseFunction):
    """"""

    name = "List check runs for a Git reference"
    url = "https://docs.github.com/en/rest/checks/runs#list-check-runs-for-a-git-reference"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name,
            Parameter(
                name="ref", param_type=ParameterType.STRING, required=True
            ),  # Git reference
        ]

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                List_check_runs_for_a_Git_reference.method,
                List_check_runs_for_a_Git_reference.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'List_check_runs_for_a_Git_reference': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class List_check_suites_for_a_Git_reference(BaseFunction):
    """"""

    name = "List check suites for a Git reference"
    url = "https://docs.github.com/en/rest/checks/suites#list-check-suites-for-a-git-reference"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name,
            Parameter(
                name="ref", param_type=ParameterType.STRING, required=True
            ),  # Git reference
        ]

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                List_check_suites_for_a_Git_reference.method,
                List_check_suites_for_a_Git_reference.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'List_check_suites_for_a_Git_reference': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Update_a_code_scanning_alert(BaseFunction):
    """"""

    name = "Update a code scanning alert"
    url = "https://docs.github.com/en/rest/code-scanning/code-scanning#update-a-code-scanning-alert"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name,
            Parameter(
                name="alert_number", param_type=ParameterType.INTEGER, required=True
            ),  # Alert number
        ]

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Update_a_code_scanning_alert.method,
                Update_a_code_scanning_alert.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = (
                f"Error running function 'Update_a_code_scanning_alert': {str(e)}"
            )
            logging.error(error_msg)
            raise ValueError(error_msg)


class Create_an_autofix_for_a_code_scanning_alert(BaseFunction):
    """"""

    name = "Create an autofix for a code scanning alert"
    url = "https://docs.github.com/en/rest/code-scanning/code-scanning#create-an-autofix-for-a-code-scanning-alert"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name,
            Parameter(
                name="alert_number", param_type=ParameterType.INTEGER, required=True
            ),  # Alert number
        ]

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Create_an_autofix_for_a_code_scanning_alert.method,
                Create_an_autofix_for_a_code_scanning_alert.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Create_an_autofix_for_a_code_scanning_alert': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Delete_a_code_scanning_analysis_from_a_repository(BaseFunction):
    """"""

    name = "Delete a code scanning analysis from a repository"
    url = "https://docs.github.com/en/rest/code-scanning/code-scanning#delete-a-code-scanning-analysis-from-a-repository"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name,
            Parameter(
                name="analysis_id", param_type=ParameterType.INTEGER, required=True
            ),  # Analysis ID
        ]

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Delete_a_code_scanning_analysis_from_a_repository.method,
                Delete_a_code_scanning_analysis_from_a_repository.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Delete_a_code_scanning_analysis_from_a_repository': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Upload_an_analysis_as_SARIF_data(BaseFunction):
    """"""

    name = "Upload an analysis as SARIF data"
    url = "https://docs.github.com/en/rest/code-scanning/code-scanning#upload-an-analysis-as-sarif-data"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name
        ]

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Upload_an_analysis_as_SARIF_data.method,
                Upload_an_analysis_as_SARIF_data.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = (
                f"Error running function 'Upload_an_analysis_as_SARIF_data': {str(e)}"
            )
            logging.error(error_msg)
            raise ValueError(error_msg)


class List_code_scanning_alerts_for_an_organization(BaseFunction):
    """"""

    name = "List code scanning alerts for an organization"
    url = "https://docs.github.com/en/rest/code-scanning/code-scanning#list-code-scanning-alerts-for-an-organization"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="org", param_type=ParameterType.STRING, required=True
            ),  # Organization
        ]

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                List_code_scanning_alerts_for_an_organization.method,
                List_code_scanning_alerts_for_an_organization.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'List_code_scanning_alerts_for_an_organization': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class List_code_scanning_alerts_for_a_repository(BaseFunction):
    """"""

    name = "List code scanning alerts for a repository"
    url = "https://docs.github.com/en/rest/code-scanning/code-scanning#list-code-scanning-alerts-for-a-repository"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name
        ]

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                List_code_scanning_alerts_for_a_repository.method,
                List_code_scanning_alerts_for_a_repository.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'List_code_scanning_alerts_for_a_repository': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Get_a_specific_code_scanning_alert(BaseFunction):
    """"""

    name = "Get a specific code scanning alert"
    url = "https://docs.github.com/en/rest/code-scanning/code-scanning#get-a-code-scanning-alert"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name,
            Parameter(
                name="alert_number", param_type=ParameterType.INTEGER, required=True
            ),  # Alert number
        ]

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Get_a_specific_code_scanning_alert.method,
                Get_a_specific_code_scanning_alert.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = (
                f"Error running function 'Get_a_specific_code_scanning_alert': {str(e)}"
            )
            logging.error(error_msg)
            raise ValueError(error_msg)


class Get_the_status_of_an_autofix_for_a_code_scanning_alert(BaseFunction):
    """"""

    name = "Get the status of an autofix for a code scanning alert"
    url = "https://docs.github.com/en/rest/code-scanning/code-scanning#get-the-status-of-an-autofix-for-a-code-scanning-alert"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name,
            Parameter(
                name="alert_number", param_type=ParameterType.INTEGER, required=True
            ),  # Alert number
        ]

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Get_the_status_of_an_autofix_for_a_code_scanning_alert.method,
                Get_the_status_of_an_autofix_for_a_code_scanning_alert.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_the_status_of_an_autofix_for_a_code_scanning_alert': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class List_instances_of_a_code_scanning_alert(BaseFunction):
    """"""

    name = "List instances of a code scanning alert"
    url = "https://docs.github.com/en/rest/code-scanning/code-scanning#list-instances-of-a-code-scanning-alert"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name,
            Parameter(
                name="alert_number", param_type=ParameterType.INTEGER, required=True
            ),  # Alert number
        ]

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                List_instances_of_a_code_scanning_alert.method,
                List_instances_of_a_code_scanning_alert.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'List_instances_of_a_code_scanning_alert': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class List_code_scanning_analyses_for_a_repository(BaseFunction):
    """"""

    name = "List code scanning analyses for a repository"
    url = "https://docs.github.com/en/rest/code-scanning/code-scanning#list-code-scanning-analyses-for-a-repository"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name
        ]

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                List_code_scanning_analyses_for_a_repository.method,
                List_code_scanning_analyses_for_a_repository.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'List_code_scanning_analyses_for_a_repository': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Get_a_code_scanning_analysis_for_a_repository(BaseFunction):
    """"""

    name = "Get a code scanning analysis for a repository"
    url = "https://docs.github.com/en/rest/code-scanning/code-scanning#get-a-code-scanning-analysis-for-a-repository"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name,
            Parameter(
                name="analysis_id", param_type=ParameterType.INTEGER, required=True
            ),  # Analysis ID
        ]

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Get_a_code_scanning_analysis_for_a_repository.method,
                Get_a_code_scanning_analysis_for_a_repository.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_a_code_scanning_analysis_for_a_repository': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Get_information_about_a_SARIF_upload(BaseFunction):
    """"""

    name = "Get information about a SARIF upload"
    url = "https://docs.github.com/en/rest/code-scanning/code-scanning#get-information-about-a-sarif-upload"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name,
            Parameter(
                name="sarif_id", param_type=ParameterType.STRING, required=True
            ),  # SARIF upload ID
        ]

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Get_information_about_a_SARIF_upload.method,
                Get_information_about_a_SARIF_upload.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_information_about_a_SARIF_upload': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class List_custom_deployment_rule_applications_in_an_environment(BaseFunction):
    """"""

    name = "List custom deployment rule applications in an environment"
    url = "https://docs.github.com/en/rest/deployments/protection-rules#list-custom-deployment-rule-integrations-available-for-an-environment"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name,
            Parameter(
                name="environment_name", param_type=ParameterType.STRING, required=True
            ),  # Environment name
        ]

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                List_custom_deployment_rule_applications_in_an_environment.method,
                List_custom_deployment_rule_applications_in_an_environment.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'List_custom_deployment_rule_applications_in_an_environment': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Get_interaction_restrictions_for_a_repository(BaseFunction):
    """"""

    name = "Get interaction restrictions for a repository"
    url = "https://docs.github.com/en/rest/interactions/repos#get-interaction-restrictions-for-a-repository"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name
        ]

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Get_interaction_restrictions_for_a_repository.method,
                Get_interaction_restrictions_for_a_repository.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_interaction_restrictions_for_a_repository': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class List_repository_invitations_for_the_authenticated_user(BaseFunction):
    """"""

    name = "List repository invitations for the authenticated user"
    url = "https://docs.github.com/en/rest/collaborators/invitations#list-repository-invitations-for-the-authenticated-user"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name
        ]

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                List_repository_invitations_for_the_authenticated_user.method,
                List_repository_invitations_for_the_authenticated_user.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'List_repository_invitations_for_the_authenticated_user': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class List_deploy_keys_for_a_repository(BaseFunction):
    """"""

    name = "List deploy keys for a repository"
    url = "https://docs.github.com/en/rest/deploy-keys/deploy-keys#list-deploy-keys"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name
        ]

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                List_deploy_keys_for_a_repository.method,
                List_deploy_keys_for_a_repository.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = (
                f"Error running function 'List_deploy_keys_for_a_repository': {str(e)}"
            )
            logging.error(error_msg)
            raise ValueError(error_msg)


class Get_a_deploy_key_for_a_repository(BaseFunction):
    """"""

    name = "Get a deploy key for a repository"
    url = "https://docs.github.com/en/rest/deploy-keys/deploy-keys#get-a-deploy-key"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name,
            Parameter(
                name="key_id", param_type=ParameterType.INTEGER, required=True
            ),  # ID of the deploy key
        ]

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Get_a_deploy_key_for_a_repository.method,
                Get_a_deploy_key_for_a_repository.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = (
                f"Error running function 'Get_a_deploy_key_for_a_repository': {str(e)}"
            )
            logging.error(error_msg)
            raise ValueError(error_msg)


class Get_list_of_list_tag_protection_states_for_a_repository(BaseFunction):
    """"""

    name = "Get list of list tag protection states for a repository"
    url = "https://docs.github.com/en/rest/repos/tags#closing-down---list-tag-protection-states-for-a-repository"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name
        ]

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Get_list_of_list_tag_protection_states_for_a_repository.method,
                Get_list_of_list_tag_protection_states_for_a_repository.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_list_of_list_tag_protection_states_for_a_repository': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class List_repository_teams(BaseFunction):
    """"""

    name = "List repository teams"
    url = "https://docs.github.com/en/rest/repos/repos#list-repository-teams"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name
        ]

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                List_repository_teams.method,
                List_repository_teams.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'List_repository_teams': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Get_repository_traffic_clones(BaseFunction):
    """"""

    name = "Get repository traffic clones"
    url = "https://docs.github.com/en/rest/metrics/traffic#get-repository-clones"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name
        ]

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Get_repository_traffic_clones.method,
                Get_repository_traffic_clones.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = (
                f"Error running function 'Get_repository_traffic_clones': {str(e)}"
            )
            logging.error(error_msg)
            raise ValueError(error_msg)


class Get_repository_traffic_popular_paths(BaseFunction):
    """"""

    name = "Get repository traffic popular paths"
    url = "https://docs.github.com/en/rest/metrics/traffic#get-top-referral-paths"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name
        ]

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Get_repository_traffic_popular_paths.method,
                Get_repository_traffic_popular_paths.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_repository_traffic_popular_paths': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Get_repository_traffic_referrers(BaseFunction):
    """"""

    name = "Get repository traffic referrers"
    url = "https://docs.github.com/en/rest/metrics/traffic#get-top-referral-sources"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name
        ]

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Get_repository_traffic_referrers.method,
                Get_repository_traffic_referrers.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = (
                f"Error running function 'Get_repository_traffic_referrers': {str(e)}"
            )
            logging.error(error_msg)
            raise ValueError(error_msg)


class Get_page_views_of_a_repository(BaseFunction):
    """"""

    name = "Get page views of a repository"
    url = "https://docs.github.com/en/rest/metrics/traffic#get-page-views"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name
        ]

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Get_page_views_of_a_repository.method,
                Get_page_views_of_a_repository.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = (
                f"Error running function 'Get_page_views_of_a_repository': {str(e)}"
            )
            logging.error(error_msg)
            raise ValueError(error_msg)


class Check_if_vulnerability_alerts_are_enabled_for_a_repository(BaseFunction):
    """"""

    name = "Check if vulnerability alerts are enabled for a repository"
    url = "https://docs.github.com/en/rest/repos/repos#check-if-vulnerability-alerts-are-enabled-for-a-repository"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name
        ]

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Check_if_vulnerability_alerts_are_enabled_for_a_repository.method,
                Check_if_vulnerability_alerts_are_enabled_for_a_repository.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Check_if_vulnerability_alerts_are_enabled_for_a_repository': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class List_repository_invitations_for_the_authenticated_user(BaseFunction):
    """"""

    name = "List repository invitations for the authenticated user"
    url = "https://docs.github.com/en/rest/collaborators/invitations#list-repository-invitations-for-the-authenticated-user"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name
        ]

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                List_repository_invitations_for_the_authenticated_user.method,
                List_repository_invitations_for_the_authenticated_user.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'List_repository_invitations_for_the_authenticated_user': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Create_an_attestation_for_a_repository(BaseFunction):
    """"""

    name = "Create an attestation for a repository"
    url = "https://docs.github.com/en/rest/repos/repos#create-an-attestation"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name
        ]

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Create_an_attestation_for_a_repository.method,
                Create_an_attestation_for_a_repository.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Create_an_attestation_for_a_repository': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class List_attestations_for_a_subject(BaseFunction):
    """"""

    name = "List attestations for a subject"
    url = "https://docs.github.com/en/rest/repos/repos#list-attestations"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name,
            Parameter(
                name="subject_digest", param_type=ParameterType.STRING, required=True
            ),  # Subject digest
        ]

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                List_attestations_for_a_subject.method,
                List_attestations_for_a_subject.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = (
                f"Error running function 'List_attestations_for_a_subject': {str(e)}"
            )
            logging.error(error_msg)
            raise ValueError(error_msg)


class Create_a_check_run(BaseFunction):
    """"""

    name = "Create a check run"
    url = "https://docs.github.com/en/rest/checks/runs#create-a-check-run"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name
        ]

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Create_a_check_run.method,
                Create_a_check_run.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Create_a_check_run': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Update_a_check_run(BaseFunction):
    """"""

    name = "Update a check run"
    url = "https://docs.github.com/en/rest/checks/runs#update-a-check-run"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name,
            Parameter(
                name="check_run_id", param_type=ParameterType.INTEGER, required=True
            ),  # ID of the check run
        ]

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Update_a_check_run.method,
                Update_a_check_run.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Update_a_check_run': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class ReRequest_a_check_run(BaseFunction):
    """"""

    name = "Re-Request a check run"
    url = "https://docs.github.com/en/rest/checks/runs#rerequest-a-check-run"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name,
            Parameter(
                name="check_run_id", param_type=ParameterType.INTEGER, required=True
            ),  # ID of the check run
        ]

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                ReRequest_a_check_run.method,
                ReRequest_a_check_run.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'ReRequest_a_check_run': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Create_a_check_suite(BaseFunction):
    """"""

    name = "Create a check suite"
    url = "https://docs.github.com/en/rest/checks/suites#create-a-check-suite"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name
        ]

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Create_a_check_suite.method,
                Create_a_check_suite.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Create_a_check_suite': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Update_repository_preferences_for_check_suites(BaseFunction):
    """"""

    name = "Update repository preferences for check suites"
    url = "https://docs.github.com/en/rest/checks/suites#update-repository-preferences-for-check-suites"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name
        ]

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Update_repository_preferences_for_check_suites.method,
                Update_repository_preferences_for_check_suites.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Update_repository_preferences_for_check_suites': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class ReRequest_a_check_suite(BaseFunction):
    """"""

    name = "Re-Request a check suite"
    url = "https://docs.github.com/en/rest/checks/suites#rerequest-a-check-suite"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name,
            Parameter(
                name="check_suite_id", param_type=ParameterType.INTEGER, required=True
            ),  # ID of the check suite
        ]

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                ReRequest_a_check_suite.method,
                ReRequest_a_check_suite.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'ReRequest_a_check_suite': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Get_a_check_run(BaseFunction):
    """"""

    name = "Get a check run"
    url = "https://docs.github.com/en/rest/checks/runs#get-a-check-run"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name,
            Parameter(
                name="check_run_id", param_type=ParameterType.INTEGER, required=True
            ),  # ID of the check run
        ]

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Get_a_check_run.method, Get_a_check_run.url, input_data.validated_data
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_a_check_run': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class List_check_run_annotations(BaseFunction):
    """"""

    name = "List check run annotations"
    url = "https://docs.github.com/en/rest/checks/runs#list-check-run-annotations"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name,
            Parameter(
                name="check_run_id", param_type=ParameterType.INTEGER, required=True
            ),  # ID of the check run
        ]

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                List_check_run_annotations.method,
                List_check_run_annotations.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'List_check_run_annotations': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Get_a_check_suite(BaseFunction):
    """"""

    name = "Get a check suite"
    url = "https://docs.github.com/en/rest/checks/suites#get-a-check-suite"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name,
            Parameter(
                name="check_suite_id", param_type=ParameterType.INTEGER, required=True
            ),  # ID of the check suite
        ]

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Get_a_check_suite.method,
                Get_a_check_suite.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_a_check_suite': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class List_check_runs_in_a_check_suite(BaseFunction):
    """"""

    name = "List check runs in a check suite"
    url = "https://docs.github.com/en/rest/checks/runs#list-check-runs-in-a-check-suite"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name,
            Parameter(
                name="check_suite_id", param_type=ParameterType.INTEGER, required=True
            ),  # ID of the check suite
        ]

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                List_check_runs_in_a_check_suite.method,
                List_check_runs_in_a_check_suite.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = (
                f"Error running function 'List_check_runs_in_a_check_suite': {str(e)}"
            )
            logging.error(error_msg)
            raise ValueError(error_msg)


class List_check_runs_for_a_Git_reference(BaseFunction):
    """"""

    name = "List check runs for a Git reference"
    url = "https://docs.github.com/en/rest/checks/runs#list-check-runs-for-a-git-reference"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name,
            Parameter(
                name="ref", param_type=ParameterType.STRING, required=True
            ),  # Git reference
        ]

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                List_check_runs_for_a_Git_reference.method,
                List_check_runs_for_a_Git_reference.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'List_check_runs_for_a_Git_reference': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class List_check_suites_for_a_Git_reference(BaseFunction):
    """"""

    name = "List check suites for a Git reference"
    url = "https://docs.github.com/en/rest/checks/suites#list-check-suites-for-a-git-reference"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name,
            Parameter(
                name="ref", param_type=ParameterType.STRING, required=True
            ),  # Git reference
        ]

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                List_check_suites_for_a_Git_reference.method,
                List_check_suites_for_a_Git_reference.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'List_check_suites_for_a_Git_reference': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Update_a_code_scanning_alert(BaseFunction):
    """"""

    name = "Update a code scanning alert"
    url = "https://docs.github.com/en/rest/code-scanning/code-scanning#update-a-code-scanning-alert"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name,
            Parameter(
                name="alert_number", param_type=ParameterType.INTEGER, required=True
            ),  # Alert number
        ]

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Update_a_code_scanning_alert.method,
                Update_a_code_scanning_alert.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = (
                f"Error running function 'Update_a_code_scanning_alert': {str(e)}"
            )
            logging.error(error_msg)
            raise ValueError(error_msg)


class Create_an_autofix_for_a_code_scanning_alert(BaseFunction):
    """"""

    name = "Create an autofix for a code scanning alert"
    url = "https://docs.github.com/en/rest/code-scanning/code-scanning#create-an-autofix-for-a-code-scanning-alert"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name,
            Parameter(
                name="alert_number", param_type=ParameterType.INTEGER, required=True
            ),  # Alert number
        ]

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Create_an_autofix_for_a_code_scanning_alert.method,
                Create_an_autofix_for_a_code_scanning_alert.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Create_an_autofix_for_a_code_scanning_alert': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Delete_a_code_scanning_analysis_from_a_repository(BaseFunction):
    """"""

    name = "Delete a code scanning analysis from a repository"
    url = "https://docs.github.com/en/rest/code-scanning/code-scanning#delete-a-code-scanning-analysis-from-a-repository"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name,
            Parameter(
                name="analysis_id", param_type=ParameterType.INTEGER, required=True
            ),  # Analysis ID
        ]

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Delete_a_code_scanning_analysis_from_a_repository.method,
                Delete_a_code_scanning_analysis_from_a_repository.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Delete_a_code_scanning_analysis_from_a_repository': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Upload_an_analysis_as_SARIF_data(BaseFunction):
    """"""

    name = "Upload an analysis as SARIF data"
    url = "https://docs.github.com/en/rest/code-scanning/code-scanning#upload-an-analysis-as-sarif-data"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name
        ]

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Upload_an_analysis_as_SARIF_data.method,
                Upload_an_analysis_as_SARIF_data.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = (
                f"Error running function 'Upload_an_analysis_as_SARIF_data': {str(e)}"
            )
            logging.error(error_msg)
            raise ValueError(error_msg)


class List_code_scanning_alerts_for_an_organization(BaseFunction):
    """"""

    name = "List code scanning alerts for an organization"
    url = "https://docs.github.com/en/rest/code-scanning/code-scanning#list-code-scanning-alerts-for-an-organization"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="org", param_type=ParameterType.STRING, required=True
            ),  # Organization
        ]

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                List_code_scanning_alerts_for_an_organization.method,
                List_code_scanning_alerts_for_an_organization.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'List_code_scanning_alerts_for_an_organization': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class List_code_scanning_alerts_for_a_repository(BaseFunction):
    """"""

    name = "List code scanning alerts for a repository"
    url = "https://docs.github.com/en/rest/code-scanning/code-scanning#list-code-scanning-alerts-for-a-repository"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name
        ]

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                List_code_scanning_alerts_for_a_repository.method,
                List_code_scanning_alerts_for_a_repository.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'List_code_scanning_alerts_for_a_repository': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Get_a_specific_code_scanning_alert(BaseFunction):
    """"""

    name = "Get a specific code scanning alert"
    url = "https://docs.github.com/en/rest/code-scanning/code-scanning#get-a-code-scanning-alert"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name,
            Parameter(
                name="alert_number", param_type=ParameterType.INTEGER, required=True
            ),  # Alert number
        ]

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Get_a_specific_code_scanning_alert.method,
                Get_a_specific_code_scanning_alert.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = (
                f"Error running function 'Get_a_specific_code_scanning_alert': {str(e)}"
            )
            logging.error(error_msg)
            raise ValueError(error_msg)


class Get_the_status_of_an_autofix_for_a_code_scanning_alert(BaseFunction):
    """"""

    name = "Get the status of an autofix for a code scanning alert"
    url = "https://docs.github.com/en/rest/code-scanning/code-scanning#get-the-status-of-an-autofix-for-a-code-scanning-alert"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name,
            Parameter(
                name="alert_number", param_type=ParameterType.INTEGER, required=True
            ),  # Alert number
        ]

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Get_the_status_of_an_autofix_for_a_code_scanning_alert.method,
                Get_the_status_of_an_autofix_for_a_code_scanning_alert.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_the_status_of_an_autofix_for_a_code_scanning_alert': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class List_instances_of_a_code_scanning_alert(BaseFunction):
    """"""

    name = "List instances of a code scanning alert"
    url = "https://docs.github.com/en/rest/code-scanning/code-scanning#list-instances-of-a-code-scanning-alert"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name,
            Parameter(
                name="alert_number", param_type=ParameterType.INTEGER, required=True
            ),  # Alert number
        ]

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                List_instances_of_a_code_scanning_alert.method,
                List_instances_of_a_code_scanning_alert.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'List_instances_of_a_code_scanning_alert': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class List_code_scanning_analyses_for_a_repository(BaseFunction):
    """"""

    name = "List code scanning analyses for a repository"
    url = "https://docs.github.com/en/rest/code-scanning/code-scanning#list-code-scanning-analyses-for-a-repository"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name
        ]

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                List_code_scanning_analyses_for_a_repository.method,
                List_code_scanning_analyses_for_a_repository.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'List_code_scanning_analyses_for_a_repository': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Get_a_code_scanning_analysis_for_a_repository(BaseFunction):
    """"""

    name = "Get a code scanning analysis for a repository"
    url = "https://docs.github.com/en/rest/code-scanning/code-scanning#get-a-code-scanning-analysis-for-a-repository"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name,
            Parameter(
                name="analysis_id", param_type=ParameterType.INTEGER, required=True
            ),  # Analysis ID
        ]

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Get_a_code_scanning_analysis_for_a_repository.method,
                Get_a_code_scanning_analysis_for_a_repository.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_a_code_scanning_analysis_for_a_repository': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Get_information_about_a_SARIF_upload(BaseFunction):
    """"""

    name = "Get information about a SARIF upload"
    url = "https://docs.github.com/en/rest/code-scanning/code-scanning#get-information-about-a-sarif-upload"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name,
            Parameter(
                name="sarif_id", param_type=ParameterType.STRING, required=True
            ),  # SARIF upload ID
        ]

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Get_information_about_a_SARIF_upload.method,
                Get_information_about_a_SARIF_upload.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_information_about_a_SARIF_upload': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class List_custom_deployment_rule_applications_in_an_environment(BaseFunction):
    """"""

    name = "List custom deployment rule applications in an environment"
    url = "https://docs.github.com/en/rest/deployments/protection-rules#list-custom-deployment-rule-integrations-available-for-an-environment"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name,
            Parameter(
                name="environment_name", param_type=ParameterType.STRING, required=True
            ),  # Environment name
        ]

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                List_custom_deployment_rule_applications_in_an_environment.method,
                List_custom_deployment_rule_applications_in_an_environment.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'List_custom_deployment_rule_applications_in_an_environment': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Get_interaction_restrictions_for_a_repository(BaseFunction):
    """"""

    name = "Get interaction restrictions for a repository"
    url = "https://docs.github.com/en/rest/interactions/repos#get-interaction-restrictions-for-a-repository"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name
        ]

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Get_interaction_restrictions_for_a_repository.method,
                Get_interaction_restrictions_for_a_repository.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_interaction_restrictions_for_a_repository': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class List_repository_invitations_for_the_authenticated_user(BaseFunction):
    """"""

    name = "List repository invitations for the authenticated user"
    url = "https://docs.github.com/en/rest/collaborators/invitations#list-repository-invitations-for-the-authenticated-user"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name
        ]

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                List_repository_invitations_for_the_authenticated_user.method,
                List_repository_invitations_for_the_authenticated_user.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'List_repository_invitations_for_the_authenticated_user': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class List_deploy_keys_for_a_repository(BaseFunction):
    """"""

    name = "List deploy keys for a repository"
    url = "https://docs.github.com/en/rest/deploy-keys/deploy-keys#list-deploy-keys"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name
        ]

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                List_deploy_keys_for_a_repository.method,
                List_deploy_keys_for_a_repository.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = (
                f"Error running function 'List_deploy_keys_for_a_repository': {str(e)}"
            )
            logging.error(error_msg)
            raise ValueError(error_msg)


class Get_a_deploy_key_for_a_repository(BaseFunction):
    """"""

    name = "Get a deploy key for a repository"
    url = "https://docs.github.com/en/rest/deploy-keys/deploy-keys#get-a-deploy-key"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name,
            Parameter(
                name="key_id", param_type=ParameterType.INTEGER, required=True
            ),  # ID of the deploy key
        ]

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Get_a_deploy_key_for_a_repository.method,
                Get_a_deploy_key_for_a_repository.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = (
                f"Error running function 'Get_a_deploy_key_for_a_repository': {str(e)}"
            )
            logging.error(error_msg)
            raise ValueError(error_msg)


class Get_list_of_list_tag_protection_states_for_a_repository(BaseFunction):
    """"""

    name = "Get list of list tag protection states for a repository"
    url = "https://docs.github.com/en/rest/repos/tags#closing-down---list-tag-protection-states-for-a-repository"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name
        ]

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Get_list_of_list_tag_protection_states_for_a_repository.method,
                Get_list_of_list_tag_protection_states_for_a_repository.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_list_of_list_tag_protection_states_for_a_repository': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class List_repository_teams(BaseFunction):
    """"""

    name = "List repository teams"
    url = "https://docs.github.com/en/rest/repos/repos#list-repository-teams"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name
        ]

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                List_repository_teams.method,
                List_repository_teams.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'List_repository_teams': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Get_repository_traffic_clones(BaseFunction):
    """"""

    name = "Get repository traffic clones"
    url = "https://docs.github.com/en/rest/metrics/traffic#get-repository-clones"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name
        ]

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Get_repository_traffic_clones.method,
                Get_repository_traffic_clones.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = (
                f"Error running function 'Get_repository_traffic_clones': {str(e)}"
            )
            logging.error(error_msg)
            raise ValueError(error_msg)


class Get_repository_traffic_popular_paths(BaseFunction):
    """"""

    name = "Get repository traffic popular paths"
    url = "https://docs.github.com/en/rest/metrics/traffic#get-top-referral-paths"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name
        ]

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Get_repository_traffic_popular_paths.method,
                Get_repository_traffic_popular_paths.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_repository_traffic_popular_paths': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Get_repository_traffic_referrers(BaseFunction):
    """"""

    name = "Get repository traffic referrers"
    url = "https://docs.github.com/en/rest/metrics/traffic#get-top-referral-sources"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name
        ]

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Get_repository_traffic_referrers.method,
                Get_repository_traffic_referrers.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = (
                f"Error running function 'Get_repository_traffic_referrers': {str(e)}"
            )
            logging.error(error_msg)
            raise ValueError(error_msg)


class Get_page_views_of_a_repository(BaseFunction):
    """"""

    name = "Get page views of a repository"
    url = "https://docs.github.com/en/rest/metrics/traffic#get-page-views"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name
        ]

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Get_page_views_of_a_repository.method,
                Get_page_views_of_a_repository.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = (
                f"Error running function 'Get_page_views_of_a_repository': {str(e)}"
            )
            logging.error(error_msg)
            raise ValueError(error_msg)


class Check_if_vulnerability_alerts_are_enabled_for_a_repository(BaseFunction):
    """"""

    name = "Check if vulnerability alerts are enabled for a repository"
    url = "https://docs.github.com/en/rest/repos/repos#check-if-vulnerability-alerts-are-enabled-for-a-repository"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name
        ]

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Check_if_vulnerability_alerts_are_enabled_for_a_repository.method,
                Check_if_vulnerability_alerts_are_enabled_for_a_repository.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Check_if_vulnerability_alerts_are_enabled_for_a_repository': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class List_issue_comments(BaseFunction):
    """Retrieve a list of comments on an issue."""

    name = "List issue comments"
    url = "https://docs.github.com/en/rest/issues/comments#list-issue-comments"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Owner of the repository,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name,
            Parameter(
                name="issue_number", param_type=ParameterType.INTEGER, required=True
            ),  # Issue number
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="comments", param_type=OutputParameterType.OBJECT, is_array=True
            ),  # Array of comment objects
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                List_issue_comments.method,
                List_issue_comments.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'List_issue_comments': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class List_issue_events(BaseFunction):
    """List events for an issue."""

    name = "List issue events"
    url = "https://docs.github.com/en/rest/issues/events#list-issue-events"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Owner of the repository,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name,
            Parameter(
                name="issue_number", param_type=ParameterType.INTEGER, required=True
            ),  # Issue number
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="events", param_type=OutputParameterType.OBJECT, is_array=True
            ),  # Array of event objects
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                List_issue_events.method,
                List_issue_events.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'List_issue_events': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class List_labels_for_an_issue(BaseFunction):
    """Get labels for an issue."""

    name = "List labels for an issue"
    url = "https://docs.github.com/en/rest/issues/labels#list-labels-for-an-issue"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Owner of the repository,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name,
            Parameter(
                name="issue_number", param_type=ParameterType.INTEGER, required=True
            ),  # Issue number
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="labels", param_type=OutputParameterType.OBJECT, is_array=True
            ),  # Array of label objects
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                List_labels_for_an_issue.method,
                List_labels_for_an_issue.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'List_labels_for_an_issue': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class List_reactions_for_an_issue(BaseFunction):
    """List reactions for an issue."""

    name = "List reactions for an issue"
    url = "https://docs.github.com/en/rest/reactions/reactions#list-reactions-for-an-issue"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Owner of the repository,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name,
            Parameter(
                name="issue_number", param_type=ParameterType.INTEGER, required=True
            ),  # Issue number
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="reactions", param_type=OutputParameterType.OBJECT, is_array=True
            ),  # Array of reaction objects
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                List_reactions_for_an_issue.method,
                List_reactions_for_an_issue.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = (
                f"Error running function 'List_reactions_for_an_issue': {str(e)}"
            )
            logging.error(error_msg)
            raise ValueError(error_msg)


class List_subissues(BaseFunction):
    """List sub-issues for an issue."""

    name = "List sub-issues"
    url = "https://docs.github.com/en/rest/issues/sub-issues#list-sub-issues"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Owner of the repository,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name,
            Parameter(
                name="issue_number", param_type=ParameterType.INTEGER, required=True
            ),  # Issue number
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="sub_issues", param_type=OutputParameterType.OBJECT, is_array=True
            ),  # Array of sub-issue objects
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                List_subissues.method, List_subissues.url, input_data.validated_data
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'List_subissues': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class List_timeline_events_for_an_issue(BaseFunction):
    """List timeline events for an issue."""

    name = "List timeline events for an issue"
    url = "https://docs.github.com/en/rest/issues/timeline#list-timeline-events-for-an-issue"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Owner of the repository,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name,
            Parameter(
                name="issue_number", param_type=ParameterType.INTEGER, required=True
            ),  # Issue number
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="timeline_events",
                param_type=OutputParameterType.OBJECT,
                is_array=True,
            ),  # Array of timeline event objects
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                List_timeline_events_for_an_issue.method,
                List_timeline_events_for_an_issue.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = (
                f"Error running function 'List_timeline_events_for_an_issue': {str(e)}"
            )
            logging.error(error_msg)
            raise ValueError(error_msg)


class List_labels_for_a_repository(BaseFunction):
    """Get labels for a repository."""

    name = "List labels for a repository"
    url = "https://docs.github.com/en/rest/issues/labels#list-labels-for-a-repository"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Owner of the repository,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="labels", param_type=OutputParameterType.OBJECT, is_array=True
            ),  # Array of label objects
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                List_labels_for_a_repository.method,
                List_labels_for_a_repository.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = (
                f"Error running function 'List_labels_for_a_repository': {str(e)}"
            )
            logging.error(error_msg)
            raise ValueError(error_msg)


class Get_a_label(BaseFunction):
    """Get a label by name."""

    name = "Get a label"
    url = "https://docs.github.com/en/rest/issues/labels#get-a-label"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Owner of the repository,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name,
            Parameter(
                name="name", param_type=ParameterType.STRING, required=True
            ),  # Label name
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="label", param_type=OutputParameterType.OBJECT, is_array=False
            ),  # Label object
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Get_a_label.method, Get_a_label.url, input_data.validated_data
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_a_label': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class List_milestones(BaseFunction):
    """List milestones in a repository."""

    name = "List milestones"
    url = "https://docs.github.com/en/rest/issues/milestones#list-milestones"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Owner of the repository,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="milestones", param_type=OutputParameterType.OBJECT, is_array=True
            ),  # Array of milestone objects
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                List_milestones.method, List_milestones.url, input_data.validated_data
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'List_milestones': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Get_a_milestone(BaseFunction):
    """Get a specific milestone."""

    name = "Get a milestone"
    url = "https://docs.github.com/en/rest/issues/milestones#get-a-milestone"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Owner of the repository,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name,
            Parameter(
                name="milestone_number", param_type=ParameterType.INTEGER, required=True
            ),  # Milestone number
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="milestone", param_type=OutputParameterType.OBJECT, is_array=False
            ),  # Milestone object
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Get_a_milestone.method, Get_a_milestone.url, input_data.validated_data
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_a_milestone': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class List_labels_for_issues_in_a_milestone(BaseFunction):
    """List labels for issues in a milestone."""

    name = "List labels for issues in a milestone"
    url = "https://docs.github.com/en/rest/issues/labels#list-labels-for-issues-in-a-milestone"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Owner of the repository,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name,
            Parameter(
                name="milestone_number", param_type=ParameterType.INTEGER, required=True
            ),  # Milestone number
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="labels", param_type=OutputParameterType.OBJECT, is_array=True
            ),  # Array of label objects
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                List_labels_for_issues_in_a_milestone.method,
                List_labels_for_issues_in_a_milestone.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'List_labels_for_issues_in_a_milestone': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class List_pull_requests(BaseFunction):
    """List pull requests in a repository."""

    name = "List pull requests"
    url = "https://docs.github.com/en/rest/pulls/pulls#list-pull-requests"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Owner of the repository,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="pull_requests",
                param_type=OutputParameterType.OBJECT,
                is_array=True,
            ),  # Array of pull request objects
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                List_pull_requests.method,
                List_pull_requests.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'List_pull_requests': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class List_review_comments_in_a_repository(BaseFunction):
    """List review comments for a repository."""

    name = "List review comments in a repository"
    url = "https://docs.github.com/en/rest/pulls/comments#list-review-comments-in-a-repository"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Owner of the repository,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="review_comments",
                param_type=OutputParameterType.OBJECT,
                is_array=True,
            ),  # Array of review comment objects
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                List_review_comments_in_a_repository.method,
                List_review_comments_in_a_repository.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'List_review_comments_in_a_repository': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Get_a_review_comment_for_a_pull_request(BaseFunction):
    """Get a specific review comment for a pull request."""

    name = "Get a review comment for a pull request"
    url = "https://docs.github.com/en/rest/pulls/comments#get-a-review-comment-for-a-pull-request"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Owner of the repository,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name,
            Parameter(
                name="comment_id", param_type=ParameterType.INTEGER, required=True
            ),  # Comment ID
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="review_comment",
                param_type=OutputParameterType.OBJECT,
                is_array=False,
            ),  # Review comment object
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Get_a_review_comment_for_a_pull_request.method,
                Get_a_review_comment_for_a_pull_request.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_a_review_comment_for_a_pull_request': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class List_reactions_for_a_pull_request_review_comment(BaseFunction):
    """List reactions for a pull request review comment."""

    name = "List reactions for a pull request review comment"
    url = "https://docs.github.com/en/rest/reactions/reactions#list-reactions-for-a-pull-request-review-comment"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Owner of the repository,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name,
            Parameter(
                name="comment_id", param_type=ParameterType.INTEGER, required=True
            ),  # Comment ID
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="reactions", param_type=OutputParameterType.OBJECT, is_array=True
            ),  # Array of reaction objects
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                List_reactions_for_a_pull_request_review_comment.method,
                List_reactions_for_a_pull_request_review_comment.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'List_reactions_for_a_pull_request_review_comment': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Get_a_pull_request(BaseFunction):
    """Get a specific pull request."""

    name = "Get a pull request"
    url = "https://docs.github.com/en/rest/pulls/pulls#get-a-pull-request"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Owner of the repository,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name,
            Parameter(
                name="pull_number", param_type=ParameterType.INTEGER, required=True
            ),  # Pull request number
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="pull_request",
                param_type=OutputParameterType.OBJECT,
                is_array=False,
            ),  # Pull request object
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Get_a_pull_request.method,
                Get_a_pull_request.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_a_pull_request': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class List_review_comments_on_a_pull_request(BaseFunction):
    """List review comments on a pull request."""

    name = "List review comments on a pull request"
    url = "https://docs.github.com/en/rest/pulls/comments#list-review-comments-on-a-pull-request"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Owner of the repository,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name,
            Parameter(
                name="pull_number", param_type=ParameterType.INTEGER, required=True
            ),  # Pull request number
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="review_comments",
                param_type=OutputParameterType.OBJECT,
                is_array=True,
            ),  # Array of review comment objects
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                List_review_comments_on_a_pull_request.method,
                List_review_comments_on_a_pull_request.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'List_review_comments_on_a_pull_request': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class List_commits_on_a_pull_request(BaseFunction):
    """List commits on a pull request."""

    name = "List commits on a pull request"
    url = "https://docs.github.com/en/rest/pulls/pulls#list-commits-on-a-pull-request"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Owner of the repository,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name,
            Parameter(
                name="pull_number", param_type=ParameterType.INTEGER, required=True
            ),  # Pull request number
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="commits", param_type=OutputParameterType.OBJECT, is_array=True
            ),  # Array of commit objects
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                List_commits_on_a_pull_request.method,
                List_commits_on_a_pull_request.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = (
                f"Error running function 'List_commits_on_a_pull_request': {str(e)}"
            )
            logging.error(error_msg)
            raise ValueError(error_msg)


class List_files_in_a_pull_request(BaseFunction):
    """List files in a pull request."""

    name = "List files in a pull request"
    url = "https://docs.github.com/en/rest/pulls/pulls#list-pull-requests-files"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Owner of the repository,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name,
            Parameter(
                name="pull_number", param_type=ParameterType.INTEGER, required=True
            ),  # Pull request number
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="files", param_type=OutputParameterType.OBJECT, is_array=True
            ),  # Array of files in the pull request
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                List_files_in_a_pull_request.method,
                List_files_in_a_pull_request.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = (
                f"Error running function 'List_files_in_a_pull_request': {str(e)}"
            )
            logging.error(error_msg)
            raise ValueError(error_msg)


class Check_if_a_pull_request_has_been_merged(BaseFunction):
    """Check if a pull request has been merged."""

    name = "Check if a pull request has been merged"
    url = "https://docs.github.com/en/rest/pulls/pulls#check-if-a-pull-request-has-been-merged"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Owner of the repository,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name,
            Parameter(
                name="pull_number", param_type=ParameterType.INTEGER, required=True
            ),  # Pull request number
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="merged", param_type=OutputParameterType.BOOLEAN, is_array=False
            ),  # Boolean indicating if the pull request has been merged
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Check_if_a_pull_request_has_been_merged.method,
                Check_if_a_pull_request_has_been_merged.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Check_if_a_pull_request_has_been_merged': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class List_all_requested_reviewers_for_a_pull_request(BaseFunction):
    """List reviewers requested for a pull request."""

    name = "List all requested reviewers for a pull request"
    url = "https://docs.github.com/en/rest/pulls/review-requests#list-all-requested-reviewers-for-a-pull-request"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Owner of the repository,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name,
            Parameter(
                name="pull_number", param_type=ParameterType.INTEGER, required=True
            ),  # Pull request number
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="reviewers", param_type=OutputParameterType.STRING, is_array=True
            ),  # List of requested reviewers
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                List_all_requested_reviewers_for_a_pull_request.method,
                List_all_requested_reviewers_for_a_pull_request.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'List_all_requested_reviewers_for_a_pull_request': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class List_reviews_for_a_pull_request(BaseFunction):
    """List reviews for a pull request."""

    name = "List reviews for a pull request"
    url = (
        "https://docs.github.com/en/rest/pulls/reviews#list-reviews-for-a-pull-request"
    )
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Owner of the repository,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name,
            Parameter(
                name="pull_number", param_type=ParameterType.INTEGER, required=True
            ),  # Pull request number
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="reviews", param_type=OutputParameterType.OBJECT, is_array=True
            ),  # Array of review objects
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                List_reviews_for_a_pull_request.method,
                List_reviews_for_a_pull_request.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = (
                f"Error running function 'List_reviews_for_a_pull_request': {str(e)}"
            )
            logging.error(error_msg)
            raise ValueError(error_msg)


class Get_a_specific_review_for_a_pull_request(BaseFunction):
    """Get a specific review for a pull request."""

    name = "Get a specific review for a pull request"
    url = (
        "https://docs.github.com/en/rest/pulls/reviews#get-a-review-for-a-pull-request"
    )
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Owner of the repository,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name,
            Parameter(
                name="review_id", param_type=ParameterType.INTEGER, required=True
            ),  # Review ID
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="review", param_type=OutputParameterType.OBJECT, is_array=False
            ),  # Review object
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Get_a_specific_review_for_a_pull_request.method,
                Get_a_specific_review_for_a_pull_request.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_a_specific_review_for_a_pull_request': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class List_comments_for_a_pull_request_review(BaseFunction):
    """List comments for a pull request review."""

    name = "List comments for a pull request review"
    url = "https://docs.github.com/en/rest/pulls/reviews#list-comments-for-a-pull-request-review"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Owner of the repository,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name,
            Parameter(
                name="review_id", param_type=ParameterType.INTEGER, required=True
            ),  # Review ID
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="comments", param_type=OutputParameterType.OBJECT, is_array=True
            ),  # Array of review comment objects
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                List_comments_for_a_pull_request_review.method,
                List_comments_for_a_pull_request_review.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'List_comments_for_a_pull_request_review': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class List_repository_security_advisories(BaseFunction):
    """List security advisories for an organization."""

    name = "List repository security advisories"
    url = "https://docs.github.com/en/rest/security-advisories/repository-advisories#list-repository-security-advisories"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="org", param_type=ParameterType.STRING, required=True
            ),  # Organization name
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="advisories", param_type=OutputParameterType.OBJECT, is_array=True
            ),  # Array of security advisory objects
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                List_repository_security_advisories.method,
                List_repository_security_advisories.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'List_repository_security_advisories': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Create_a_repository_security_advisory(BaseFunction):
    """Create a security advisory for a repository."""

    name = "Create a repository security advisory"
    url = "https://docs.github.com/en/rest/security-advisories/repository-advisories#create-a-repository-security-advisory"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Owner of the repository,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name,
            Parameter(
                name="body", param_type=OutputParameterType.OBJECT, required=True
            ),  # Payload with security advisory details
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="advisory", param_type=OutputParameterType.OBJECT, is_array=False
            ),  # Created advisory object
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Create_a_repository_security_advisory.method,
                Create_a_repository_security_advisory.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Create_a_repository_security_advisory': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class List_secret_scanning_alerts_for_an_organization(BaseFunction):
    """List secret scanning alerts for an organization."""

    name = "List secret scanning alerts for an organization"
    url = "https://docs.github.com/en/rest/secret-scanning/secret-scanning#list-secret-scanning-alerts-for-an-organization"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="org", param_type=ParameterType.STRING, required=True
            ),  # Organization name
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="alerts", param_type=OutputParameterType.OBJECT, is_array=True
            ),  # Array of secret scanning alert objects
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                List_secret_scanning_alerts_for_an_organization.method,
                List_secret_scanning_alerts_for_an_organization.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'List_secret_scanning_alerts_for_an_organization': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class List_secret_scanning_alerts_for_a_repository(BaseFunction):
    """List secret scanning alerts for a repository."""

    name = "List secret scanning alerts for a repository"
    url = "https://docs.github.com/en/rest/secret-scanning/secret-scanning#list-secret-scanning-alerts-for-a-repository"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Owner of the repository,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="alerts", param_type=OutputParameterType.OBJECT, is_array=True
            ),  # Array of secret scanning alert objects
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                List_secret_scanning_alerts_for_a_repository.method,
                List_secret_scanning_alerts_for_a_repository.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'List_secret_scanning_alerts_for_a_repository': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Get_a_secret_scanning_alert(BaseFunction):
    """Get a specific secret scanning alert."""

    name = "Get a secret scanning alert"
    url = "https://docs.github.com/en/rest/secret-scanning/secret-scanning#get-a-secret-scanning-alert"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Owner of the repository,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name,
            Parameter(
                name="alert_number", param_type=ParameterType.INTEGER, required=True
            ),  # Alert number
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="alert", param_type=OutputParameterType.OBJECT, is_array=False
            ),  # Secret scanning alert object
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Get_a_secret_scanning_alert.method,
                Get_a_secret_scanning_alert.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = (
                f"Error running function 'Get_a_secret_scanning_alert': {str(e)}"
            )
            logging.error(error_msg)
            raise ValueError(error_msg)


class List_locations_for_a_secret_scanning_alert(BaseFunction):
    """List locations for a secret scanning alert."""

    name = "List locations for a secret scanning alert"
    url = "https://docs.github.com/en/rest/secret-scanning/secret-scanning#list-locations-for-a-secret-scanning-alert"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Owner of the repository,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name,
            Parameter(
                name="alert_number", param_type=ParameterType.INTEGER, required=True
            ),  # Alert number
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="locations", param_type=OutputParameterType.OBJECT, is_array=True
            ),  # Array of location objects
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                List_locations_for_a_secret_scanning_alert.method,
                List_locations_for_a_secret_scanning_alert.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'List_locations_for_a_secret_scanning_alert': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Get_secret_scanning_scan_history(BaseFunction):
    """Get secret scanning scan history for a repository."""

    name = "Get secret scanning scan history"
    url = "https://docs.github.com/en/rest/secret-scanning/secret-scanning#get-secret-scanning-scan-history-for-a-repository"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Owner of the repository,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="scan_history",
                param_type=OutputParameterType.OBJECT,
                is_array=True,
            ),  # Array of scan history objects
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Get_secret_scanning_scan_history.method,
                Get_secret_scanning_scan_history.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = (
                f"Error running function 'Get_secret_scanning_scan_history': {str(e)}"
            )
            logging.error(error_msg)
            raise ValueError(error_msg)


class Create_or_update_a_repository_secret(BaseFunction):
    """Create or update a repository secret."""

    name = "Create or update a repository secret"
    url = "https://docs.github.com/en/rest/actions/secrets#create-or-update-a-repository-secret"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Owner of the repository,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name,
            Parameter(
                name="secret_name", param_type=ParameterType.STRING, required=True
            ),  # Secret name,
            Parameter(
                name="body", param_type=OutputParameterType.OBJECT, required=True
            ),  # Payload with secret data
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="secret", param_type=OutputParameterType.OBJECT, is_array=False
            ),  # Secret object
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Create_or_update_a_repository_secret.method,
                Create_or_update_a_repository_secret.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Create_or_update_a_repository_secret': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Delete_a_repository_secret(BaseFunction):
    """Delete a repository secret."""

    name = "Delete a repository secret"
    url = "https://docs.github.com/en/rest/actions/secrets#delete-a-repository-secret"
    args_in_url = True
    method = DELETE

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Owner of the repository,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name,
            Parameter(
                name="secret_name", param_type=ParameterType.STRING, required=True
            ),  # Secret name
        ]

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Delete_a_repository_secret.method,
                Delete_a_repository_secret.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Delete_a_repository_secret': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class List_organization_secrets(BaseFunction):
    """List organization secrets for a repository."""

    name = "List organization secrets"
    url = "https://docs.github.com/en/rest/actions/secrets#list-repository-organization-secrets"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Owner of the repository
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="secrets", param_type=OutputParameterType.OBJECT, is_array=True
            ),  # Array of organization secret objects
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                List_organization_secrets.method,
                List_organization_secrets.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'List_organization_secrets': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class List_repository_secrets(BaseFunction):
    """List secrets for a repository."""

    name = "List repository secrets"
    url = "https://docs.github.com/en/rest/actions/secrets#list-repository-secrets"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Owner of the repository,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="secrets", param_type=OutputParameterType.OBJECT, is_array=True
            ),  # Array of repository secret objects
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                List_repository_secrets.method,
                List_repository_secrets.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'List_repository_secrets': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Get_a_repository_public_key(BaseFunction):
    """Get a repository's public key."""

    name = "Get a repository public key"
    url = "https://docs.github.com/en/rest/actions/secrets#get-a-repository-public-key"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Owner of the repository,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="public_key", param_type=OutputParameterType.OBJECT, is_array=False
            ),  # Public key object
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Get_a_repository_public_key.method,
                Get_a_repository_public_key.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = (
                f"Error running function 'Get_a_repository_public_key': {str(e)}"
            )
            logging.error(error_msg)
            raise ValueError(error_msg)


class Get_a_repository_secret(BaseFunction):
    """Get a specific repository secret."""

    name = "Get a repository secret"
    url = "https://docs.github.com/en/rest/actions/secrets#get-a-repository-secret"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Owner of the repository,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name,
            Parameter(
                name="secret_name", param_type=ParameterType.STRING, required=True
            ),  # Secret name
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="secret", param_type=OutputParameterType.OBJECT, is_array=False
            ),  # Secret object
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Get_a_repository_secret.method,
                Get_a_repository_secret.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_a_repository_secret': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Create_a_repository_variable(BaseFunction):
    """Create or update a repository variable."""

    name = "Create a repository variable"
    url = (
        "https://docs.github.com/en/rest/actions/variables#create-a-repository-variable"
    )
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Owner of the repository,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name,
            Parameter(
                name="name", param_type=ParameterType.STRING, required=True
            ),  # Variable name,
            Parameter(
                name="body", param_type=OutputParameterType.OBJECT, required=True
            ),  # Payload with variable data
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="variable", param_type=OutputParameterType.OBJECT, is_array=False
            ),  # Variable object
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Create_a_repository_variable.method,
                Create_a_repository_variable.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = (
                f"Error running function 'Create_a_repository_variable': {str(e)}"
            )
            logging.error(error_msg)
            raise ValueError(error_msg)


class Update_a_repository_variable(BaseFunction):
    """Update a repository variable."""

    name = "Update a repository variable"
    url = (
        "https://docs.github.com/en/rest/actions/variables#update-a-repository-variable"
    )
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Owner of the repository,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name,
            Parameter(
                name="name", param_type=ParameterType.STRING, required=True
            ),  # Variable name,
            Parameter(
                name="body", param_type=OutputParameterType.OBJECT, required=True
            ),  # Payload with variable data
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="variable", param_type=OutputParameterType.OBJECT, is_array=False
            ),  # Variable object
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Update_a_repository_variable.method,
                Update_a_repository_variable.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = (
                f"Error running function 'Update_a_repository_variable': {str(e)}"
            )
            logging.error(error_msg)
            raise ValueError(error_msg)


class Delete_a_repository_variable(BaseFunction):
    """Delete a repository variable."""

    name = "Delete a repository variable"
    url = (
        "https://docs.github.com/en/rest/actions/variables#delete-a-repository-variable"
    )
    args_in_url = True
    method = DELETE

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Owner of the repository,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name,
            Parameter(
                name="name", param_type=ParameterType.STRING, required=True
            ),  # Variable name
        ]

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Delete_a_repository_variable.method,
                Delete_a_repository_variable.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = (
                f"Error running function 'Delete_a_repository_variable': {str(e)}"
            )
            logging.error(error_msg)
            raise ValueError(error_msg)


class List_organization_variables(BaseFunction):
    """List organization variables."""

    name = "List organization variables"
    url = (
        "https://docs.github.com/en/rest/actions/variables#list-organization-variables"
    )
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="org", param_type=ParameterType.STRING, required=True
            ),  # Organization name
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="variables", param_type=OutputParameterType.OBJECT, is_array=True
            ),  # Array of organization variable objects
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                List_organization_variables.method,
                List_organization_variables.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = (
                f"Error running function 'List_organization_variables': {str(e)}"
            )
            logging.error(error_msg)
            raise ValueError(error_msg)


class List_repository_variables(BaseFunction):
    """List repository variables."""

    name = "List repository variables"
    url = "https://docs.github.com/en/rest/actions/variables#list-repository-variables"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Owner of the repository,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="variables", param_type=OutputParameterType.OBJECT, is_array=True
            ),  # Array of repository variable objects
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                List_repository_variables.method,
                List_repository_variables.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'List_repository_variables': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Get_a_repository_variable(BaseFunction):
    """Get a specific repository variable."""

    name = "Get a repository variable"
    url = "https://docs.github.com/en/rest/actions/variables#get-a-repository-variable"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Owner of the repository,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name,
            Parameter(
                name="name", param_type=ParameterType.STRING, required=True
            ),  # Variable name
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="variable", param_type=OutputParameterType.OBJECT, is_array=False
            ),  # Variable object
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Get_a_repository_variable.method,
                Get_a_repository_variable.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_a_repository_variable': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Create_a_repository_webhook(BaseFunction):
    """Create a webhook for a repository."""

    name = "Create a repository webhook"
    url = "https://docs.github.com/en/rest/repos/webhooks#create-a-repository-webhook"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Owner of the repository,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name,
            Parameter(
                name="body", param_type=OutputParameterType.OBJECT, required=True
            ),  # Webhook configuration JSON
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="webhook", param_type=OutputParameterType.OBJECT, is_array=False
            ),  # Webhook object
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Create_a_repository_webhook.method,
                Create_a_repository_webhook.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = (
                f"Error running function 'Create_a_repository_webhook': {str(e)}"
            )
            logging.error(error_msg)
            raise ValueError(error_msg)


class Update_a_repository_webhook(BaseFunction):
    """Update a repository webhook."""

    name = "Update a repository webhook"
    url = "https://docs.github.com/en/rest/repos/webhooks#update-a-repository-webhook"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Owner of the repository,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name,
            Parameter(
                name="hook_id", param_type=ParameterType.INTEGER, required=True
            ),  # Webhook ID,
            Parameter(
                name="body", param_type=OutputParameterType.OBJECT, required=True
            ),  # Webhook configuration JSON
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="webhook", param_type=OutputParameterType.OBJECT, is_array=False
            ),  # Webhook object
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Update_a_repository_webhook.method,
                Update_a_repository_webhook.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = (
                f"Error running function 'Update_a_repository_webhook': {str(e)}"
            )
            logging.error(error_msg)
            raise ValueError(error_msg)


class Delete_a_repository_webhook(BaseFunction):
    """Delete a repository webhook."""

    name = "Delete a repository webhook"
    url = "https://docs.github.com/en/rest/repos/webhooks#delete-a-repository-webhook"
    args_in_url = True
    method = DELETE

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Owner of the repository,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name,
            Parameter(
                name="hook_id", param_type=ParameterType.INTEGER, required=True
            ),  # Webhook ID
        ]

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Delete_a_repository_webhook.method,
                Delete_a_repository_webhook.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = (
                f"Error running function 'Delete_a_repository_webhook': {str(e)}"
            )
            logging.error(error_msg)
            raise ValueError(error_msg)


class List_repository_webhooks(BaseFunction):
    """List webhooks for a repository."""

    name = "List repository webhooks"
    url = "https://docs.github.com/en/rest/repos/webhooks#list-repository-webhooks"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Owner of the repository,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="webhooks", param_type=OutputParameterType.OBJECT, is_array=True
            ),  # Array of webhook objects
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                List_repository_webhooks.method,
                List_repository_webhooks.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'List_repository_webhooks': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Get_a_repository_webhook(BaseFunction):
    """Get a single repository webhook."""

    name = "Get a repository webhook"
    url = "https://docs.github.com/en/rest/repos/webhooks#get-a-repository-webhook"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Owner of the repository,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name,
            Parameter(
                name="hook_id", param_type=ParameterType.INTEGER, required=True
            ),  # Webhook ID
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="webhook", param_type=OutputParameterType.OBJECT, is_array=False
            ),  # Webhook object
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Get_a_repository_webhook.method,
                Get_a_repository_webhook.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_a_repository_webhook': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Get_webhook_configuration_for_a_repository(BaseFunction):
    """Get configuration for a webhook."""

    name = "Get webhook configuration for a repository"
    url = "https://docs.github.com/en/rest/repos/webhooks#get-a-webhook-configuration-for-a-repository"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Owner of the repository,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name,
            Parameter(
                name="hook_id", param_type=ParameterType.INTEGER, required=True
            ),  # Webhook ID
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="configuration",
                param_type=OutputParameterType.OBJECT,
                is_array=False,
            ),  # Webhook configuration object
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Get_webhook_configuration_for_a_repository.method,
                Get_webhook_configuration_for_a_repository.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_webhook_configuration_for_a_repository': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class List_webhook_deliveries_for_a_repository(BaseFunction):
    """List webhook deliveries for a webhook."""

    name = "List webhook deliveries for a repository"
    url = "https://docs.github.com/en/rest/repos/webhooks#list-deliveries-for-a-repository-webhook"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Owner of the repository,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name,
            Parameter(
                name="hook_id", param_type=ParameterType.INTEGER, required=True
            ),  # Webhook ID
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="deliveries", param_type=OutputParameterType.OBJECT, is_array=True
            ),  # Array of delivery objects
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                List_webhook_deliveries_for_a_repository.method,
                List_webhook_deliveries_for_a_repository.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'List_webhook_deliveries_for_a_repository': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Get_a_delivery_for_a_repository_webhook(BaseFunction):
    """Get a specific delivery for a webhook."""

    name = "Get a delivery for a repository webhook"
    url = "https://docs.github.com/en/rest/repos/webhooks#get-a-delivery-for-a-repository-webhook"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Owner of the repository,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name,
            Parameter(
                name="hook_id", param_type=ParameterType.INTEGER, required=True
            ),  # Webhook ID,
            Parameter(
                name="delivery_id", param_type=ParameterType.INTEGER, required=True
            ),  # Delivery ID
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="delivery", param_type=OutputParameterType.OBJECT, is_array=False
            ),  # Delivery object
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Get_a_delivery_for_a_repository_webhook.method,
                Get_a_delivery_for_a_repository_webhook.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_a_delivery_for_a_repository_webhook': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Ping_a_repository_webhook(BaseFunction):
    """Ping a repository webhook."""

    name = "Ping a repository webhook"
    url = "https://docs.github.com/en/rest/repos/webhooks#ping-a-repository-webhook"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Owner of the repository,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name,
            Parameter(
                name="hook_id", param_type=ParameterType.INTEGER, required=True
            ),  # Webhook ID
        ]

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Ping_a_repository_webhook.method,
                Ping_a_repository_webhook.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Ping_a_repository_webhook': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Test_a_Webhook(BaseFunction):
    """Test the push of a repository webhook."""

    name = "Test a Webhook"
    url = "https://docs.github.com/en/rest/repos/webhooks#test-the-push-repository-webhook"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Owner of the repository,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name,
            Parameter(
                name="hook_id", param_type=ParameterType.INTEGER, required=True
            ),  # Webhook ID
        ]

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Test_a_Webhook.method, Test_a_Webhook.url, input_data.validated_data
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Test_a_Webhook': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Create_or_update_file_contents(BaseFunction):
    """Creates or updates a file in a repository."""

    name = "Create or update file contents"
    url = "/repos/{owner}/{repo}/contents/{path}"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name,
            Parameter(
                name="path", param_type=ParameterType.STRING, required=True
            ),  # Path to the file to create or update
        ]

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Create_or_update_file_contents.method,
                Create_or_update_file_contents.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = (
                f"Error running function 'Create_or_update_file_contents': {str(e)}"
            )
            logging.error(error_msg)
            raise ValueError(error_msg)


class Delete_a_file(BaseFunction):
    """Deletes a file from a repository."""

    name = "Delete a file"
    url = "/repos/{owner}/{repo}/contents/{path}"
    args_in_url = True
    method = DELETE

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name,
            Parameter(
                name="path", param_type=ParameterType.STRING, required=True
            ),  # Path to the file to delete
        ]

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Delete_a_file.method, Delete_a_file.url, input_data.validated_data
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Delete_a_file': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Create_a_reference(BaseFunction):
    """Creates a reference (branch, tag, etc.) in a repository."""

    name = "Create a reference"
    url = "/repos/{owner}/{repo}/git/refs"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name,
            Parameter(
                name="ref", param_type=ParameterType.STRING, required=True
            ),  # Ref name, e.g., 'refs/heads/branch-name'
        ]

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Create_a_reference.method,
                Create_a_reference.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Create_a_reference': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Update_a_reference(BaseFunction):
    """Updates a reference in a repository."""

    name = "Update a reference"
    url = "/repos/{owner}/{repo}/git/refs/{ref}"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name,
            Parameter(
                name="ref", param_type=ParameterType.STRING, required=True
            ),  # The ref for the object you want to update
        ]

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Update_a_reference.method,
                Update_a_reference.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Update_a_reference': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Create_a_release(BaseFunction):
    """Creates a release in a repository."""

    name = "Create a release"
    url = "/repos/{owner}/{repo}/releases"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name
        ]

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Create_a_release.method, Create_a_release.url, input_data.validated_data
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Create_a_release': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Block_a_user(BaseFunction):
    """Blocks a user."""

    name = "Block a user"
    url = "/user/blocks/{username}"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="username", param_type=ParameterType.STRING, required=True
            ),  # Username of the user to block
        ]

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Block_a_user.method, Block_a_user.url, input_data.validated_data
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Block_a_user': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Unblock_a_user(BaseFunction):
    """Unblocks a user."""

    name = "Unblock a user"
    url = "/user/blocks/{username}"
    args_in_url = True
    method = DELETE

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="username", param_type=ParameterType.STRING, required=True
            ),  # Username of the user to unblock
        ]

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Unblock_a_user.method, Unblock_a_user.url, input_data.validated_data
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Unblock_a_user': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class List_users_blocked_by_the_authenticated_user(BaseFunction):
    """Lists users blocked by the authenticated user."""

    name = "List users blocked by the authenticated user"
    url = "/user/blocks"
    args_in_url = False
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                List_users_blocked_by_the_authenticated_user.method,
                List_users_blocked_by_the_authenticated_user.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'List_users_blocked_by_the_authenticated_user': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Check_if_a_user_is_blocked_by_the_authenticated_user(BaseFunction):
    """Checks if a user is blocked by the authenticated user."""

    name = "Check if a user is blocked by the authenticated user"
    url = "/user/blocks/{username}"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="username", param_type=ParameterType.STRING, required=True
            ),  # Username to check
        ]

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Check_if_a_user_is_blocked_by_the_authenticated_user.method,
                Check_if_a_user_is_blocked_by_the_authenticated_user.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Check_if_a_user_is_blocked_by_the_authenticated_user': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Create_or_update_a_secret_for_the_authenticated_user(BaseFunction):
    """Creates or updates a secret for the authenticated user."""

    name = "Create or update a secret for the authenticated user"
    url = "/user/codespaces/secrets/{secret_name}"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="secret_name", param_type=ParameterType.STRING, required=True
            ),  # Name of the secret
        ]

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Create_or_update_a_secret_for_the_authenticated_user.method,
                Create_or_update_a_secret_for_the_authenticated_user.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Create_or_update_a_secret_for_the_authenticated_user': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Delete_a_secret_for_the_authenticated_user(BaseFunction):
    """Deletes a secret for the authenticated user."""

    name = "Delete a secret for the authenticated user"
    url = "/user/codespaces/secrets/{secret_name}"
    args_in_url = True
    method = DELETE

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="secret_name", param_type=ParameterType.STRING, required=True
            ),  # Name of the secret
        ]

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Delete_a_secret_for_the_authenticated_user.method,
                Delete_a_secret_for_the_authenticated_user.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Delete_a_secret_for_the_authenticated_user': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Set_selected_repositories_for_a_user_secret(BaseFunction):
    """Sets repositories for a user secret."""

    name = "Set selected repositories for a user secret"
    url = "/user/codespaces/secrets/{secret_name}/repositories"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="secret_name", param_type=ParameterType.STRING, required=True
            ),  # Name of the secret,
            Parameter(
                name="repositories",
                param_type=OutputParameterType.OBJECT,
                required=True,
            ),  # List of repositories to associate with the secret
        ]

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Set_selected_repositories_for_a_user_secret.method,
                Set_selected_repositories_for_a_user_secret.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Set_selected_repositories_for_a_user_secret': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Add_a_selected_repository_to_a_user_secret(BaseFunction):
    """Adds a repository to a user secret."""

    name = "Add a selected repository to a user secret"
    url = "/user/codespaces/secrets/{secret_name}/repositories/{repository_id}"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="secret_name", param_type=ParameterType.STRING, required=True
            ),  # Name of the secret,
            Parameter(
                name="repository_id", param_type=ParameterType.INTEGER, required=True
            ),  # ID of the repository to add
        ]

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Add_a_selected_repository_to_a_user_secret.method,
                Add_a_selected_repository_to_a_user_secret.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Add_a_selected_repository_to_a_user_secret': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Remove_a_selected_repository_from_a_user_secret(BaseFunction):
    """Removes a repository from a user secret."""

    name = "Remove a selected repository from a user secret"
    url = "/user/codespaces/secrets/{secret_name}/repositories/{repository_id}"
    args_in_url = True
    method = DELETE

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="secret_name", param_type=ParameterType.STRING, required=True
            ),  # Name of the secret,
            Parameter(
                name="repository_id", param_type=ParameterType.INTEGER, required=True
            ),  # ID of the repository to remove
        ]

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Remove_a_selected_repository_from_a_user_secret.method,
                Remove_a_selected_repository_from_a_user_secret.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Remove_a_selected_repository_from_a_user_secret': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class List_secrets_for_the_authenticated_user(BaseFunction):
    """Lists secrets for the authenticated user."""

    name = "List secrets for the authenticated user"
    url = "/user/codespaces/secrets"
    args_in_url = False
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                List_secrets_for_the_authenticated_user.method,
                List_secrets_for_the_authenticated_user.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'List_secrets_for_the_authenticated_user': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Get_public_key_for_the_authenticated_user(BaseFunction):
    """Gets the public key for the authenticated user."""

    name = "Get public key for the authenticated user"
    url = "/user/codespaces/secrets/public-key"
    args_in_url = False
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Get_public_key_for_the_authenticated_user.method,
                Get_public_key_for_the_authenticated_user.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_public_key_for_the_authenticated_user': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Get_a_secret_for_the_authenticated_user(BaseFunction):
    """Gets a specific secret for the authenticated user."""

    name = "Get a secret for the authenticated user"
    url = "/user/codespaces/secrets/{secret_name}"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="secret_name", param_type=ParameterType.STRING, required=True
            ),  # Name of the secret
        ]

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Get_a_secret_for_the_authenticated_user.method,
                Get_a_secret_for_the_authenticated_user.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_a_secret_for_the_authenticated_user': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class List_selected_repositories_for_a_user_secret(BaseFunction):
    """Lists repositories associated with a user secret."""

    name = "List selected repositories for a user secret"
    url = "/user/codespaces/secrets/{secret_name}/repositories"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="secret_name", param_type=ParameterType.STRING, required=True
            ),  # Name of the secret
        ]

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                List_selected_repositories_for_a_user_secret.method,
                List_selected_repositories_for_a_user_secret.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'List_selected_repositories_for_a_user_secret': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Update_user_profile(BaseFunction):
    """Updates the authenticated user's profile."""

    name = "Update user profile"
    url = "/user"
    args_in_url = False
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="name", param_type=ParameterType.STRING, required=False
            ),  # User's name,
            Parameter(
                name="email", param_type=ParameterType.STRING, required=False
            ),  # User's email,
            Parameter(
                name="blog", param_type=ParameterType.STRING, required=False
            ),  # User's blog URL,
            Parameter(
                name="twitter_username", param_type=ParameterType.STRING, required=False
            ),  # Twitter username of the user,
            Parameter(
                name="company", param_type=ParameterType.STRING, required=False
            ),  # Company of the user,
            Parameter(
                name="location", param_type=ParameterType.STRING, required=False
            ),  # Location of the user,
            Parameter(
                name="hireable", param_type=ParameterType.BOOLEAN, required=False
            ),  # Is the user hireable
        ]

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Update_user_profile.method,
                Update_user_profile.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Update_user_profile': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Add_social_accounts_for_the_authenticated_user(BaseFunction):
    """Adds social accounts to the authenticated user."""

    name = "Add social accounts for the authenticated user"
    url = "/user/social_accounts"
    args_in_url = False
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="social_accounts",
                param_type=OutputParameterType.OBJECT,
                required=True,
            ),  # List of social accounts to add
        ]

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Add_social_accounts_for_the_authenticated_user.method,
                Add_social_accounts_for_the_authenticated_user.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Add_social_accounts_for_the_authenticated_user': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Delete_social_accounts_for_the_authenticated_user(BaseFunction):
    """Deletes social accounts from the authenticated user."""

    name = "Delete social accounts for the authenticated user"
    url = "/user/social_accounts"
    args_in_url = False
    method = DELETE

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="social_accounts",
                param_type=OutputParameterType.OBJECT,
                required=True,
            ),  # List of social accounts to delete
        ]

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Delete_social_accounts_for_the_authenticated_user.method,
                Delete_social_accounts_for_the_authenticated_user.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Delete_social_accounts_for_the_authenticated_user': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Create_a_GPG_key_for_the_authenticated_user(BaseFunction):
    """Creates a GPG key for the authenticated user."""

    name = "Create a GPG key for the authenticated user"
    url = "/user/gpg_keys"
    args_in_url = False
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="key", param_type=ParameterType.STRING, required=True
            ),  # GPG key in ASCII-armored format
        ]

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Create_a_GPG_key_for_the_authenticated_user.method,
                Create_a_GPG_key_for_the_authenticated_user.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Create_a_GPG_key_for_the_authenticated_user': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Delete_a_GPG_key_for_the_authenticated_user(BaseFunction):
    """Deletes a GPG key for the authenticated user."""

    name = "Delete a GPG key for the authenticated user"
    url = "/user/gpg_keys/{gpg_key_id}"
    args_in_url = True
    method = DELETE

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="gpg_key_id", param_type=ParameterType.INTEGER, required=True
            ),  # ID of the GPG key to delete
        ]

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Delete_a_GPG_key_for_the_authenticated_user.method,
                Delete_a_GPG_key_for_the_authenticated_user.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Delete_a_GPG_key_for_the_authenticated_user': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class List_GPG_keys_for_the_authenticated_user(BaseFunction):
    """Lists GPG keys for the authenticated user."""

    name = "List GPG keys for the authenticated user"
    url = "/user/gpg_keys"
    args_in_url = False
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                List_GPG_keys_for_the_authenticated_user.method,
                List_GPG_keys_for_the_authenticated_user.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'List_GPG_keys_for_the_authenticated_user': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Get_a_GPG_key_for_the_authenticated_user(BaseFunction):
    """Gets a GPG key for the authenticated user."""

    name = "Get a GPG key for the authenticated user"
    url = "/user/gpg_keys/{gpg_key_id}"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="gpg_key_id", param_type=ParameterType.INTEGER, required=True
            ),  # ID of the GPG key
        ]

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Get_a_GPG_key_for_the_authenticated_user.method,
                Get_a_GPG_key_for_the_authenticated_user.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_a_GPG_key_for_the_authenticated_user': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Create_a_Gist(BaseFunction):
    """Creates a new gist."""

    name = "Create a Gist"
    url = "/gists"
    args_in_url = False
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="files", param_type=OutputParameterType.OBJECT, required=True
            ),  # Files to include in the gist,
            Parameter(
                name="description", param_type=ParameterType.STRING, required=False
            ),  # Gist description,
            Parameter(
                name="public", param_type=ParameterType.BOOLEAN, required=False
            ),  # Whether the gist is public
        ]

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Create_a_Gist.method, Create_a_Gist.url, input_data.validated_data
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Create_a_Gist': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Update_a_gist(BaseFunction):
    """Updates a gist."""

    name = "Update a gist"
    url = "/gists/{gist_id}"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="gist_id", param_type=ParameterType.STRING, required=True
            ),  # ID of the gist to update,
            Parameter(
                name="files", param_type=OutputParameterType.OBJECT, required=False
            ),  # Files to update in the gist,
            Parameter(
                name="description", param_type=ParameterType.STRING, required=False
            ),  # Gist description,
            Parameter(
                name="public", param_type=ParameterType.BOOLEAN, required=False
            ),  # Whether the gist is public
        ]

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Update_a_gist.method, Update_a_gist.url, input_data.validated_data
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Update_a_gist': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Delete_a_gist(BaseFunction):
    """Deletes a gist."""

    name = "Delete a gist"
    url = "/gists/{gist_id}"
    args_in_url = True
    method = DELETE

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="gist_id", param_type=ParameterType.STRING, required=True
            ),  # ID of the gist to delete
        ]

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Delete_a_gist.method, Delete_a_gist.url, input_data.validated_data
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Delete_a_gist': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Create_a_comment_on_a_gist(BaseFunction):
    """Creates a comment on a gist."""

    name = "Create a comment on a gist"
    url = "/gists/{gist_id}/comments"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="gist_id", param_type=ParameterType.STRING, required=True
            ),  # ID of the gist,
            Parameter(
                name="body", param_type=ParameterType.STRING, required=True
            ),  # Comment content
        ]

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Create_a_comment_on_a_gist.method,
                Create_a_comment_on_a_gist.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Create_a_comment_on_a_gist': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Update_a_comment_on_a_gist(BaseFunction):
    """Updates a comment on a gist."""

    name = "Update a comment on a gist"
    url = "/gists/{gist_id}/comments/{comment_id}"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="gist_id", param_type=ParameterType.STRING, required=True
            ),  # ID of the gist,
            Parameter(
                name="comment_id", param_type=ParameterType.INTEGER, required=True
            ),  # ID of the comment,
            Parameter(
                name="body", param_type=ParameterType.STRING, required=True
            ),  # Comment content
        ]

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Update_a_comment_on_a_gist.method,
                Update_a_comment_on_a_gist.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Update_a_comment_on_a_gist': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Delete_a_comment_on_a_gist(BaseFunction):
    """Deletes a comment on a gist."""

    name = "Delete a comment on a gist"
    url = "/gists/{gist_id}/comments/{comment_id}"
    args_in_url = True
    method = DELETE

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="gist_id", param_type=ParameterType.STRING, required=True
            ),  # ID of the gist,
            Parameter(
                name="comment_id", param_type=ParameterType.INTEGER, required=True
            ),  # ID of the comment
        ]

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Delete_a_comment_on_a_gist.method,
                Delete_a_comment_on_a_gist.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Delete_a_comment_on_a_gist': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Fork_a_gist(BaseFunction):
    """Forks a gist."""

    name = "Fork a gist"
    url = "/gists/{gist_id}/forks"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="gist_id", param_type=ParameterType.STRING, required=True
            ),  # ID of the gist
        ]

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Fork_a_gist.method, Fork_a_gist.url, input_data.validated_data
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Fork_a_gist': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Star_a_gist(BaseFunction):
    """Stars a gist."""

    name = "Star a gist"
    url = "/gists/{gist_id}/star"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="gist_id", param_type=ParameterType.STRING, required=True
            ),  # ID of the gist
        ]

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Star_a_gist.method, Star_a_gist.url, input_data.validated_data
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Star_a_gist': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Unstar_a_gist(BaseFunction):
    """Unstars a gist."""

    name = "Unstar a gist"
    url = "/gists/{gist_id}/star"
    args_in_url = True
    method = DELETE

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="gist_id", param_type=ParameterType.STRING, required=True
            ),  # ID of the gist
        ]

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Unstar_a_gist.method, Unstar_a_gist.url, input_data.validated_data
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Unstar_a_gist': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class List_repositories_starred_by_the_authenticated_user(BaseFunction):
    """Lists repositories starred by the authenticated user."""

    name = "List repositories starred by the authenticated user"
    url = "/user/starred"
    args_in_url = False
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                List_repositories_starred_by_the_authenticated_user.method,
                List_repositories_starred_by_the_authenticated_user.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'List_repositories_starred_by_the_authenticated_user': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Check_if_a_repository_is_starred_by_the_authenticated_user(BaseFunction):
    """Checks if a repository is starred by the authenticated user."""

    name = "Check if a repository is starred by the authenticated user"
    url = "/user/starred/{owner}/{repo}"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name
        ]

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Check_if_a_repository_is_starred_by_the_authenticated_user.method,
                Check_if_a_repository_is_starred_by_the_authenticated_user.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Check_if_a_repository_is_starred_by_the_authenticated_user': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class List_repositories_starred_by_a_user(BaseFunction):
    """Lists repositories starred by a specific user."""

    name = "List repositories starred by a user"
    url = "/users/{username}/starred"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="username", param_type=ParameterType.STRING, required=True
            ),  # Username
        ]

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                List_repositories_starred_by_a_user.method,
                List_repositories_starred_by_a_user.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'List_repositories_starred_by_a_user': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class List_repositories_watched_by_the_authenticated_user(BaseFunction):
    """Lists repositories watched by the authenticated user."""

    name = "List repositories watched by the authenticated user"
    url = "/user/subscriptions"
    args_in_url = False
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return []

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                List_repositories_watched_by_the_authenticated_user.method,
                List_repositories_watched_by_the_authenticated_user.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'List_repositories_watched_by_the_authenticated_user': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class List_repositories_watched_by_a_user(BaseFunction):
    """Lists repositories watched by a specific user."""

    name = "List repositories watched by a user"
    url = "/users/{username}/subscriptions"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="username", param_type=ParameterType.STRING, required=True
            ),  # Username
        ]

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                List_repositories_watched_by_a_user.method,
                List_repositories_watched_by_a_user.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'List_repositories_watched_by_a_user': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Create_an_attestation(BaseFunction):
    """Create an attestation in a repository."""

    name = "Create an attestation"
    url = "https://docs.github.com/en/rest/repos/repos#create-an-attestation"
    args_in_url = True
    method = INSERT

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Owner of the repository,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name,
            Parameter(
                name="subject_digest", param_type=ParameterType.STRING, required=True
            ),  # Digest of the subject to attest
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="attestation_id",
                param_type=OutputParameterType.INTEGER,
                is_array=False,
            ),  # Identifier of the created attestation
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Create_an_attestation.method,
                Create_an_attestation.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Create_an_attestation': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class List_attestations_for_a_subject_digest(BaseFunction):
    """Retrieve attestations for a specific subject digest."""

    name = "List attestations for a subject digest"
    url = "https://docs.github.com/en/rest/repos/repos#list-attestations"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Owner of the repository,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name,
            Parameter(
                name="subject_digest", param_type=ParameterType.STRING, required=True
            ),  # Digest of the subject
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="attestations",
                param_type=OutputParameterType.OBJECT,
                is_array=True,
            ),  # List of attestations for the subject digest
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                List_attestations_for_a_subject_digest.method,
                List_attestations_for_a_subject_digest.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'List_attestations_for_a_subject_digest': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Create_a_check_run(BaseFunction):
    """Create a new check run in a repository."""

    name = "Create a check run"
    url = "https://docs.github.com/en/rest/checks/runs#create-a-check-run"
    args_in_url = True
    method = INSERT

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name,
            Parameter(
                name="name", param_type=ParameterType.STRING, required=True
            ),  # Name of the check run,
            Parameter(
                name="head_sha", param_type=ParameterType.STRING, required=True
            ),  # SHA of the commit
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="check_run_id",
                param_type=OutputParameterType.INTEGER,
                is_array=False,
            ),  # Identifier of the created check run
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Create_a_check_run.method,
                Create_a_check_run.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Create_a_check_run': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Update_a_check_run(BaseFunction):
    """Update an existing check run."""

    name = "Update a check run"
    url = "https://docs.github.com/en/rest/checks/runs#update-a-check-run"
    args_in_url = True
    method = UPDATE

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name,
            Parameter(
                name="check_run_id", param_type=ParameterType.INTEGER, required=True
            ),  # ID of the check run to update,
            Parameter(
                name="status", param_type=ParameterType.STRING, required=False
            ),  # The status of the check run,
            Parameter(
                name="conclusion", param_type=ParameterType.STRING, required=False
            ),  # The conclusion of the check run
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="status", param_type=OutputParameterType.STRING, is_array=False
            ),  # Updated status of the check run
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Update_a_check_run.method,
                Update_a_check_run.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Update_a_check_run': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Create_a_check_suite(BaseFunction):
    """Create a new check suite in a repository."""

    name = "Create a check suite"
    url = "https://docs.github.com/en/rest/checks/suites#create-a-check-suite"
    args_in_url = True
    method = INSERT

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name,
            Parameter(
                name="head_sha", param_type=ParameterType.STRING, required=True
            ),  # SHA of the commit
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="check_suite_id",
                param_type=OutputParameterType.INTEGER,
                is_array=False,
            ),  # Identifier of the created check suite
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Create_a_check_suite.method,
                Create_a_check_suite.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Create_a_check_suite': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Update_repository_preferences_for_check_suites(BaseFunction):
    """Update the preferences for check suites in a repository."""

    name = "Update repository preferences for check suites"
    url = "https://docs.github.com/en/rest/checks/suites#update-repository-preferences-for-check-suites"
    args_in_url = True
    method = UPDATE

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name,
            Parameter(
                name="preferences",
                param_type=OutputParameterType.OBJECT,
                required=False,
            ),  # Preferences for check suites
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="preferences",
                param_type=OutputParameterType.OBJECT,
                is_array=False,
            ),  # Updated preferences for check suites
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Update_repository_preferences_for_check_suites.method,
                Update_repository_preferences_for_check_suites.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Update_repository_preferences_for_check_suites': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Rerequest_a_check_suite(BaseFunction):
    """Re-trigger checks for a check suite."""

    name = "Rerequest a check suite"
    url = "https://docs.github.com/en/rest/checks/suites#rerequest-a-check-suite"
    args_in_url = True
    method = INSERT

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name,
            Parameter(
                name="check_suite_id", param_type=ParameterType.INTEGER, required=True
            ),  # ID of the check suite to rerun
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="status", param_type=OutputParameterType.STRING, is_array=False
            ),  # Status of the rerun request
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Rerequest_a_check_suite.method,
                Rerequest_a_check_suite.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Rerequest_a_check_suite': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Get_a_check_run(BaseFunction):
    """Retrieve details of a specific check run."""

    name = "Get a check run"
    url = "https://docs.github.com/en/rest/checks/runs#get-a-check-run"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name,
            Parameter(
                name="check_run_id", param_type=ParameterType.INTEGER, required=True
            ),  # ID of the check run
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="check_run", param_type=OutputParameterType.OBJECT, is_array=False
            ),  # Details of the check run
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Get_a_check_run.method, Get_a_check_run.url, input_data.validated_data
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_a_check_run': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class List_check_run_annotations(BaseFunction):
    """List annotations for a specific check run."""

    name = "List check run annotations"
    url = "https://docs.github.com/en/rest/checks/runs#list-check-run-annotations"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name,
            Parameter(
                name="check_run_id", param_type=ParameterType.INTEGER, required=True
            ),  # ID of the check run
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="annotations", param_type=OutputParameterType.OBJECT, is_array=True
            ),  # List of annotations for the check run
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                List_check_run_annotations.method,
                List_check_run_annotations.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'List_check_run_annotations': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Get_a_check_suite(BaseFunction):
    """Retrieve details of a specific check suite."""

    name = "Get a check suite"
    url = "https://docs.github.com/en/rest/checks/suites#get-a-check-suite"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name,
            Parameter(
                name="check_suite_id", param_type=ParameterType.INTEGER, required=True
            ),  # ID of the check suite
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="check_suite",
                param_type=OutputParameterType.OBJECT,
                is_array=False,
            ),  # Details of the check suite
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Get_a_check_suite.method,
                Get_a_check_suite.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_a_check_suite': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class List_check_runs_in_a_check_suite(BaseFunction):
    """List all check runs within a specific check suite."""

    name = "List check runs in a check suite"
    url = "https://docs.github.com/en/rest/checks/runs#list-check-runs-in-a-check-suite"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name,
            Parameter(
                name="check_suite_id", param_type=ParameterType.INTEGER, required=True
            ),  # ID of the check suite
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="check_runs", param_type=OutputParameterType.OBJECT, is_array=True
            ),  # List of check runs in the check suite
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                List_check_runs_in_a_check_suite.method,
                List_check_runs_in_a_check_suite.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = (
                f"Error running function 'List_check_runs_in_a_check_suite': {str(e)}"
            )
            logging.error(error_msg)
            raise ValueError(error_msg)


class List_check_runs_for_a_git_reference(BaseFunction):
    """List check runs for a specific git reference."""

    name = "List check runs for a git reference"
    url = "https://docs.github.com/en/rest/checks/runs#list-check-runs-for-a-git-reference"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name,
            Parameter(
                name="ref", param_type=ParameterType.STRING, required=True
            ),  # Git reference
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="check_runs", param_type=OutputParameterType.OBJECT, is_array=True
            ),  # List of check runs for the specified git reference
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                List_check_runs_for_a_git_reference.method,
                List_check_runs_for_a_git_reference.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'List_check_runs_for_a_git_reference': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class List_check_suites_for_a_git_reference(BaseFunction):
    """List check suites for a specific git reference."""

    name = "List check suites for a git reference"
    url = "https://docs.github.com/en/rest/checks/suites#list-check-suites-for-a-git-reference"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name,
            Parameter(
                name="ref", param_type=ParameterType.STRING, required=True
            ),  # Git reference
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="check_suites",
                param_type=OutputParameterType.OBJECT,
                is_array=True,
            ),  # List of check suites for the specified git reference
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                List_check_suites_for_a_git_reference.method,
                List_check_suites_for_a_git_reference.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'List_check_suites_for_a_git_reference': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Update_a_code_scanning_alert(BaseFunction):
    """Update a specific code scanning alert."""

    name = "Update a code scanning alert"
    url = "https://docs.github.com/en/rest/code-scanning/alerts#update-a-code-scanning-alert"
    args_in_url = True
    method = UPDATE

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name,
            Parameter(
                name="alert_number", param_type=ParameterType.INTEGER, required=True
            ),  # Alert number
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="alert", param_type=OutputParameterType.OBJECT, is_array=False
            ),  # Details of the updated alert
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Update_a_code_scanning_alert.method,
                Update_a_code_scanning_alert.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = (
                f"Error running function 'Update_a_code_scanning_alert': {str(e)}"
            )
            logging.error(error_msg)
            raise ValueError(error_msg)


class Create_an_autofix_for_a_code_scanning_alert(BaseFunction):
    """Create an autofix for a specific code scanning alert."""

    name = "Create an autofix for a code scanning alert"
    url = "https://docs.github.com/en/rest/code-scanning/alerts#create-an-autofix-for-a-code-scanning-alert"
    args_in_url = True
    method = INSERT

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name,
            Parameter(
                name="alert_number", param_type=ParameterType.INTEGER, required=True
            ),  # Alert number
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="autofix_id",
                param_type=OutputParameterType.INTEGER,
                is_array=False,
            ),  # Identifier of the created autofix
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Create_an_autofix_for_a_code_scanning_alert.method,
                Create_an_autofix_for_a_code_scanning_alert.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Create_an_autofix_for_a_code_scanning_alert': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Delete_a_code_scanning_analysis_from_a_repository(BaseFunction):
    """Delete a code scanning analysis from a repository."""

    name = "Delete a code scanning analysis from a repository"
    url = "https://docs.github.com/en/rest/code-scanning/analyses#delete-a-code-scanning-analysis-from-a-repository"
    args_in_url = True
    method = DELETE

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name,
            Parameter(
                name="analysis_id", param_type=ParameterType.INTEGER, required=True
            ),  # ID of the analysis to delete
        ]

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Delete_a_code_scanning_analysis_from_a_repository.method,
                Delete_a_code_scanning_analysis_from_a_repository.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Delete_a_code_scanning_analysis_from_a_repository': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Upload_an_analysis_as_SARIF_data(BaseFunction):
    """Upload SARIF data as a new analysis for code scanning."""

    name = "Upload an analysis as SARIF data"
    url = "https://docs.github.com/en/rest/code-scanning/alerts#create-an-autofix-for-a-code-scanning-alert"
    args_in_url = True
    method = INSERT

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name,
            Parameter(
                name="sarif_data", param_type=ParameterType.STRING, required=True
            ),  # SARIF data content
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="sarif_id", param_type=OutputParameterType.STRING, is_array=False
            ),  # Identifier of the SARIF upload
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Upload_an_analysis_as_SARIF_data.method,
                Upload_an_analysis_as_SARIF_data.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = (
                f"Error running function 'Upload_an_analysis_as_SARIF_data': {str(e)}"
            )
            logging.error(error_msg)
            raise ValueError(error_msg)


class List_code_scanning_alerts_for_an_organization(BaseFunction):
    """List all code scanning alerts for an organization."""

    name = "List code scanning alerts for an organization"
    url = "https://docs.github.com/en/rest/code-scanning/alerts#list-code-scanning-alerts-for-an-organization"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="org", param_type=ParameterType.STRING, required=True
            ),  # Organization name
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="alerts", param_type=OutputParameterType.OBJECT, is_array=True
            ),  # List of code scanning alerts for the organization
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                List_code_scanning_alerts_for_an_organization.method,
                List_code_scanning_alerts_for_an_organization.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'List_code_scanning_alerts_for_an_organization': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class List_code_scanning_alerts_for_a_repository(BaseFunction):
    """List all code scanning alerts for a specific repository."""

    name = "List code scanning alerts for a repository"
    url = "https://docs.github.com/en/rest/code-scanning/alerts#list-code-scanning-alerts-for-a-repository"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="alerts", param_type=OutputParameterType.OBJECT, is_array=True
            ),  # List of code scanning alerts in the repository
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                List_code_scanning_alerts_for_a_repository.method,
                List_code_scanning_alerts_for_a_repository.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'List_code_scanning_alerts_for_a_repository': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Get_a_code_scanning_alert(BaseFunction):
    """Retrieve details of a specific code scanning alert."""

    name = "Get a code scanning alert"
    url = (
        "https://docs.github.com/en/rest/code-scanning/alerts#get-a-code-scanning-alert"
    )
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name,
            Parameter(
                name="alert_number", param_type=ParameterType.INTEGER, required=True
            ),  # Alert number
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="alert", param_type=OutputParameterType.OBJECT, is_array=False
            ),  # Details of the code scanning alert
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Get_a_code_scanning_alert.method,
                Get_a_code_scanning_alert.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_a_code_scanning_alert': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Get_autofix_status_of_a_code_scanning_alert(BaseFunction):
    """Get the status of an autofix for a code scanning alert."""

    name = "Get autofix status of a code scanning alert"
    url = "https://docs.github.com/en/rest/code-scanning/alerts#get-the-status-of-an-autofix-for-a-code-scanning-alert"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name,
            Parameter(
                name="alert_number", param_type=ParameterType.INTEGER, required=True
            ),  # Alert number
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="autofix", param_type=OutputParameterType.OBJECT, is_array=False
            ),  # Autofix status information
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Get_autofix_status_of_a_code_scanning_alert.method,
                Get_autofix_status_of_a_code_scanning_alert.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_autofix_status_of_a_code_scanning_alert': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class List_instances_of_a_code_scanning_alert(BaseFunction):
    """List all instances of a specific code scanning alert."""

    name = "List instances of a code scanning alert"
    url = "https://docs.github.com/en/rest/code-scanning/alerts#list-instances-of-a-code-scanning-alert"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name,
            Parameter(
                name="alert_number", param_type=ParameterType.INTEGER, required=True
            ),  # Alert number
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="instances", param_type=OutputParameterType.OBJECT, is_array=True
            ),  # List of instances of the alert
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                List_instances_of_a_code_scanning_alert.method,
                List_instances_of_a_code_scanning_alert.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'List_instances_of_a_code_scanning_alert': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class List_analyses_of_a_repository(BaseFunction):
    """Retrieve all analyses for a repository."""

    name = "List analyses of a repository"
    url = "https://docs.github.com/en/rest/code-scanning/analyses#list-code-scanning-analyses-for-a-repository"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="analyses", param_type=OutputParameterType.OBJECT, is_array=True
            ),  # List of analyses for the repository
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                List_analyses_of_a_repository.method,
                List_analyses_of_a_repository.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = (
                f"Error running function 'List_analyses_of_a_repository': {str(e)}"
            )
            logging.error(error_msg)
            raise ValueError(error_msg)


class Get_a_specific_analysis(BaseFunction):
    """Retrieve a specific code scanning analysis."""

    name = "Get a specific analysis"
    url = "https://docs.github.com/en/rest/code-scanning/analyses#get-a-code-scanning-analysis-for-a-repository"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name,
            Parameter(
                name="analysis_id", param_type=ParameterType.INTEGER, required=True
            ),  # Analysis ID
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="analysis", param_type=OutputParameterType.OBJECT, is_array=False
            ),  # Details of the analysis
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Get_a_specific_analysis.method,
                Get_a_specific_analysis.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_a_specific_analysis': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Get_information_about_a_SARIF_upload(BaseFunction):
    """Get details of a SARIF upload."""

    name = "Get information about a SARIF upload"
    url = "https://docs.github.com/en/rest/code-scanning/alerts#get-information-about-a-sarif-upload"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name,
            Parameter(
                name="sarif_id", param_type=ParameterType.STRING, required=True
            ),  # SARIF upload ID
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="sarif", param_type=OutputParameterType.OBJECT, is_array=False
            ),  # Details of the SARIF upload
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Get_information_about_a_SARIF_upload.method,
                Get_information_about_a_SARIF_upload.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_information_about_a_SARIF_upload': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class List_repository_security_advisories_for_an_organization(BaseFunction):
    """Retrieve the list of security advisories for an organization."""

    name = "List repository security advisories for an organization"
    url = "https://api.github.com/orgs/{org}/security-advisories"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="org", param_type=ParameterType.STRING, required=True
            ),  # The organization name.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="securityAdvisories",
                param_type=OutputParameterType.OBJECT,
                is_array=True,
            ),  # List of security advisories.
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                List_repository_security_advisories_for_an_organization.method,
                List_repository_security_advisories_for_an_organization.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'List_repository_security_advisories_for_an_organization': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Create_a_repository_security_advisory(BaseFunction):
    """Create a new security advisory for a repository."""

    name = "Create a repository security advisory"
    url = "https://api.github.com/repos/{owner}/{repo}/security-advisories"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner.,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name.,
            Parameter(
                name="securityAdvisory",
                param_type=OutputParameterType.OBJECT,
                required=True,
            ),  # The security advisory details.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="securityAdvisory",
                param_type=OutputParameterType.OBJECT,
                is_array=False,
            ),  # Created security advisory.
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Create_a_repository_security_advisory.method,
                Create_a_repository_security_advisory.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Create_a_repository_security_advisory': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Report_a_security_vulnerability_report(BaseFunction):
    """Privately report a security vulnerability."""

    name = "Report a security vulnerability report"
    url = "https://api.github.com/repos/{owner}/{repo}/security-advisories/reports"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner.,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name.,
            Parameter(
                name="report", param_type=OutputParameterType.OBJECT, required=True
            ),  # The vulnerability report details.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="report", param_type=OutputParameterType.OBJECT, is_array=False
            ),  # Reported vulnerability details.
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Report_a_security_vulnerability_report.method,
                Report_a_security_vulnerability_report.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Report_a_security_vulnerability_report': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Update_a_repository_security_advisory(BaseFunction):
    """Update an existing repository security advisory."""

    name = "Update a repository security advisory"
    url = "https://api.github.com/repos/{owner}/{repo}/security-advisories/{ghsa_id}"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner.,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name.,
            Parameter(
                name="ghsa_id", param_type=ParameterType.STRING, required=True
            ),  # GHSA ID of the advisory.,
            Parameter(
                name="advisory", param_type=OutputParameterType.OBJECT, required=True
            ),  # The updated advisory details.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="advisory", param_type=OutputParameterType.OBJECT, is_array=False
            ),  # Updated security advisory.
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Update_a_repository_security_advisory.method,
                Update_a_repository_security_advisory.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Update_a_repository_security_advisory': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Request_a_CVE_for_a_repository_security_advisory(BaseFunction):
    """Request a CVE for a repository security advisory."""

    name = "Request a CVE for a repository security advisory"
    url = (
        "https://api.github.com/repos/{owner}/{repo}/security-advisories/{ghsa_id}/cve"
    )
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner.,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name.,
            Parameter(
                name="ghsa_id", param_type=ParameterType.STRING, required=True
            ),  # GHSA ID of the advisory.,
            Parameter(
                name="cve", param_type=OutputParameterType.OBJECT, required=True
            ),  # CVE details.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="cve", param_type=OutputParameterType.OBJECT, is_array=False
            ),  # CVE information associated with the advisory.
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Request_a_CVE_for_a_repository_security_advisory.method,
                Request_a_CVE_for_a_repository_security_advisory.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Request_a_CVE_for_a_repository_security_advisory': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class List_repository_security_advisories(BaseFunction):
    """Retrieve security advisories for a repository."""

    name = "List repository security advisories"
    url = "https://api.github.com/repos/{owner}/{repo}/security-advisories"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner.,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="securityAdvisories",
                param_type=OutputParameterType.OBJECT,
                is_array=True,
            ),  # List of security advisories.
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                List_repository_security_advisories.method,
                List_repository_security_advisories.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'List_repository_security_advisories': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Get_a_repository_security_advisory(BaseFunction):
    """Retrieve a specific security advisory from a repository."""

    name = "Get a repository security advisory"
    url = "https://api.github.com/repos/{owner}/{repo}/security-advisories/{ghsa_id}"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner.,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name.,
            Parameter(
                name="ghsa_id", param_type=ParameterType.STRING, required=True
            ),  # GHSA ID of the advisory.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="advisory", param_type=OutputParameterType.OBJECT, is_array=False
            ),  # The security advisory details.
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Get_a_repository_security_advisory.method,
                Get_a_repository_security_advisory.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = (
                f"Error running function 'Get_a_repository_security_advisory': {str(e)}"
            )
            logging.error(error_msg)
            raise ValueError(error_msg)


class Create_a_temporary_private_fork_of_a_security_advisory(BaseFunction):
    """Create a temporary private fork for a security advisory."""

    name = "Create a temporary private fork of a security advisory"
    url = "https://api.github.com/repos/{owner}/{repo}/security-advisories/{ghsa_id}/forks"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner.,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name.,
            Parameter(
                name="ghsa_id", param_type=ParameterType.STRING, required=True
            ),  # GHSA ID of the advisory.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="fork_info", param_type=OutputParameterType.OBJECT, is_array=False
            ),  # Information about the temporary fork.
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Create_a_temporary_private_fork_of_a_security_advisory.method,
                Create_a_temporary_private_fork_of_a_security_advisory.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Create_a_temporary_private_fork_of_a_security_advisory': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class List_secret_scanning_alerts_for_an_organization(BaseFunction):
    """Get secret scanning alerts for an organization."""

    name = "List secret scanning alerts for an organization"
    url = "https://api.github.com/orgs/{org}/secret-scanning/alerts"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="org", param_type=ParameterType.STRING, required=True
            ),  # Organization name.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="alerts", param_type=OutputParameterType.OBJECT, is_array=True
            ),  # List of secret scanning alerts.
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                List_secret_scanning_alerts_for_an_organization.method,
                List_secret_scanning_alerts_for_an_organization.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'List_secret_scanning_alerts_for_an_organization': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class List_secret_scanning_alerts_for_a_repository(BaseFunction):
    """Get secret scanning alerts for a repository."""

    name = "List secret scanning alerts for a repository"
    url = "https://api.github.com/repos/{owner}/{repo}/secret-scanning/alerts"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner.,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="alerts", param_type=OutputParameterType.OBJECT, is_array=True
            ),  # List of secret scanning alerts.
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                List_secret_scanning_alerts_for_a_repository.method,
                List_secret_scanning_alerts_for_a_repository.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'List_secret_scanning_alerts_for_a_repository': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Get_a_secret_scanning_alert(BaseFunction):
    """Get details of a secret scanning alert."""

    name = "Get a secret scanning alert"
    url = "https://api.github.com/repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner.,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name.,
            Parameter(
                name="alert_number", param_type=ParameterType.INTEGER, required=True
            ),  # Alert number.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="alert", param_type=OutputParameterType.OBJECT, is_array=False
            ),  # Secret scanning alert details.
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Get_a_secret_scanning_alert.method,
                Get_a_secret_scanning_alert.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = (
                f"Error running function 'Get_a_secret_scanning_alert': {str(e)}"
            )
            logging.error(error_msg)
            raise ValueError(error_msg)


class List_locations_for_a_secret_scanning_alert(BaseFunction):
    """List locations for a secret scanning alert."""

    name = "List locations for a secret scanning alert"
    url = "https://api.github.com/repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}/locations"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner.,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name.,
            Parameter(
                name="alert_number", param_type=ParameterType.INTEGER, required=True
            ),  # Alert number.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="locations", param_type=OutputParameterType.OBJECT, is_array=True
            ),  # Locations associated with the alert.
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                List_locations_for_a_secret_scanning_alert.method,
                List_locations_for_a_secret_scanning_alert.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'List_locations_for_a_secret_scanning_alert': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Get_secret_scanning_scan_history_for_a_repository(BaseFunction):
    """Get secret scanning scan history for a repository."""

    name = "Get secret scanning scan history for a repository"
    url = "https://api.github.com/repos/{owner}/{repo}/secret-scanning/scan-history"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner.,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="scanHistory", param_type=OutputParameterType.OBJECT, is_array=True
            ),  # Scan history entries.
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Get_secret_scanning_scan_history_for_a_repository.method,
                Get_secret_scanning_scan_history_for_a_repository.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_secret_scanning_scan_history_for_a_repository': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Set_a_repository_secret_create_or_update(BaseFunction):
    """Create or update a repository secret."""

    name = "Set a repository secret (create or update)"
    url = "https://api.github.com/repos/{owner}/{repo}/actions/secrets/{secret_name}"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner.,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name.,
            Parameter(
                name="secret_name", param_type=ParameterType.STRING, required=True
            ),  # Secret name.,
            Parameter(
                name="secret", param_type=OutputParameterType.OBJECT, required=True
            ),  # The secret details.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="secret", param_type=OutputParameterType.OBJECT, is_array=False
            ),  # The created or updated secret.
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Set_a_repository_secret_create_or_update.method,
                Set_a_repository_secret_create_or_update.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Set_a_repository_secret_create_or_update': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Delete_a_repository_secret(BaseFunction):
    """Delete a repository secret."""

    name = "Delete a repository secret"
    url = "https://api.github.com/repos/{owner}/{repo}/actions/secrets/{secret_name}"
    args_in_url = True
    method = DELETE

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner.,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name.,
            Parameter(
                name="secret_name", param_type=ParameterType.STRING, required=True
            ),  # Secret name.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="result", param_type=OutputParameterType.STRING, is_array=False
            ),  # Result of the deletion.
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Delete_a_repository_secret.method,
                Delete_a_repository_secret.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Delete_a_repository_secret': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class List_organization_secrets_for_a_repository(BaseFunction):
    """List organization secrets for a repository."""

    name = "List organization secrets for a repository"
    url = "https://api.github.com/repos/{owner}/{repo}/actions/organization-secrets"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner.,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="organizationSecrets",
                param_type=OutputParameterType.OBJECT,
                is_array=True,
            ),  # List of organization secrets.
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                List_organization_secrets_for_a_repository.method,
                List_organization_secrets_for_a_repository.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'List_organization_secrets_for_a_repository': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class List_repository_secrets(BaseFunction):
    """List secrets for a repository."""

    name = "List repository secrets"
    url = "https://api.github.com/repos/{owner}/{repo}/actions/secrets"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner.,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="secrets", param_type=OutputParameterType.OBJECT, is_array=True
            ),  # List of secrets.
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                List_repository_secrets.method,
                List_repository_secrets.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'List_repository_secrets': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Get_a_repository_public_key_for_secrets_encryption(BaseFunction):
    """Get the public key for secrets encryption."""

    name = "Get a repository public key for secrets encryption"
    url = "https://api.github.com/repos/{owner}/{repo}/actions/secrets/public-key"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner.,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="publicKey", param_type=OutputParameterType.OBJECT, is_array=False
            ),  # Public key for encrypting secrets.
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Get_a_repository_public_key_for_secrets_encryption.method,
                Get_a_repository_public_key_for_secrets_encryption.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_a_repository_public_key_for_secrets_encryption': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Get_a_specific_repository_secret(BaseFunction):
    """Get details of a repository secret."""

    name = "Get a specific repository secret"
    url = "https://api.github.com/repos/{owner}/{repo}/actions/secrets/{secret_name}"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner.,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name.,
            Parameter(
                name="secret_name", param_type=ParameterType.STRING, required=True
            ),  # Secret name.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="secret", param_type=OutputParameterType.OBJECT, is_array=False
            ),  # The secret details.
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Get_a_specific_repository_secret.method,
                Get_a_specific_repository_secret.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = (
                f"Error running function 'Get_a_specific_repository_secret': {str(e)}"
            )
            logging.error(error_msg)
            raise ValueError(error_msg)


class Create_or_update_a_repository_variable(BaseFunction):
    """List repository variables."""

    name = "Create or update a repository variable"
    url = "https://api.github.com/repos/{owner}/{repo}/actions/variables"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner.,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="variables", param_type=OutputParameterType.OBJECT, is_array=True
            ),  # List of variables.
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Create_or_update_a_repository_variable.method,
                Create_or_update_a_repository_variable.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Create_or_update_a_repository_variable': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Create_update_or_delete_a_repository_variable(BaseFunction):
    """Create, update, or delete a repository variable."""

    name = "Create, update, or delete a repository variable"
    url = "https://api.github.com/repos/{owner}/{repo}/actions/variables/{name}"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner.,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name.,
            Parameter(
                name="name", param_type=ParameterType.STRING, required=True
            ),  # Variable name.,
            Parameter(
                name="action", param_type=ParameterType.STRING, required=False
            ),  # Action to perform: create, update, delete.,
            Parameter(
                name="variable", param_type=OutputParameterType.OBJECT, required=False
            ),  # Variable details for create or update.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="variable", param_type=OutputParameterType.OBJECT, is_array=False
            ),  # The variable details.
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Create_update_or_delete_a_repository_variable.method,
                Create_update_or_delete_a_repository_variable.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Create_update_or_delete_a_repository_variable': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Create_or_update_a_repository_webhook(BaseFunction):
    """Create or update a repository webhook."""

    name = "Create or update a repository webhook"
    url = "https://api.github.com/repos/{owner}/{repo}/hooks"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner.,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name.,
            Parameter(
                name="hook", param_type=OutputParameterType.OBJECT, required=True
            ),  # Webhook configuration details.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="hook", param_type=OutputParameterType.OBJECT, is_array=False
            ),  # Created or updated webhook.
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Create_or_update_a_repository_webhook.method,
                Create_or_update_a_repository_webhook.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Create_or_update_a_repository_webhook': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class List_repository_webhooks(BaseFunction):
    """List webhooks for a repository."""

    name = "List repository webhooks"
    url = "https://api.github.com/repos/{owner}/{repo}/hooks"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner.,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="webhooks", param_type=OutputParameterType.OBJECT, is_array=True
            ),  # List of webhooks.
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                List_repository_webhooks.method,
                List_repository_webhooks.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'List_repository_webhooks': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Get_a_repository_webhook(BaseFunction):
    """Get a specific repository webhook."""

    name = "Get a repository webhook"
    url = "https://api.github.com/repos/{owner}/{repo}/hooks/{hook_id}"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner.,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name.,
            Parameter(
                name="hook_id", param_type=ParameterType.INTEGER, required=True
            ),  # Webhook ID.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="webhook", param_type=OutputParameterType.OBJECT, is_array=False
            ),  # Webhook details.
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Get_a_repository_webhook.method,
                Get_a_repository_webhook.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_a_repository_webhook': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Update_a_repository_webhook(BaseFunction):
    """Update a repository webhook."""

    name = "Update a repository webhook"
    url = "https://api.github.com/repos/{owner}/{repo}/hooks/{hook_id}"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner.,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name.,
            Parameter(
                name="hook_id", param_type=ParameterType.INTEGER, required=True
            ),  # Webhook ID.,
            Parameter(
                name="webhook", param_type=OutputParameterType.OBJECT, required=True
            ),  # Webhook configuration details.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="webhook", param_type=OutputParameterType.OBJECT, is_array=False
            ),  # Updated webhook.
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Update_a_repository_webhook.method,
                Update_a_repository_webhook.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = (
                f"Error running function 'Update_a_repository_webhook': {str(e)}"
            )
            logging.error(error_msg)
            raise ValueError(error_msg)


class Delete_a_repository_webhook(BaseFunction):
    """Delete a repository webhook."""

    name = "Delete a repository webhook"
    url = "https://api.github.com/repos/{owner}/{repo}/hooks/{hook_id}"
    args_in_url = True
    method = DELETE

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner.,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name.,
            Parameter(
                name="hook_id", param_type=ParameterType.INTEGER, required=True
            ),  # Webhook ID.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="result", param_type=OutputParameterType.STRING, is_array=False
            ),  # Result of the operation.
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Delete_a_repository_webhook.method,
                Delete_a_repository_webhook.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = (
                f"Error running function 'Delete_a_repository_webhook': {str(e)}"
            )
            logging.error(error_msg)
            raise ValueError(error_msg)


class Ping_a_repository_webhook(BaseFunction):
    """Ping a webhook to test its connection."""

    name = "Ping a repository webhook"
    url = "https://api.github.com/repos/{owner}/{repo}/hooks/{hook_id}/pings"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner.,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name.,
            Parameter(
                name="hook_id", param_type=ParameterType.INTEGER, required=True
            ),  # Webhook ID.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="result", param_type=OutputParameterType.STRING, is_array=False
            ),  # Result of the ping operation.
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Ping_a_repository_webhook.method,
                Ping_a_repository_webhook.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Ping_a_repository_webhook': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class List_deliveries_for_a_repository_webhook(BaseFunction):
    """List deliveries for a webhook."""

    name = "List deliveries for a repository webhook"
    url = "https://api.github.com/repos/{owner}/{repo}/hooks/{hook_id}/deliveries"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner.,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name.,
            Parameter(
                name="hook_id", param_type=ParameterType.INTEGER, required=True
            ),  # Webhook ID.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="deliveries", param_type=OutputParameterType.OBJECT, is_array=True
            ),  # List of delivery events.
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                List_deliveries_for_a_repository_webhook.method,
                List_deliveries_for_a_repository_webhook.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'List_deliveries_for_a_repository_webhook': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Get_a_delivery_for_a_repository_webhook(BaseFunction):
    """Get details of a specific delivery for a webhook."""

    name = "Get a delivery for a repository webhook"
    url = "https://api.github.com/repos/{owner}/{repo}/hooks/{hook_id}/deliveries/{delivery_id}"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner.,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name.,
            Parameter(
                name="hook_id", param_type=ParameterType.INTEGER, required=True
            ),  # Webhook ID.,
            Parameter(
                name="delivery_id", param_type=ParameterType.INTEGER, required=True
            ),  # Delivery ID.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="delivery", param_type=OutputParameterType.OBJECT, is_array=False
            ),  # Details of the delivery.
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Get_a_delivery_for_a_repository_webhook.method,
                Get_a_delivery_for_a_repository_webhook.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_a_delivery_for_a_repository_webhook': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Ping_a_repository_webhook(BaseFunction):
    """Ping for a webhook to test connectivity."""

    name = "Ping a repository webhook"
    url = "https://api.github.com/repos/{owner}/{repo}/hooks/{hook_id}/pings"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner.,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name.,
            Parameter(
                name="hook_id", param_type=ParameterType.INTEGER, required=True
            ),  # Webhook ID.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="result", param_type=OutputParameterType.STRING, is_array=False
            ),  # Result of the ping operation.
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Ping_a_repository_webhook.method,
                Ping_a_repository_webhook.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Ping_a_repository_webhook': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Test_the_push_to_a_repository_webhook(BaseFunction):
    """Test the push to a repository webhook."""

    name = "Test the push to a repository webhook"
    url = "https://api.github.com/repos/{owner}/{repo}/hooks/{hook_id}/tests"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner.,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name.,
            Parameter(
                name="hook_id", param_type=ParameterType.INTEGER, required=True
            ),  # Webhook ID.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="result", param_type=OutputParameterType.STRING, is_array=False
            ),  # Result of the test.
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Test_the_push_to_a_repository_webhook.method,
                Test_the_push_to_a_repository_webhook.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Test_the_push_to_a_repository_webhook': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Create_or_update_a_file_in_a_repository(BaseFunction):
    """Create or update a file in a repository."""

    name = "Create or update a file in a repository"
    url = "https://api.github.com/repos/{owner}/{repo}/contents/{path}"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner.,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name.,
            Parameter(
                name="path", param_type=ParameterType.STRING, required=True
            ),  # File path.,
            Parameter(
                name="content", param_type=ParameterType.STRING, required=True
            ),  # File content, base64 encoded.,
            Parameter(
                name="message", param_type=ParameterType.STRING, required=True
            ),  # Commit message.,
            Parameter(
                name="branch", param_type=ParameterType.STRING, required=False
            ),  # Branch name.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="content", param_type=OutputParameterType.OBJECT, is_array=False
            ),  # File content after the operation.
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Create_or_update_a_file_in_a_repository.method,
                Create_or_update_a_file_in_a_repository.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Create_or_update_a_file_in_a_repository': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Delete_a_file_in_a_repository(BaseFunction):
    """Delete a file in a repository."""

    name = "Delete a file in a repository"
    url = "https://api.github.com/repos/{owner}/{repo}/contents/{path}"
    args_in_url = True
    method = DELETE

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner.,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name.,
            Parameter(
                name="path", param_type=ParameterType.STRING, required=True
            ),  # File path.,
            Parameter(
                name="message", param_type=ParameterType.STRING, required=True
            ),  # Commit message.,
            Parameter(
                name="branch", param_type=ParameterType.STRING, required=False
            ),  # Branch name.,
            Parameter(
                name="sha", param_type=ParameterType.STRING, required=True
            ),  # SHA of the file to delete.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="result", param_type=OutputParameterType.STRING, is_array=False
            ),  # Result of the deletion.
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Delete_a_file_in_a_repository.method,
                Delete_a_file_in_a_repository.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = (
                f"Error running function 'Delete_a_file_in_a_repository': {str(e)}"
            )
            logging.error(error_msg)
            raise ValueError(error_msg)


class List_organization_secrets_for_a_repository(BaseFunction):
    """List organization secrets for a repository."""

    name = "List organization secrets for a repository"
    url = "https://api.github.com/repos/{owner}/{repo}/actions/organization-secrets"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner.,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="organizationSecrets",
                param_type=OutputParameterType.OBJECT,
                is_array=True,
            ),  # List of organization secrets.
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                List_organization_secrets_for_a_repository.method,
                List_organization_secrets_for_a_repository.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'List_organization_secrets_for_a_repository': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class List_repository_secrets(BaseFunction):
    """List secrets for a repository."""

    name = "List repository secrets"
    url = "https://api.github.com/repos/{owner}/{repo}/actions/secrets"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner.,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="secrets", param_type=OutputParameterType.OBJECT, is_array=True
            ),  # List of secrets.
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                List_repository_secrets.method,
                List_repository_secrets.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'List_repository_secrets': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Get_a_repository_public_key_for_secrets_encryption(BaseFunction):
    """Get the public key for secrets encryption."""

    name = "Get a repository public key for secrets encryption"
    url = "https://api.github.com/repos/{owner}/{repo}/actions/secrets/public-key"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner.,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="publicKey", param_type=OutputParameterType.OBJECT, is_array=False
            ),  # Public key for encrypting secrets.
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Get_a_repository_public_key_for_secrets_encryption.method,
                Get_a_repository_public_key_for_secrets_encryption.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_a_repository_public_key_for_secrets_encryption': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Get_a_specific_repository_secret(BaseFunction):
    """Get details of a repository secret."""

    name = "Get a specific repository secret"
    url = "https://api.github.com/repos/{owner}/{repo}/actions/secrets/{secret_name}"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner.,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name.,
            Parameter(
                name="secret_name", param_type=ParameterType.STRING, required=True
            ),  # Secret name.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="secret", param_type=OutputParameterType.OBJECT, is_array=False
            ),  # The secret details.
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Get_a_specific_repository_secret.method,
                Get_a_specific_repository_secret.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = (
                f"Error running function 'Get_a_specific_repository_secret': {str(e)}"
            )
            logging.error(error_msg)
            raise ValueError(error_msg)


class Create_or_update_a_repository_variable(BaseFunction):
    """List repository variables."""

    name = "Create or update a repository variable"
    url = "https://api.github.com/repos/{owner}/{repo}/actions/variables"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner.,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="variables", param_type=OutputParameterType.OBJECT, is_array=True
            ),  # List of variables.
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Create_or_update_a_repository_variable.method,
                Create_or_update_a_repository_variable.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Create_or_update_a_repository_variable': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Create_update_or_delete_a_repository_variable(BaseFunction):
    """Create, update, or delete a repository variable."""

    name = "Create, update, or delete a repository variable"
    url = "https://api.github.com/repos/{owner}/{repo}/actions/variables/{name}"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner.,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name.,
            Parameter(
                name="name", param_type=ParameterType.STRING, required=True
            ),  # Variable name.,
            Parameter(
                name="action", param_type=ParameterType.STRING, required=False
            ),  # Action to perform: create, update, delete.,
            Parameter(
                name="variable", param_type=OutputParameterType.OBJECT, required=False
            ),  # Variable details for create or update.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="variable", param_type=OutputParameterType.OBJECT, is_array=False
            ),  # The variable details.
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Create_update_or_delete_a_repository_variable.method,
                Create_update_or_delete_a_repository_variable.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Create_update_or_delete_a_repository_variable': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Create_or_update_a_repository_webhook(BaseFunction):
    """Create or update a repository webhook."""

    name = "Create or update a repository webhook"
    url = "https://api.github.com/repos/{owner}/{repo}/hooks"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner.,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name.,
            Parameter(
                name="hook", param_type=OutputParameterType.OBJECT, required=True
            ),  # Webhook configuration details.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="hook", param_type=OutputParameterType.OBJECT, is_array=False
            ),  # Created or updated webhook.
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Create_or_update_a_repository_webhook.method,
                Create_or_update_a_repository_webhook.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Create_or_update_a_repository_webhook': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class List_repository_webhooks(BaseFunction):
    """List webhooks for a repository."""

    name = "List repository webhooks"
    url = "https://api.github.com/repos/{owner}/{repo}/hooks"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner.,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="webhooks", param_type=OutputParameterType.OBJECT, is_array=True
            ),  # List of webhooks.
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                List_repository_webhooks.method,
                List_repository_webhooks.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'List_repository_webhooks': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Get_a_repository_webhook(BaseFunction):
    """Get a specific repository webhook."""

    name = "Get a repository webhook"
    url = "https://api.github.com/repos/{owner}/{repo}/hooks/{hook_id}"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner.,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name.,
            Parameter(
                name="hook_id", param_type=ParameterType.INTEGER, required=True
            ),  # Webhook ID.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="webhook", param_type=OutputParameterType.OBJECT, is_array=False
            ),  # Webhook details.
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Get_a_repository_webhook.method,
                Get_a_repository_webhook.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_a_repository_webhook': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Update_a_repository_webhook(BaseFunction):
    """Update a repository webhook."""

    name = "Update a repository webhook"
    url = "https://api.github.com/repos/{owner}/{repo}/hooks/{hook_id}"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner.,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name.,
            Parameter(
                name="hook_id", param_type=ParameterType.INTEGER, required=True
            ),  # Webhook ID.,
            Parameter(
                name="webhook", param_type=OutputParameterType.OBJECT, required=True
            ),  # Webhook configuration details.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="webhook", param_type=OutputParameterType.OBJECT, is_array=False
            ),  # Updated webhook.
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Update_a_repository_webhook.method,
                Update_a_repository_webhook.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = (
                f"Error running function 'Update_a_repository_webhook': {str(e)}"
            )
            logging.error(error_msg)
            raise ValueError(error_msg)


class Delete_a_repository_webhook(BaseFunction):
    """Delete a repository webhook."""

    name = "Delete a repository webhook"
    url = "https://api.github.com/repos/{owner}/{repo}/hooks/{hook_id}"
    args_in_url = True
    method = DELETE

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner.,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name.,
            Parameter(
                name="hook_id", param_type=ParameterType.INTEGER, required=True
            ),  # Webhook ID.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="result", param_type=OutputParameterType.STRING, is_array=False
            ),  # Result of the operation.
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Delete_a_repository_webhook.method,
                Delete_a_repository_webhook.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = (
                f"Error running function 'Delete_a_repository_webhook': {str(e)}"
            )
            logging.error(error_msg)
            raise ValueError(error_msg)


class Ping_a_repository_webhook(BaseFunction):
    """Ping a webhook to test its connection."""

    name = "Ping a repository webhook"
    url = "https://api.github.com/repos/{owner}/{repo}/hooks/{hook_id}/pings"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner.,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name.,
            Parameter(
                name="hook_id", param_type=ParameterType.INTEGER, required=True
            ),  # Webhook ID.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="result", param_type=OutputParameterType.STRING, is_array=False
            ),  # Result of the ping operation.
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Ping_a_repository_webhook.method,
                Ping_a_repository_webhook.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Ping_a_repository_webhook': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class List_deliveries_for_a_repository_webhook(BaseFunction):
    """List deliveries for a webhook."""

    name = "List deliveries for a repository webhook"
    url = "https://api.github.com/repos/{owner}/{repo}/hooks/{hook_id}/deliveries"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner.,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name.,
            Parameter(
                name="hook_id", param_type=ParameterType.INTEGER, required=True
            ),  # Webhook ID.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="deliveries", param_type=OutputParameterType.OBJECT, is_array=True
            ),  # List of delivery events.
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                List_deliveries_for_a_repository_webhook.method,
                List_deliveries_for_a_repository_webhook.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'List_deliveries_for_a_repository_webhook': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Get_a_delivery_for_a_repository_webhook(BaseFunction):
    """Get details of a specific delivery for a webhook."""

    name = "Get a delivery for a repository webhook"
    url = "https://api.github.com/repos/{owner}/{repo}/hooks/{hook_id}/deliveries/{delivery_id}"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner.,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name.,
            Parameter(
                name="hook_id", param_type=ParameterType.INTEGER, required=True
            ),  # Webhook ID.,
            Parameter(
                name="delivery_id", param_type=ParameterType.INTEGER, required=True
            ),  # Delivery ID.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="delivery", param_type=OutputParameterType.OBJECT, is_array=False
            ),  # Details of the delivery.
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Get_a_delivery_for_a_repository_webhook.method,
                Get_a_delivery_for_a_repository_webhook.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_a_delivery_for_a_repository_webhook': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Ping_a_repository_webhook(BaseFunction):
    """Ping for a webhook to test connectivity."""

    name = "Ping a repository webhook"
    url = "https://api.github.com/repos/{owner}/{repo}/hooks/{hook_id}/pings"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner.,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name.,
            Parameter(
                name="hook_id", param_type=ParameterType.INTEGER, required=True
            ),  # Webhook ID.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="result", param_type=OutputParameterType.STRING, is_array=False
            ),  # Result of the ping operation.
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Ping_a_repository_webhook.method,
                Ping_a_repository_webhook.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Ping_a_repository_webhook': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Test_the_push_to_a_repository_webhook(BaseFunction):
    """Test the push to a repository webhook."""

    name = "Test the push to a repository webhook"
    url = "https://api.github.com/repos/{owner}/{repo}/hooks/{hook_id}/tests"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner.,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name.,
            Parameter(
                name="hook_id", param_type=ParameterType.INTEGER, required=True
            ),  # Webhook ID.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="result", param_type=OutputParameterType.STRING, is_array=False
            ),  # Result of the test.
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Test_the_push_to_a_repository_webhook.method,
                Test_the_push_to_a_repository_webhook.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Test_the_push_to_a_repository_webhook': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Create_or_update_a_file_in_a_repository(BaseFunction):
    """Create or update a file in a repository."""

    name = "Create or update a file in a repository"
    url = "https://api.github.com/repos/{owner}/{repo}/contents/{path}"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner.,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name.,
            Parameter(
                name="path", param_type=ParameterType.STRING, required=True
            ),  # File path.,
            Parameter(
                name="content", param_type=ParameterType.STRING, required=True
            ),  # File content, base64 encoded.,
            Parameter(
                name="message", param_type=ParameterType.STRING, required=True
            ),  # Commit message.,
            Parameter(
                name="branch", param_type=ParameterType.STRING, required=False
            ),  # Branch name.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="content", param_type=OutputParameterType.OBJECT, is_array=False
            ),  # File content after the operation.
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Create_or_update_a_file_in_a_repository.method,
                Create_or_update_a_file_in_a_repository.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Create_or_update_a_file_in_a_repository': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Delete_a_file_in_a_repository(BaseFunction):
    """Delete a file in a repository."""

    name = "Delete a file in a repository"
    url = "https://api.github.com/repos/{owner}/{repo}/contents/{path}"
    args_in_url = True
    method = DELETE

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner.,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name.,
            Parameter(
                name="path", param_type=ParameterType.STRING, required=True
            ),  # File path.,
            Parameter(
                name="message", param_type=ParameterType.STRING, required=True
            ),  # Commit message.,
            Parameter(
                name="branch", param_type=ParameterType.STRING, required=False
            ),  # Branch name.,
            Parameter(
                name="sha", param_type=ParameterType.STRING, required=True
            ),  # SHA of the file to delete.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="result", param_type=OutputParameterType.STRING, is_array=False
            ),  # Result of the deletion.
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Delete_a_file_in_a_repository.method,
                Delete_a_file_in_a_repository.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = (
                f"Error running function 'Delete_a_file_in_a_repository': {str(e)}"
            )
            logging.error(error_msg)
            raise ValueError(error_msg)


class List_organization_secrets_for_a_repository(BaseFunction):
    """List organization secrets for a repository."""

    name = "List organization secrets for a repository"
    url = "https://api.github.com/repos/{owner}/{repo}/actions/organization-secrets"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner.,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="organizationSecrets",
                param_type=OutputParameterType.OBJECT,
                is_array=True,
            ),  # List of organization secrets.
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                List_organization_secrets_for_a_repository.method,
                List_organization_secrets_for_a_repository.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'List_organization_secrets_for_a_repository': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class List_repository_secrets(BaseFunction):
    """List secrets for a repository."""

    name = "List repository secrets"
    url = "https://api.github.com/repos/{owner}/{repo}/actions/secrets"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner.,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="secrets", param_type=OutputParameterType.OBJECT, is_array=True
            ),  # List of secrets.
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                List_repository_secrets.method,
                List_repository_secrets.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'List_repository_secrets': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Get_a_repository_public_key_for_secrets_encryption(BaseFunction):
    """Get the public key for secrets encryption."""

    name = "Get a repository public key for secrets encryption"
    url = "https://api.github.com/repos/{owner}/{repo}/actions/secrets/public-key"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner.,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="publicKey", param_type=OutputParameterType.OBJECT, is_array=False
            ),  # Public key for encrypting secrets.
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Get_a_repository_public_key_for_secrets_encryption.method,
                Get_a_repository_public_key_for_secrets_encryption.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_a_repository_public_key_for_secrets_encryption': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Get_a_specific_repository_secret(BaseFunction):
    """Get details of a repository secret."""

    name = "Get a specific repository secret"
    url = "https://api.github.com/repos/{owner}/{repo}/actions/secrets/{secret_name}"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner.,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name.,
            Parameter(
                name="secret_name", param_type=ParameterType.STRING, required=True
            ),  # Secret name.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="secret", param_type=OutputParameterType.OBJECT, is_array=False
            ),  # The secret details.
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Get_a_specific_repository_secret.method,
                Get_a_specific_repository_secret.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = (
                f"Error running function 'Get_a_specific_repository_secret': {str(e)}"
            )
            logging.error(error_msg)
            raise ValueError(error_msg)


class Create_or_update_a_repository_variable(BaseFunction):
    """List repository variables."""

    name = "Create or update a repository variable"
    url = "https://api.github.com/repos/{owner}/{repo}/actions/variables"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner.,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="variables", param_type=OutputParameterType.OBJECT, is_array=True
            ),  # List of variables.
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Create_or_update_a_repository_variable.method,
                Create_or_update_a_repository_variable.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Create_or_update_a_repository_variable': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Create_update_or_delete_a_repository_variable(BaseFunction):
    """Create, update, or delete a repository variable."""

    name = "Create, update, or delete a repository variable"
    url = "https://api.github.com/repos/{owner}/{repo}/actions/variables/{name}"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner.,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name.,
            Parameter(
                name="name", param_type=ParameterType.STRING, required=True
            ),  # Variable name.,
            Parameter(
                name="action", param_type=ParameterType.STRING, required=False
            ),  # Action to perform: create, update, delete.,
            Parameter(
                name="variable", param_type=OutputParameterType.OBJECT, required=False
            ),  # Variable details for create or update.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="variable", param_type=OutputParameterType.OBJECT, is_array=False
            ),  # The variable details.
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Create_update_or_delete_a_repository_variable.method,
                Create_update_or_delete_a_repository_variable.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Create_update_or_delete_a_repository_variable': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Create_or_update_a_repository_webhook(BaseFunction):
    """Create or update a repository webhook."""

    name = "Create or update a repository webhook"
    url = "https://api.github.com/repos/{owner}/{repo}/hooks"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner.,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name.,
            Parameter(
                name="hook", param_type=OutputParameterType.OBJECT, required=True
            ),  # Webhook configuration details.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="hook", param_type=OutputParameterType.OBJECT, is_array=False
            ),  # Created or updated webhook.
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Create_or_update_a_repository_webhook.method,
                Create_or_update_a_repository_webhook.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Create_or_update_a_repository_webhook': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class List_repository_webhooks(BaseFunction):
    """List webhooks for a repository."""

    name = "List repository webhooks"
    url = "https://api.github.com/repos/{owner}/{repo}/hooks"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner.,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="webhooks", param_type=OutputParameterType.OBJECT, is_array=True
            ),  # List of webhooks.
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                List_repository_webhooks.method,
                List_repository_webhooks.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'List_repository_webhooks': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Get_a_repository_webhook(BaseFunction):
    """Get a specific repository webhook."""

    name = "Get a repository webhook"
    url = "https://api.github.com/repos/{owner}/{repo}/hooks/{hook_id}"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner.,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name.,
            Parameter(
                name="hook_id", param_type=ParameterType.INTEGER, required=True
            ),  # Webhook ID.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="webhook", param_type=OutputParameterType.OBJECT, is_array=False
            ),  # Webhook details.
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Get_a_repository_webhook.method,
                Get_a_repository_webhook.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_a_repository_webhook': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Update_a_repository_webhook(BaseFunction):
    """Update a repository webhook."""

    name = "Update a repository webhook"
    url = "https://api.github.com/repos/{owner}/{repo}/hooks/{hook_id}"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner.,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name.,
            Parameter(
                name="hook_id", param_type=ParameterType.INTEGER, required=True
            ),  # Webhook ID.,
            Parameter(
                name="webhook", param_type=OutputParameterType.OBJECT, required=True
            ),  # Webhook configuration details.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="webhook", param_type=OutputParameterType.OBJECT, is_array=False
            ),  # Updated webhook.
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Update_a_repository_webhook.method,
                Update_a_repository_webhook.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = (
                f"Error running function 'Update_a_repository_webhook': {str(e)}"
            )
            logging.error(error_msg)
            raise ValueError(error_msg)


class Delete_a_repository_webhook(BaseFunction):
    """Delete a repository webhook."""

    name = "Delete a repository webhook"
    url = "https://api.github.com/repos/{owner}/{repo}/hooks/{hook_id}"
    args_in_url = True
    method = DELETE

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner.,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name.,
            Parameter(
                name="hook_id", param_type=ParameterType.INTEGER, required=True
            ),  # Webhook ID.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="result", param_type=OutputParameterType.STRING, is_array=False
            ),  # Result of the operation.
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Delete_a_repository_webhook.method,
                Delete_a_repository_webhook.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = (
                f"Error running function 'Delete_a_repository_webhook': {str(e)}"
            )
            logging.error(error_msg)
            raise ValueError(error_msg)


class Ping_a_repository_webhook(BaseFunction):
    """Ping a webhook to test its connection."""

    name = "Ping a repository webhook"
    url = "https://api.github.com/repos/{owner}/{repo}/hooks/{hook_id}/pings"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner.,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name.,
            Parameter(
                name="hook_id", param_type=ParameterType.INTEGER, required=True
            ),  # Webhook ID.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="result", param_type=OutputParameterType.STRING, is_array=False
            ),  # Result of the ping operation.
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Ping_a_repository_webhook.method,
                Ping_a_repository_webhook.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Ping_a_repository_webhook': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class List_deliveries_for_a_repository_webhook(BaseFunction):
    """List deliveries for a webhook."""

    name = "List deliveries for a repository webhook"
    url = "https://api.github.com/repos/{owner}/{repo}/hooks/{hook_id}/deliveries"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner.,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name.,
            Parameter(
                name="hook_id", param_type=ParameterType.INTEGER, required=True
            ),  # Webhook ID.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="deliveries", param_type=OutputParameterType.OBJECT, is_array=True
            ),  # List of delivery events.
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                List_deliveries_for_a_repository_webhook.method,
                List_deliveries_for_a_repository_webhook.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'List_deliveries_for_a_repository_webhook': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Get_a_delivery_for_a_repository_webhook(BaseFunction):
    """Get details of a specific delivery for a webhook."""

    name = "Get a delivery for a repository webhook"
    url = "https://api.github.com/repos/{owner}/{repo}/hooks/{hook_id}/deliveries/{delivery_id}"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner.,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name.,
            Parameter(
                name="hook_id", param_type=ParameterType.INTEGER, required=True
            ),  # Webhook ID.,
            Parameter(
                name="delivery_id", param_type=ParameterType.INTEGER, required=True
            ),  # Delivery ID.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="delivery", param_type=OutputParameterType.OBJECT, is_array=False
            ),  # Details of the delivery.
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Get_a_delivery_for_a_repository_webhook.method,
                Get_a_delivery_for_a_repository_webhook.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_a_delivery_for_a_repository_webhook': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Ping_a_repository_webhook(BaseFunction):
    """Ping for a webhook to test connectivity."""

    name = "Ping a repository webhook"
    url = "https://api.github.com/repos/{owner}/{repo}/hooks/{hook_id}/pings"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner.,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name.,
            Parameter(
                name="hook_id", param_type=ParameterType.INTEGER, required=True
            ),  # Webhook ID.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="result", param_type=OutputParameterType.STRING, is_array=False
            ),  # Result of the ping operation.
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Ping_a_repository_webhook.method,
                Ping_a_repository_webhook.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Ping_a_repository_webhook': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Test_the_push_to_a_repository_webhook(BaseFunction):
    """Test the push to a repository webhook."""

    name = "Test the push to a repository webhook"
    url = "https://api.github.com/repos/{owner}/{repo}/hooks/{hook_id}/tests"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner.,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name.,
            Parameter(
                name="hook_id", param_type=ParameterType.INTEGER, required=True
            ),  # Webhook ID.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="result", param_type=OutputParameterType.STRING, is_array=False
            ),  # Result of the test.
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Test_the_push_to_a_repository_webhook.method,
                Test_the_push_to_a_repository_webhook.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Test_the_push_to_a_repository_webhook': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Create_or_update_a_file_in_a_repository(BaseFunction):
    """Create or update a file in a repository."""

    name = "Create or update a file in a repository"
    url = "https://api.github.com/repos/{owner}/{repo}/contents/{path}"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner.,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name.,
            Parameter(
                name="path", param_type=ParameterType.STRING, required=True
            ),  # File path.,
            Parameter(
                name="content", param_type=ParameterType.STRING, required=True
            ),  # File content, base64 encoded.,
            Parameter(
                name="message", param_type=ParameterType.STRING, required=True
            ),  # Commit message.,
            Parameter(
                name="branch", param_type=ParameterType.STRING, required=False
            ),  # Branch name.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="content", param_type=OutputParameterType.OBJECT, is_array=False
            ),  # File content after the operation.
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Create_or_update_a_file_in_a_repository.method,
                Create_or_update_a_file_in_a_repository.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Create_or_update_a_file_in_a_repository': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Delete_a_file_in_a_repository(BaseFunction):
    """Delete a file in a repository."""

    name = "Delete a file in a repository"
    url = "https://api.github.com/repos/{owner}/{repo}/contents/{path}"
    args_in_url = True
    method = DELETE

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner.,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name.,
            Parameter(
                name="path", param_type=ParameterType.STRING, required=True
            ),  # File path.,
            Parameter(
                name="message", param_type=ParameterType.STRING, required=True
            ),  # Commit message.,
            Parameter(
                name="branch", param_type=ParameterType.STRING, required=False
            ),  # Branch name.,
            Parameter(
                name="sha", param_type=ParameterType.STRING, required=True
            ),  # SHA of the file to delete.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="result", param_type=OutputParameterType.STRING, is_array=False
            ),  # Result of the deletion.
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Delete_a_file_in_a_repository.method,
                Delete_a_file_in_a_repository.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = (
                f"Error running function 'Delete_a_file_in_a_repository': {str(e)}"
            )
            logging.error(error_msg)
            raise ValueError(error_msg)


class List_organization_secrets_for_a_repository(BaseFunction):
    """List organization secrets for a repository."""

    name = "List organization secrets for a repository"
    url = "https://api.github.com/repos/{owner}/{repo}/actions/organization-secrets"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner.,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="organizationSecrets",
                param_type=OutputParameterType.OBJECT,
                is_array=True,
            ),  # List of organization secrets.
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                List_organization_secrets_for_a_repository.method,
                List_organization_secrets_for_a_repository.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'List_organization_secrets_for_a_repository': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class List_repository_secrets(BaseFunction):
    """List secrets for a repository."""

    name = "List repository secrets"
    url = "https://api.github.com/repos/{owner}/{repo}/actions/secrets"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner.,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="secrets", param_type=OutputParameterType.OBJECT, is_array=True
            ),  # List of secrets.
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                List_repository_secrets.method,
                List_repository_secrets.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'List_repository_secrets': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Get_a_repository_public_key_for_secrets_encryption(BaseFunction):
    """Get the public key for secrets encryption."""

    name = "Get a repository public key for secrets encryption"
    url = "https://api.github.com/repos/{owner}/{repo}/actions/secrets/public-key"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner.,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="publicKey", param_type=OutputParameterType.OBJECT, is_array=False
            ),  # Public key for encrypting secrets.
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Get_a_repository_public_key_for_secrets_encryption.method,
                Get_a_repository_public_key_for_secrets_encryption.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_a_repository_public_key_for_secrets_encryption': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Get_a_specific_repository_secret(BaseFunction):
    """Get details of a repository secret."""

    name = "Get a specific repository secret"
    url = "https://api.github.com/repos/{owner}/{repo}/actions/secrets/{secret_name}"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner.,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name.,
            Parameter(
                name="secret_name", param_type=ParameterType.STRING, required=True
            ),  # Secret name.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="secret", param_type=OutputParameterType.OBJECT, is_array=False
            ),  # The secret details.
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Get_a_specific_repository_secret.method,
                Get_a_specific_repository_secret.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = (
                f"Error running function 'Get_a_specific_repository_secret': {str(e)}"
            )
            logging.error(error_msg)
            raise ValueError(error_msg)


class Create_or_update_a_repository_variable(BaseFunction):
    """List repository variables."""

    name = "Create or update a repository variable"
    url = "https://api.github.com/repos/{owner}/{repo}/actions/variables"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner.,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="variables", param_type=OutputParameterType.OBJECT, is_array=True
            ),  # List of variables.
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Create_or_update_a_repository_variable.method,
                Create_or_update_a_repository_variable.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Create_or_update_a_repository_variable': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Create_update_or_delete_a_repository_variable(BaseFunction):
    """Create, update, or delete a repository variable."""

    name = "Create, update, or delete a repository variable"
    url = "https://api.github.com/repos/{owner}/{repo}/actions/variables/{name}"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner.,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name.,
            Parameter(
                name="name", param_type=ParameterType.STRING, required=True
            ),  # Variable name.,
            Parameter(
                name="action", param_type=ParameterType.STRING, required=False
            ),  # Action to perform: create, update, delete.,
            Parameter(
                name="variable", param_type=OutputParameterType.OBJECT, required=False
            ),  # Variable details for create or update.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="variable", param_type=OutputParameterType.OBJECT, is_array=False
            ),  # The variable details.
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Create_update_or_delete_a_repository_variable.method,
                Create_update_or_delete_a_repository_variable.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Create_update_or_delete_a_repository_variable': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Create_or_update_a_repository_webhook(BaseFunction):
    """Create or update a repository webhook."""

    name = "Create or update a repository webhook"
    url = "https://api.github.com/repos/{owner}/{repo}/hooks"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner.,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name.,
            Parameter(
                name="hook", param_type=OutputParameterType.OBJECT, required=True
            ),  # Webhook configuration details.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="hook", param_type=OutputParameterType.OBJECT, is_array=False
            ),  # Created or updated webhook.
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Create_or_update_a_repository_webhook.method,
                Create_or_update_a_repository_webhook.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Create_or_update_a_repository_webhook': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class List_repository_webhooks(BaseFunction):
    """List webhooks for a repository."""

    name = "List repository webhooks"
    url = "https://api.github.com/repos/{owner}/{repo}/hooks"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner.,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="webhooks", param_type=OutputParameterType.OBJECT, is_array=True
            ),  # List of webhooks.
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                List_repository_webhooks.method,
                List_repository_webhooks.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'List_repository_webhooks': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Get_a_repository_webhook(BaseFunction):
    """Get a specific repository webhook."""

    name = "Get a repository webhook"
    url = "https://api.github.com/repos/{owner}/{repo}/hooks/{hook_id}"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner.,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name.,
            Parameter(
                name="hook_id", param_type=ParameterType.INTEGER, required=True
            ),  # Webhook ID.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="webhook", param_type=OutputParameterType.OBJECT, is_array=False
            ),  # Webhook details.
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Get_a_repository_webhook.method,
                Get_a_repository_webhook.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_a_repository_webhook': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Update_a_repository_webhook(BaseFunction):
    """Update a repository webhook."""

    name = "Update a repository webhook"
    url = "https://api.github.com/repos/{owner}/{repo}/hooks/{hook_id}"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner.,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name.,
            Parameter(
                name="hook_id", param_type=ParameterType.INTEGER, required=True
            ),  # Webhook ID.,
            Parameter(
                name="webhook", param_type=OutputParameterType.OBJECT, required=True
            ),  # Webhook configuration details.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="webhook", param_type=OutputParameterType.OBJECT, is_array=False
            ),  # Updated webhook.
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Update_a_repository_webhook.method,
                Update_a_repository_webhook.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = (
                f"Error running function 'Update_a_repository_webhook': {str(e)}"
            )
            logging.error(error_msg)
            raise ValueError(error_msg)


class Delete_a_repository_webhook(BaseFunction):
    """Delete a repository webhook."""

    name = "Delete a repository webhook"
    url = "https://api.github.com/repos/{owner}/{repo}/hooks/{hook_id}"
    args_in_url = True
    method = DELETE

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner.,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name.,
            Parameter(
                name="hook_id", param_type=ParameterType.INTEGER, required=True
            ),  # Webhook ID.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="result", param_type=OutputParameterType.STRING, is_array=False
            ),  # Result of the operation.
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Delete_a_repository_webhook.method,
                Delete_a_repository_webhook.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = (
                f"Error running function 'Delete_a_repository_webhook': {str(e)}"
            )
            logging.error(error_msg)
            raise ValueError(error_msg)


class Ping_a_repository_webhook(BaseFunction):
    """Ping a webhook to test its connection."""

    name = "Ping a repository webhook"
    url = "https://api.github.com/repos/{owner}/{repo}/hooks/{hook_id}/pings"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner.,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name.,
            Parameter(
                name="hook_id", param_type=ParameterType.INTEGER, required=True
            ),  # Webhook ID.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="result", param_type=OutputParameterType.STRING, is_array=False
            ),  # Result of the ping operation.
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Ping_a_repository_webhook.method,
                Ping_a_repository_webhook.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Ping_a_repository_webhook': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class List_deliveries_for_a_repository_webhook(BaseFunction):
    """List deliveries for a webhook."""

    name = "List deliveries for a repository webhook"
    url = "https://api.github.com/repos/{owner}/{repo}/hooks/{hook_id}/deliveries"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner.,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name.,
            Parameter(
                name="hook_id", param_type=ParameterType.INTEGER, required=True
            ),  # Webhook ID.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="deliveries", param_type=OutputParameterType.OBJECT, is_array=True
            ),  # List of delivery events.
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                List_deliveries_for_a_repository_webhook.method,
                List_deliveries_for_a_repository_webhook.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'List_deliveries_for_a_repository_webhook': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Get_a_delivery_for_a_repository_webhook(BaseFunction):
    """Get details of a specific delivery for a webhook."""

    name = "Get a delivery for a repository webhook"
    url = "https://api.github.com/repos/{owner}/{repo}/hooks/{hook_id}/deliveries/{delivery_id}"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner.,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name.,
            Parameter(
                name="hook_id", param_type=ParameterType.INTEGER, required=True
            ),  # Webhook ID.,
            Parameter(
                name="delivery_id", param_type=ParameterType.INTEGER, required=True
            ),  # Delivery ID.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="delivery", param_type=OutputParameterType.OBJECT, is_array=False
            ),  # Details of the delivery.
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Get_a_delivery_for_a_repository_webhook.method,
                Get_a_delivery_for_a_repository_webhook.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_a_delivery_for_a_repository_webhook': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Ping_a_repository_webhook(BaseFunction):
    """Ping for a webhook to test connectivity."""

    name = "Ping a repository webhook"
    url = "https://api.github.com/repos/{owner}/{repo}/hooks/{hook_id}/pings"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner.,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name.,
            Parameter(
                name="hook_id", param_type=ParameterType.INTEGER, required=True
            ),  # Webhook ID.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="result", param_type=OutputParameterType.STRING, is_array=False
            ),  # Result of the ping operation.
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Ping_a_repository_webhook.method,
                Ping_a_repository_webhook.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Ping_a_repository_webhook': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Test_the_push_to_a_repository_webhook(BaseFunction):
    """Test the push to a repository webhook."""

    name = "Test the push to a repository webhook"
    url = "https://api.github.com/repos/{owner}/{repo}/hooks/{hook_id}/tests"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner.,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name.,
            Parameter(
                name="hook_id", param_type=ParameterType.INTEGER, required=True
            ),  # Webhook ID.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="result", param_type=OutputParameterType.STRING, is_array=False
            ),  # Result of the test.
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Test_the_push_to_a_repository_webhook.method,
                Test_the_push_to_a_repository_webhook.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Test_the_push_to_a_repository_webhook': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Create_or_update_a_file_in_a_repository(BaseFunction):
    """Create or update a file in a repository."""

    name = "Create or update a file in a repository"
    url = "https://api.github.com/repos/{owner}/{repo}/contents/{path}"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner.,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name.,
            Parameter(
                name="path", param_type=ParameterType.STRING, required=True
            ),  # File path.,
            Parameter(
                name="content", param_type=ParameterType.STRING, required=True
            ),  # File content, base64 encoded.,
            Parameter(
                name="message", param_type=ParameterType.STRING, required=True
            ),  # Commit message.,
            Parameter(
                name="branch", param_type=ParameterType.STRING, required=False
            ),  # Branch name.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="content", param_type=OutputParameterType.OBJECT, is_array=False
            ),  # File content after the operation.
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Create_or_update_a_file_in_a_repository.method,
                Create_or_update_a_file_in_a_repository.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Create_or_update_a_file_in_a_repository': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Delete_a_file_in_a_repository(BaseFunction):
    """Delete a file in a repository."""

    name = "Delete a file in a repository"
    url = "https://api.github.com/repos/{owner}/{repo}/contents/{path}"
    args_in_url = True
    method = DELETE

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner.,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name.,
            Parameter(
                name="path", param_type=ParameterType.STRING, required=True
            ),  # File path.,
            Parameter(
                name="message", param_type=ParameterType.STRING, required=True
            ),  # Commit message.,
            Parameter(
                name="branch", param_type=ParameterType.STRING, required=False
            ),  # Branch name.,
            Parameter(
                name="sha", param_type=ParameterType.STRING, required=True
            ),  # SHA of the file to delete.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="result", param_type=OutputParameterType.STRING, is_array=False
            ),  # Result of the deletion.
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Delete_a_file_in_a_repository.method,
                Delete_a_file_in_a_repository.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = (
                f"Error running function 'Delete_a_file_in_a_repository': {str(e)}"
            )
            logging.error(error_msg)
            raise ValueError(error_msg)


class List_organization_secrets_for_a_repository(BaseFunction):
    """List organization secrets for a repository."""

    name = "List organization secrets for a repository"
    url = "https://api.github.com/repos/{owner}/{repo}/actions/organization-secrets"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner.,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="organizationSecrets",
                param_type=OutputParameterType.OBJECT,
                is_array=True,
            ),  # List of organization secrets.
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                List_organization_secrets_for_a_repository.method,
                List_organization_secrets_for_a_repository.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'List_organization_secrets_for_a_repository': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class List_repository_secrets(BaseFunction):
    """List secrets for a repository."""

    name = "List repository secrets"
    url = "https://api.github.com/repos/{owner}/{repo}/actions/secrets"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner.,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="secrets", param_type=OutputParameterType.OBJECT, is_array=True
            ),  # List of secrets.
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                List_repository_secrets.method,
                List_repository_secrets.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'List_repository_secrets': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Get_a_repository_public_key_for_secrets_encryption(BaseFunction):
    """Get the public key for secrets encryption."""

    name = "Get a repository public key for secrets encryption"
    url = "https://api.github.com/repos/{owner}/{repo}/actions/secrets/public-key"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner.,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="publicKey", param_type=OutputParameterType.OBJECT, is_array=False
            ),  # Public key for encrypting secrets.
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Get_a_repository_public_key_for_secrets_encryption.method,
                Get_a_repository_public_key_for_secrets_encryption.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_a_repository_public_key_for_secrets_encryption': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Get_a_specific_repository_secret(BaseFunction):
    """Get details of a repository secret."""

    name = "Get a specific repository secret"
    url = "https://api.github.com/repos/{owner}/{repo}/actions/secrets/{secret_name}"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner.,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name.,
            Parameter(
                name="secret_name", param_type=ParameterType.STRING, required=True
            ),  # Secret name.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="secret", param_type=OutputParameterType.OBJECT, is_array=False
            ),  # The secret details.
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Get_a_specific_repository_secret.method,
                Get_a_specific_repository_secret.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = (
                f"Error running function 'Get_a_specific_repository_secret': {str(e)}"
            )
            logging.error(error_msg)
            raise ValueError(error_msg)


class Create_or_update_a_repository_variable(BaseFunction):
    """List repository variables."""

    name = "Create or update a repository variable"
    url = "https://api.github.com/repos/{owner}/{repo}/actions/variables"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner.,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="variables", param_type=OutputParameterType.OBJECT, is_array=True
            ),  # List of variables.
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Create_or_update_a_repository_variable.method,
                Create_or_update_a_repository_variable.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Create_or_update_a_repository_variable': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Create_update_or_delete_a_repository_variable(BaseFunction):
    """Create, update, or delete a repository variable."""

    name = "Create, update, or delete a repository variable"
    url = "https://api.github.com/repos/{owner}/{repo}/actions/variables/{name}"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner.,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name.,
            Parameter(
                name="name", param_type=ParameterType.STRING, required=True
            ),  # Variable name.,
            Parameter(
                name="action", param_type=ParameterType.STRING, required=False
            ),  # Action to perform: create, update, delete.,
            Parameter(
                name="variable", param_type=OutputParameterType.OBJECT, required=False
            ),  # Variable details for create or update.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="variable", param_type=OutputParameterType.OBJECT, is_array=False
            ),  # The variable details.
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Create_update_or_delete_a_repository_variable.method,
                Create_update_or_delete_a_repository_variable.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Create_update_or_delete_a_repository_variable': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Create_or_update_a_repository_webhook(BaseFunction):
    """Create or update a repository webhook."""

    name = "Create or update a repository webhook"
    url = "https://api.github.com/repos/{owner}/{repo}/hooks"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner.,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name.,
            Parameter(
                name="hook", param_type=OutputParameterType.OBJECT, required=True
            ),  # Webhook configuration details.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="hook", param_type=OutputParameterType.OBJECT, is_array=False
            ),  # Created or updated webhook.
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Create_or_update_a_repository_webhook.method,
                Create_or_update_a_repository_webhook.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Create_or_update_a_repository_webhook': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class List_repository_webhooks(BaseFunction):
    """List webhooks for a repository."""

    name = "List repository webhooks"
    url = "https://api.github.com/repos/{owner}/{repo}/hooks"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner.,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="webhooks", param_type=OutputParameterType.OBJECT, is_array=True
            ),  # List of webhooks.
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                List_repository_webhooks.method,
                List_repository_webhooks.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'List_repository_webhooks': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Get_a_repository_webhook(BaseFunction):
    """Get a specific repository webhook."""

    name = "Get a repository webhook"
    url = "https://api.github.com/repos/{owner}/{repo}/hooks/{hook_id}"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner.,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name.,
            Parameter(
                name="hook_id", param_type=ParameterType.INTEGER, required=True
            ),  # Webhook ID.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="webhook", param_type=OutputParameterType.OBJECT, is_array=False
            ),  # Webhook details.
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Get_a_repository_webhook.method,
                Get_a_repository_webhook.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_a_repository_webhook': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Update_a_repository_webhook(BaseFunction):
    """Update a repository webhook."""

    name = "Update a repository webhook"
    url = "https://api.github.com/repos/{owner}/{repo}/hooks/{hook_id}"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner.,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name.,
            Parameter(
                name="hook_id", param_type=ParameterType.INTEGER, required=True
            ),  # Webhook ID.,
            Parameter(
                name="webhook", param_type=OutputParameterType.OBJECT, required=True
            ),  # Webhook configuration details.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="webhook", param_type=OutputParameterType.OBJECT, is_array=False
            ),  # Updated webhook.
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Update_a_repository_webhook.method,
                Update_a_repository_webhook.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = (
                f"Error running function 'Update_a_repository_webhook': {str(e)}"
            )
            logging.error(error_msg)
            raise ValueError(error_msg)


class Delete_a_repository_webhook(BaseFunction):
    """Delete a repository webhook."""

    name = "Delete a repository webhook"
    url = "https://api.github.com/repos/{owner}/{repo}/hooks/{hook_id}"
    args_in_url = True
    method = DELETE

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner.,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name.,
            Parameter(
                name="hook_id", param_type=ParameterType.INTEGER, required=True
            ),  # Webhook ID.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="result", param_type=OutputParameterType.STRING, is_array=False
            ),  # Result of the operation.
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Delete_a_repository_webhook.method,
                Delete_a_repository_webhook.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = (
                f"Error running function 'Delete_a_repository_webhook': {str(e)}"
            )
            logging.error(error_msg)
            raise ValueError(error_msg)


class Ping_a_repository_webhook(BaseFunction):
    """Ping a webhook to test its connection."""

    name = "Ping a repository webhook"
    url = "https://api.github.com/repos/{owner}/{repo}/hooks/{hook_id}/pings"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner.,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name.,
            Parameter(
                name="hook_id", param_type=ParameterType.INTEGER, required=True
            ),  # Webhook ID.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="result", param_type=OutputParameterType.STRING, is_array=False
            ),  # Result of the ping operation.
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Ping_a_repository_webhook.method,
                Ping_a_repository_webhook.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Ping_a_repository_webhook': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class List_deliveries_for_a_repository_webhook(BaseFunction):
    """List deliveries for a webhook."""

    name = "List deliveries for a repository webhook"
    url = "https://api.github.com/repos/{owner}/{repo}/hooks/{hook_id}/deliveries"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner.,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name.,
            Parameter(
                name="hook_id", param_type=ParameterType.INTEGER, required=True
            ),  # Webhook ID.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="deliveries", param_type=OutputParameterType.OBJECT, is_array=True
            ),  # List of delivery events.
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                List_deliveries_for_a_repository_webhook.method,
                List_deliveries_for_a_repository_webhook.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'List_deliveries_for_a_repository_webhook': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Get_a_delivery_for_a_repository_webhook(BaseFunction):
    """Get details of a specific delivery for a webhook."""

    name = "Get a delivery for a repository webhook"
    url = "https://api.github.com/repos/{owner}/{repo}/hooks/{hook_id}/deliveries/{delivery_id}"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner.,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name.,
            Parameter(
                name="hook_id", param_type=ParameterType.INTEGER, required=True
            ),  # Webhook ID.,
            Parameter(
                name="delivery_id", param_type=ParameterType.INTEGER, required=True
            ),  # Delivery ID.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="delivery", param_type=OutputParameterType.OBJECT, is_array=False
            ),  # Details of the delivery.
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Get_a_delivery_for_a_repository_webhook.method,
                Get_a_delivery_for_a_repository_webhook.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_a_delivery_for_a_repository_webhook': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Ping_a_repository_webhook(BaseFunction):
    """Ping for a webhook to test connectivity."""

    name = "Ping a repository webhook"
    url = "https://api.github.com/repos/{owner}/{repo}/hooks/{hook_id}/pings"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner.,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name.,
            Parameter(
                name="hook_id", param_type=ParameterType.INTEGER, required=True
            ),  # Webhook ID.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="result", param_type=OutputParameterType.STRING, is_array=False
            ),  # Result of the ping operation.
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Ping_a_repository_webhook.method,
                Ping_a_repository_webhook.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Ping_a_repository_webhook': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Test_the_push_to_a_repository_webhook(BaseFunction):
    """Test the push to a repository webhook."""

    name = "Test the push to a repository webhook"
    url = "https://api.github.com/repos/{owner}/{repo}/hooks/{hook_id}/tests"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner.,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name.,
            Parameter(
                name="hook_id", param_type=ParameterType.INTEGER, required=True
            ),  # Webhook ID.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="result", param_type=OutputParameterType.STRING, is_array=False
            ),  # Result of the test.
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Test_the_push_to_a_repository_webhook.method,
                Test_the_push_to_a_repository_webhook.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Test_the_push_to_a_repository_webhook': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Create_or_update_a_file_in_a_repository(BaseFunction):
    """Create or update a file in a repository."""

    name = "Create or update a file in a repository"
    url = "https://api.github.com/repos/{owner}/{repo}/contents/{path}"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner.,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name.,
            Parameter(
                name="path", param_type=ParameterType.STRING, required=True
            ),  # File path.,
            Parameter(
                name="content", param_type=ParameterType.STRING, required=True
            ),  # File content, base64 encoded.,
            Parameter(
                name="message", param_type=ParameterType.STRING, required=True
            ),  # Commit message.,
            Parameter(
                name="branch", param_type=ParameterType.STRING, required=False
            ),  # Branch name.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="content", param_type=OutputParameterType.OBJECT, is_array=False
            ),  # File content after the operation.
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Create_or_update_a_file_in_a_repository.method,
                Create_or_update_a_file_in_a_repository.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Create_or_update_a_file_in_a_repository': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Delete_a_file_in_a_repository(BaseFunction):
    """Delete a file in a repository."""

    name = "Delete a file in a repository"
    url = "https://api.github.com/repos/{owner}/{repo}/contents/{path}"
    args_in_url = True
    method = DELETE

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner.,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name.,
            Parameter(
                name="path", param_type=ParameterType.STRING, required=True
            ),  # File path.,
            Parameter(
                name="message", param_type=ParameterType.STRING, required=True
            ),  # Commit message.,
            Parameter(
                name="branch", param_type=ParameterType.STRING, required=False
            ),  # Branch name.,
            Parameter(
                name="sha", param_type=ParameterType.STRING, required=True
            ),  # SHA of the file to delete.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="result", param_type=OutputParameterType.STRING, is_array=False
            ),  # Result of the deletion.
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Delete_a_file_in_a_repository.method,
                Delete_a_file_in_a_repository.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = (
                f"Error running function 'Delete_a_file_in_a_repository': {str(e)}"
            )
            logging.error(error_msg)
            raise ValueError(error_msg)


class List_organization_secrets_for_a_repository(BaseFunction):
    """List organization secrets for a repository."""

    name = "List organization secrets for a repository"
    url = "https://api.github.com/repos/{owner}/{repo}/actions/organization-secrets"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner.,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="organizationSecrets",
                param_type=OutputParameterType.OBJECT,
                is_array=True,
            ),  # List of organization secrets.
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                List_organization_secrets_for_a_repository.method,
                List_organization_secrets_for_a_repository.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'List_organization_secrets_for_a_repository': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class List_repository_secrets(BaseFunction):
    """List secrets for a repository."""

    name = "List repository secrets"
    url = "https://api.github.com/repos/{owner}/{repo}/actions/secrets"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner.,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="secrets", param_type=OutputParameterType.OBJECT, is_array=True
            ),  # List of secrets.
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                List_repository_secrets.method,
                List_repository_secrets.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'List_repository_secrets': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Get_a_repository_public_key_for_secrets_encryption(BaseFunction):
    """Get the public key for secrets encryption."""

    name = "Get a repository public key for secrets encryption"
    url = "https://api.github.com/repos/{owner}/{repo}/actions/secrets/public-key"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner.,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="publicKey", param_type=OutputParameterType.OBJECT, is_array=False
            ),  # Public key for encrypting secrets.
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Get_a_repository_public_key_for_secrets_encryption.method,
                Get_a_repository_public_key_for_secrets_encryption.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_a_repository_public_key_for_secrets_encryption': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Get_a_specific_repository_secret(BaseFunction):
    """Get details of a repository secret."""

    name = "Get a specific repository secret"
    url = "https://api.github.com/repos/{owner}/{repo}/actions/secrets/{secret_name}"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner.,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name.,
            Parameter(
                name="secret_name", param_type=ParameterType.STRING, required=True
            ),  # Secret name.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="secret", param_type=OutputParameterType.OBJECT, is_array=False
            ),  # The secret details.
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Get_a_specific_repository_secret.method,
                Get_a_specific_repository_secret.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = (
                f"Error running function 'Get_a_specific_repository_secret': {str(e)}"
            )
            logging.error(error_msg)
            raise ValueError(error_msg)


class Create_or_update_a_repository_variable(BaseFunction):
    """List repository variables."""

    name = "Create or update a repository variable"
    url = "https://api.github.com/repos/{owner}/{repo}/actions/variables"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner.,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="variables", param_type=OutputParameterType.OBJECT, is_array=True
            ),  # List of variables.
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Create_or_update_a_repository_variable.method,
                Create_or_update_a_repository_variable.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Create_or_update_a_repository_variable': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Create_update_or_delete_a_repository_variable(BaseFunction):
    """Create, update, or delete a repository variable."""

    name = "Create, update, or delete a repository variable"
    url = "https://api.github.com/repos/{owner}/{repo}/actions/variables/{name}"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner.,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name.,
            Parameter(
                name="name", param_type=ParameterType.STRING, required=True
            ),  # Variable name.,
            Parameter(
                name="action", param_type=ParameterType.STRING, required=False
            ),  # Action to perform: create, update, delete.,
            Parameter(
                name="variable", param_type=OutputParameterType.OBJECT, required=False
            ),  # Variable details for create or update.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="variable", param_type=OutputParameterType.OBJECT, is_array=False
            ),  # The variable details.
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Create_update_or_delete_a_repository_variable.method,
                Create_update_or_delete_a_repository_variable.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Create_update_or_delete_a_repository_variable': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Create_or_update_a_repository_webhook(BaseFunction):
    """Create or update a repository webhook."""

    name = "Create or update a repository webhook"
    url = "https://api.github.com/repos/{owner}/{repo}/hooks"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner.,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name.,
            Parameter(
                name="hook", param_type=OutputParameterType.OBJECT, required=True
            ),  # Webhook configuration details.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="hook", param_type=OutputParameterType.OBJECT, is_array=False
            ),  # Created or updated webhook.
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Create_or_update_a_repository_webhook.method,
                Create_or_update_a_repository_webhook.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Create_or_update_a_repository_webhook': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class List_repository_webhooks(BaseFunction):
    """List webhooks for a repository."""

    name = "List repository webhooks"
    url = "https://api.github.com/repos/{owner}/{repo}/hooks"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner.,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="webhooks", param_type=OutputParameterType.OBJECT, is_array=True
            ),  # List of webhooks.
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                List_repository_webhooks.method,
                List_repository_webhooks.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'List_repository_webhooks': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Get_a_repository_webhook(BaseFunction):
    """Get a specific repository webhook."""

    name = "Get a repository webhook"
    url = "https://api.github.com/repos/{owner}/{repo}/hooks/{hook_id}"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner.,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name.,
            Parameter(
                name="hook_id", param_type=ParameterType.INTEGER, required=True
            ),  # Webhook ID.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="webhook", param_type=OutputParameterType.OBJECT, is_array=False
            ),  # Webhook details.
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Get_a_repository_webhook.method,
                Get_a_repository_webhook.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_a_repository_webhook': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Update_a_repository_webhook(BaseFunction):
    """Update a repository webhook."""

    name = "Update a repository webhook"
    url = "https://api.github.com/repos/{owner}/{repo}/hooks/{hook_id}"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner.,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name.,
            Parameter(
                name="hook_id", param_type=ParameterType.INTEGER, required=True
            ),  # Webhook ID.,
            Parameter(
                name="webhook", param_type=OutputParameterType.OBJECT, required=True
            ),  # Webhook configuration details.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="webhook", param_type=OutputParameterType.OBJECT, is_array=False
            ),  # Updated webhook.
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Update_a_repository_webhook.method,
                Update_a_repository_webhook.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = (
                f"Error running function 'Update_a_repository_webhook': {str(e)}"
            )
            logging.error(error_msg)
            raise ValueError(error_msg)


class Delete_a_repository_webhook(BaseFunction):
    """Delete a repository webhook."""

    name = "Delete a repository webhook"
    url = "https://api.github.com/repos/{owner}/{repo}/hooks/{hook_id}"
    args_in_url = True
    method = DELETE

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner.,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name.,
            Parameter(
                name="hook_id", param_type=ParameterType.INTEGER, required=True
            ),  # Webhook ID.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="result", param_type=OutputParameterType.STRING, is_array=False
            ),  # Result of the operation.
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Delete_a_repository_webhook.method,
                Delete_a_repository_webhook.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = (
                f"Error running function 'Delete_a_repository_webhook': {str(e)}"
            )
            logging.error(error_msg)
            raise ValueError(error_msg)


class Ping_a_repository_webhook(BaseFunction):
    """Ping a webhook to test its connection."""

    name = "Ping a repository webhook"
    url = "https://api.github.com/repos/{owner}/{repo}/hooks/{hook_id}/pings"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner.,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name.,
            Parameter(
                name="hook_id", param_type=ParameterType.INTEGER, required=True
            ),  # Webhook ID.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="result", param_type=OutputParameterType.STRING, is_array=False
            ),  # Result of the ping operation.
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Ping_a_repository_webhook.method,
                Ping_a_repository_webhook.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Ping_a_repository_webhook': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class List_deliveries_for_a_repository_webhook(BaseFunction):
    """List deliveries for a webhook."""

    name = "List deliveries for a repository webhook"
    url = "https://api.github.com/repos/{owner}/{repo}/hooks/{hook_id}/deliveries"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner.,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name.,
            Parameter(
                name="hook_id", param_type=ParameterType.INTEGER, required=True
            ),  # Webhook ID.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="deliveries", param_type=OutputParameterType.OBJECT, is_array=True
            ),  # List of delivery events.
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                List_deliveries_for_a_repository_webhook.method,
                List_deliveries_for_a_repository_webhook.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'List_deliveries_for_a_repository_webhook': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Get_a_delivery_for_a_repository_webhook(BaseFunction):
    """Get details of a specific delivery for a webhook."""

    name = "Get a delivery for a repository webhook"
    url = "https://api.github.com/repos/{owner}/{repo}/hooks/{hook_id}/deliveries/{delivery_id}"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner.,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name.,
            Parameter(
                name="hook_id", param_type=ParameterType.INTEGER, required=True
            ),  # Webhook ID.,
            Parameter(
                name="delivery_id", param_type=ParameterType.INTEGER, required=True
            ),  # Delivery ID.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="delivery", param_type=OutputParameterType.OBJECT, is_array=False
            ),  # Details of the delivery.
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Get_a_delivery_for_a_repository_webhook.method,
                Get_a_delivery_for_a_repository_webhook.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_a_delivery_for_a_repository_webhook': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Ping_a_repository_webhook(BaseFunction):
    """Ping for a webhook to test connectivity."""

    name = "Ping a repository webhook"
    url = "https://api.github.com/repos/{owner}/{repo}/hooks/{hook_id}/pings"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner.,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name.,
            Parameter(
                name="hook_id", param_type=ParameterType.INTEGER, required=True
            ),  # Webhook ID.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="result", param_type=OutputParameterType.STRING, is_array=False
            ),  # Result of the ping operation.
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Ping_a_repository_webhook.method,
                Ping_a_repository_webhook.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Ping_a_repository_webhook': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Test_the_push_to_a_repository_webhook(BaseFunction):
    """Test the push to a repository webhook."""

    name = "Test the push to a repository webhook"
    url = "https://api.github.com/repos/{owner}/{repo}/hooks/{hook_id}/tests"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner.,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name.,
            Parameter(
                name="hook_id", param_type=ParameterType.INTEGER, required=True
            ),  # Webhook ID.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="result", param_type=OutputParameterType.STRING, is_array=False
            ),  # Result of the test.
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Test_the_push_to_a_repository_webhook.method,
                Test_the_push_to_a_repository_webhook.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Test_the_push_to_a_repository_webhook': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Create_or_update_a_file_in_a_repository(BaseFunction):
    """Create or update a file in a repository."""

    name = "Create or update a file in a repository"
    url = "https://api.github.com/repos/{owner}/{repo}/contents/{path}"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner.,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name.,
            Parameter(
                name="path", param_type=ParameterType.STRING, required=True
            ),  # File path.,
            Parameter(
                name="content", param_type=ParameterType.STRING, required=True
            ),  # File content, base64 encoded.,
            Parameter(
                name="message", param_type=ParameterType.STRING, required=True
            ),  # Commit message.,
            Parameter(
                name="branch", param_type=ParameterType.STRING, required=False
            ),  # Branch name.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="content", param_type=OutputParameterType.OBJECT, is_array=False
            ),  # File content after the operation.
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Create_or_update_a_file_in_a_repository.method,
                Create_or_update_a_file_in_a_repository.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Create_or_update_a_file_in_a_repository': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class Delete_a_file_in_a_repository(BaseFunction):
    """Delete a file in a repository."""

    name = "Delete a file in a repository"
    url = "https://api.github.com/repos/{owner}/{repo}/contents/{path}"
    args_in_url = True
    method = DELETE

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner.,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name.,
            Parameter(
                name="path", param_type=ParameterType.STRING, required=True
            ),  # File path.,
            Parameter(
                name="message", param_type=ParameterType.STRING, required=True
            ),  # Commit message.,
            Parameter(
                name="branch", param_type=ParameterType.STRING, required=False
            ),  # Branch name.,
            Parameter(
                name="sha", param_type=ParameterType.STRING, required=True
            ),  # SHA of the file to delete.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="result", param_type=OutputParameterType.STRING, is_array=False
            ),  # Result of the deletion.
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                Delete_a_file_in_a_repository.method,
                Delete_a_file_in_a_repository.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = (
                f"Error running function 'Delete_a_file_in_a_repository': {str(e)}"
            )
            logging.error(error_msg)
            raise ValueError(error_msg)


class listcodespacesinarepositoryfortheauthenticateduser(BaseFunction):
    """List codespaces in a repository for the authenticated user."""

    name = "list-codespaces-in-a-repository-for-the-authenticated-user"
    url = "/repos/{owner}/{repo}/codespaces"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner username or organization name,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="codespaces", param_type=OutputParameterType.OBJECT, is_array=True
            ),  # List of codespaces in the repository
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                listcodespacesinarepositoryfortheauthenticateduser.method,
                listcodespacesinarepositoryfortheauthenticateduser.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'listcodespacesinarepositoryfortheauthenticateduser': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class createacodespaceinarepository(BaseFunction):
    """Create a new codespace in a repository."""

    name = "create-a-codespace-in-a-repository"
    url = "/repos/{owner}/{repo}/codespaces"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="owner", param_type=ParameterType.STRING, required=True
            ),  # Repository owner username or organization name,
            Parameter(
                name="repo", param_type=ParameterType.STRING, required=True
            ),  # Repository name,
            Parameter(
                name="name", param_type=ParameterType.STRING, required=True
            ),  # Name of the new codespace,
            Parameter(
                name="machine", param_type=ParameterType.STRING, required=False
            ),  # Machine type for the codespace,
            Parameter(
                name="location", param_type=ParameterType.STRING, required=False
            ),  # Location where the codespace will be created
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="codespace", param_type=OutputParameterType.OBJECT, is_array=False
            ),  # Details of the created codespace
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                createacodespaceinarepository.method,
                createacodespaceinarepository.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = (
                f"Error running function 'createacodespaceinarepository': {str(e)}"
            )
            logging.error(error_msg)
            raise ValueError(error_msg)


class getcodespacefortheauthenticateduser(BaseFunction):
    """Get details about a specific codespace for the authenticated user."""

    name = "get-codespace-for-the-authenticated-user"
    url = "/user/codespaces/{codespace_name}"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="codespace_name", param_type=ParameterType.STRING, required=True
            ),  # Name of the codespace
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="codespace", param_type=OutputParameterType.OBJECT, is_array=False
            ),  # Details of the specified codespace
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                getcodespacefortheauthenticateduser.method,
                getcodespacefortheauthenticateduser.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'getcodespacefortheauthenticateduser': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class updateacodespacefortheauthenticateduser(BaseFunction):
    """Update an existing codespace for the authenticated user."""

    name = "update-a-codespace-for-the-authenticated-user"
    url = "/user/codespaces/{codespace_name}"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="codespace_name", param_type=ParameterType.STRING, required=True
            ),  # Name of the codespace to update,
            Parameter(
                name="attributes", param_type=OutputParameterType.OBJECT, required=True
            ),  # Attributes to update, such as name, machine type, location, etc.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="codespace", param_type=OutputParameterType.OBJECT, is_array=False
            ),  # Updated codespace details
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                updateacodespacefortheauthenticateduser.method,
                updateacodespacefortheauthenticateduser.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'updateacodespacefortheauthenticateduser': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class deleteacodespacefortheauthenticateduser(BaseFunction):
    """Delete a specific codespace for the authenticated user."""

    name = "delete-a-codespace-for-the-authenticated-user"
    url = "/user/codespaces/{codespace_name}"
    args_in_url = True
    method = DELETE

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="codespace_name", param_type=ParameterType.STRING, required=True
            ),  # Name of the codespace to delete
        ]

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                deleteacodespacefortheauthenticateduser.method,
                deleteacodespacefortheauthenticateduser.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'deleteacodespacefortheauthenticateduser': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class listcodespacesinaorganizationforauser(BaseFunction):
    """List codespaces in an organization for the user."""

    name = "list-codespaces-in-a-organization-for-a-user"
    url = "/orgs/{org}/codespaces"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="org", param_type=ParameterType.STRING, required=True
            ),  # Organization name
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="codespaces", param_type=OutputParameterType.OBJECT, is_array=True
            ),  # List of codespaces in the organization
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                listcodespacesinaorganizationforauser.method,
                listcodespacesinaorganizationforauser.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'listcodespacesinaorganizationforauser': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class adduserstocodespacesaccessforanorganization(BaseFunction):
    """Add users to codespaces access for an organization."""

    name = "add-users-to-codespaces-access-for-an-organization"
    url = "/orgs/{org}/codespaces/access/selected_users"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="org", param_type=ParameterType.STRING, required=True
            ),  # Organization name,
            Parameter(
                name="users", param_type=OutputParameterType.OBJECT, required=True
            ),  # List of users to add to codespaces access
        ]

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                adduserstocodespacesaccessforanorganization.method,
                adduserstocodespacesaccessforanorganization.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'adduserstocodespacesaccessforanorganization': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class removeusersfromcodespacesaccessforanorganization(BaseFunction):
    """Remove users from codespaces access for an organization."""

    name = "remove-users-from-codespaces-access-for-an-organization"
    url = "/orgs/{org}/codespaces/access/selected_users"
    args_in_url = True
    method = DELETE

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="org", param_type=ParameterType.STRING, required=True
            ),  # Organization name,
            Parameter(
                name="users", param_type=OutputParameterType.OBJECT, required=True
            ),  # List of users to remove from codespaces access
        ]

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                removeusersfromcodespacesaccessforanorganization.method,
                removeusersfromcodespacesaccessforanorganization.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'removeusersfromcodespacesaccessforanorganization': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class listorganizationsecrets(BaseFunction):
    """List organization secrets for codespaces."""

    name = "list-organization-secrets"
    url = "/orgs/{org}/codespaces/secrets"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="org", param_type=ParameterType.STRING, required=True
            ),  # Organization name
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="secrets", param_type=OutputParameterType.OBJECT, is_array=True
            ),  # List of secrets for the organization
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                listorganizationsecrets.method,
                listorganizationsecrets.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'listorganizationsecrets': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class getorganizationpublickey(BaseFunction):
    """Get the public key for encrypting secrets for the organization."""

    name = "get-organization-public-key"
    url = "/orgs/{org}/codespaces/secrets/public-key"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="org", param_type=ParameterType.STRING, required=True
            ),  # Organization name
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="public_key", param_type=OutputParameterType.OBJECT, is_array=False
            ),  # Public key used for encrypting secrets
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                getorganizationpublickey.method,
                getorganizationpublickey.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'getorganizationpublickey': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class getorganizationsecret(BaseFunction):
    """Get details of a specific organization secret."""

    name = "get-organization-secret"
    url = "/orgs/{org}/codespaces/secrets/{secret_name}"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="org", param_type=ParameterType.STRING, required=True
            ),  # Organization name,
            Parameter(
                name="secret_name", param_type=ParameterType.STRING, required=True
            ),  # Secret name
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="secret", param_type=OutputParameterType.OBJECT, is_array=False
            ),  # Details of the specified secret
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                getorganizationsecret.method,
                getorganizationsecret.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'getorganizationsecret': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)


class createorupdateanorganizationsecret(BaseFunction):
    """Create or update an organization secret."""

    name = "create-or-update-an-organization-secret"
    url = "/orgs/{org}/codespaces/secrets/{secret_name}"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="org", param_type=ParameterType.STRING, required=True
            ),  # Organization name,
            Parameter(
                name="secret_name", param_type=ParameterType.STRING, required=True
            ),  # Secret name,
            Parameter(
                name="encrypted_value", param_type=ParameterType.STRING, required=True
            ),  # Encrypted secret value,
            Parameter(
                name="key_id", param_type=ParameterType.STRING, required=True
            ),  # ID of the public key used to encrypt the secret
        ]

    def get_output_schema(self):
        return [
            OutputParameter(
                name="secret", param_type=OutputParameterType.OBJECT, is_array=False
            ),  # Details of the created or updated secret
        ]

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                createorupdateanorganizationsecret.method,
                createorupdateanorganizationsecret.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = (
                f"Error running function 'createorupdateanorganizationsecret': {str(e)}"
            )
            logging.error(error_msg)
            raise ValueError(error_msg)


class deleteanorganizationsecret(BaseFunction):
    """Delete an organization secret."""

    name = "delete-an-organization-secret"
    url = "/orgs/{org}/codespaces/secrets/{secret_name}"
    args_in_url = True
    method = DELETE

    def __init__(self):
        self.api_wrapper = api_wrapper

    def get_parameter_schema(self):
        return [
            Parameter(
                name="org", param_type=ParameterType.STRING, required=True
            ),  # Organization name,
            Parameter(
                name="secret_name", param_type=ParameterType.STRING, required=True
            ),  # Secret name
        ]

    def get_output_schema(self):
        return []

    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(
                deleteanorganizationsecret.method,
                deleteanorganizationsecret.url,
                input_data.validated_data,
            )
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'deleteanorganizationsecret': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)
