
from shared.FunctionClass import BaseFunction
from shared.ParameterClass import Parameter, ParameterType
from shared.OutputParameterClass import OutputParameter, OutputParameterType
from shared.InputClass import StandardInput
from shared.OutputClass import StandardOutput
from shared.BaseClass import APIWrapper, AuthType
from dataclasses import dataclass
        

@dataclass
class APIClientConfig:
    """Configuration class for API settings"""
    owner: str = None,  # Repository owner, used in API path or API requests, sometimes referring to an organization or user.
    repo: str = None,  # Repository name, used in API path or requests.
    artifact_id: int = None,  # Identifier for a specific artifact.
    run_id: int = None,  # Workflow run ID for listing artifacts, or workflow run identifier in API calls.
    archive_format: str = None,  # Format of archive to download, e.g., 'zip'.
    accept: str = "application/vnd.github+json",  # HTTP header to specify media type or content negotiation, often defaulting to 'application/vnd.github+json'.
    org: str = None,  # Organization name associated with the repository or API request, sometimes optional or used for specific endpoints.
    name: str = None,  # Variable or resource name, context-dependent, such as environment variable name or resource name.
    value: str = None,  # Variable value, used in configurations or requests.
    visibility: str = None,  # Visibility setting: all, private, or selected, for repositories or resources.
    selected_repository_ids: int = None,  # Repository IDs for 'selected' visibility or filtering.
    environment_name: str = None,  # Name of the environment, such as a deployment environment.
    secret_name: str = None,  # Name of a secret stored or managed.
    repository_id: int = None,  # Repository ID used in API calls for identification.
    secret: str = None,  # Secret value, sensitive data.
    key_id: str = None,  # Key ID used for encryption or identification of keys.
    default_workflow_permissions: str = None,  # Permission level for default workflows: 'read' or 'write'.
    can_approve_pull_request_reviews: str = None,  # Boolean string indicating if pull request reviews can be approved.
    ref: str = None,  # Git reference, such as a branch or tag.
    sort: str = None,  # Property to sort results by.
    direction: str = None,  # Sort direction, either 'asc' or 'desc'.
    access_level: str = None,  # Access level: 'none', 'user', or 'organization'.
    include_claim_keys: str = "[]",  # Array of claim keys for template or set operations.
    use_default: str = "false",  # Boolean indicator (as string) if default template or configuration should be used.
    job_id: int = None,  # Unique identifier of a job in workflows.
    workflow_id: str = None,  # ID or filename of a workflow.
    actor: str = None,  # Username who initiated or created the workflow run.
    branch: str = None,  # Branch name associated with the workflow run.
    event: str = None,  # Event that triggered the workflow, e.g., push, pull_request.
    status: str = None,  # Status of the workflow run, e.g., in_progress, completed.
    created: str = None,  # Creation date filter for listing resources.
    exclude_pull_requests: str = "false",  # Flag to exclude pull request runs if true.
    check_suite_id: int = None,  # Filter by check suite ID.
    head_sha: str = None,  # Filter by associated commit SHA.
    hosted_runner_id: int = None,  # Identifier for a specific hosted runner.
    name: str = None,  # Name of resource, runner, or entity being created or managed.
    status: str = None,  # Status of the resource, e.g., 'active', 'offline'.
    template: str = None,  # OIDC customization template data.
    organization: str = None,  # Organization name, context-dependent.
    organization: str = None,  # Organization name, possibly for different contexts.
    organization: str = None,  # Organization name, for API requests.
    team_slug: str = None,  # Slug identifier for a team.
    user_id: str = None,  # User identifier for API or resource.
    configuration_id: str = None,  # Identifier for a security or configuration setting.
    user_email_visibility: str = None,  # Patch endpoint to set primary email visibility.
    user_emails: str = None,  # Add email address for authenticated user.
    user_emails_delete: str = None,  # Delete an email address of the authenticated user.
    user_emails_list: str = None,  # List email addresses of the authenticated user.
    user_emails_public: str = None,  # List public email addresses for user.
    user_follow: str = None,  # Follow a user.
    user_unfollow: str = None,  # Unfollow a user.
    user_followers: str = None,  # List followers of the authenticated user.
    user_following: str = None,  # List users the authenticated user follows.
    gpg_key_create: str = None,  # Create a GPG key.
    gpg_key_delete: str = None,  # Delete a GPG key.
    gpg_keys_list: str = None,  # List GPG keys.
    gpg_key_get: str = None,  # Get a specific GPG key.
    gist_create: str = None,  # Create a gist.
    gist_update: str = None,  # Update a gist.
    gist_delete: str = None,  # Delete a gist.
    gist_comment_create: str = None,  # Create a comment on a gist.
    gist_comment_update: str = None,  # Update a gist comment.
    gist_comment_delete: str = None,  # Delete a gist comment.
    gist_fork: str = None,  # Fork a gist.
    gist_star: str = None,  # Star a gist.
    gist_unstar: str = None,  # Unstar a gist.
    ssh_signing_key_create: str = None,  # Create an SSH signing key.
    ssh_signing_key_delete: str = None,  # Delete an SSH signing key.
    ssh_signing_keys_list: str = None,  # List SSH signing keys.
    ssh_signing_key_get: str = None,  # Get an SSH signing key.
    repository_star: str = None,  # Star a repository.
    repository_unstar: str = None,  # Unstar a repository.
    repository_watch: str = None,  # Watch a repository.
    repository_unwatch: str = None,  # Unwatch a repository.
    api_version: str = "2022-11-28",  # The API version being used, can be referenced in API calls or documentation.
    base_url: str = "https://docs.github.com/en/rest",  # Base URL for the GitHub REST API documentation.
    subject_digest: str = None,  # Digest identifier for the subject of the attestation.
    runner_id: int = None,  # ID of the runner.
    hosted_runner_id: int = None,  # ID of the hosted runner.
    organization: str = None,  # Organization name.
    template: str = None,  # Configuration template data.

    def get_oauth_params(self, method: str, url: str) -> Dict[str, str]:
        return {}

    def validate(self):
        # Asserts here
        pass

    def __init__(self):  # Validation on init.
        self.validate()

api_wrapper = APIWrapper(APIClientConfig(), base_url="https://api.github.com/", name="Github Actions")
    


class List_artifacts_for_a_repository(BaseFunction):
    """Lists all artifacts for a repository."""
    name = "List artifacts for a repository"
    url = "/repos/{owner}/{repo}/actions/artifacts"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="owner", param_type=ParameterType.STRING, required=True),  # The account owner of the repository.,
			Parameter(name="repo", param_type=ParameterType.STRING, required=True),  # The name of the repository.,
			Parameter(name="per_page", param_type=ParameterType.INTEGER, required=False),  # Results per page (max 100), default 30.,
			Parameter(name="page", param_type=ParameterType.INTEGER, required=False),  # Page number of the results to fetch, default 1.,
			Parameter(name="name", param_type=ParameterType.STRING, required=False),  # The name field of an artifact.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(name="total_count", param_type=OutputParameterType.INTEGER, is_array=False),  # Total number of artifacts.,
			OutputParameter(name="artifacts", param_type=OutputParameterType.OBJECT, is_array=True),  # List of artifacts.,
			OutputParameter(name="id", param_type=OutputParameterType.INTEGER, is_array=False),  # Artifact ID.,
			OutputParameter(name="node_id", param_type=OutputParameterType.STRING, is_array=False),  # Node ID.,
			OutputParameter(name="name", param_type=OutputParameterType.STRING, is_array=False),  # Artifact name.,
			OutputParameter(name="size_in_bytes", param_type=OutputParameterType.INTEGER, is_array=False),  # Size in bytes.,
			OutputParameter(name="url", param_type=OutputParameterType.STRING, is_array=False),  # API URL for this artifact.,
			OutputParameter(name="archive_download_url", param_type=OutputParameterType.STRING, is_array=False),  # Download URL for the archive.,
			OutputParameter(name="expired", param_type=OutputParameterType.BOOLEAN, is_array=False),  # Whether the artifact has expired.,
			OutputParameter(name="created_at", param_type=OutputParameterType.STRING, is_array=False),  # Creation timestamp.,
			OutputParameter(name="expires_at", param_type=OutputParameterType.STRING, is_array=False),  # Expiration timestamp.,
			OutputParameter(name="updated_at", param_type=OutputParameterType.STRING, is_array=False),  # Last updated timestamp.,
			OutputParameter(name="digest", param_type=OutputParameterType.STRING, is_array=False),  # Digest hash.,
			OutputParameter(name="workflow_run", param_type=OutputParameterType.OBJECT, is_array=False),  # Workflow run associated with the artifact.,
			OutputParameter(name="id", param_type=OutputParameterType.INTEGER, is_array=False),  # Workflow run ID.,
			OutputParameter(name="repository_id", param_type=OutputParameterType.INTEGER, is_array=False),  # Repository ID.,
			OutputParameter(name="head_repository_id", param_type=OutputParameterType.INTEGER, is_array=False),  # Head repository ID.,
			OutputParameter(name="head_branch", param_type=OutputParameterType.STRING, is_array=False),  # Branch name.,
			OutputParameter(name="head_sha", param_type=OutputParameterType.STRING, is_array=False),  # SHA of the head commit.
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(List_artifacts_for_a_repository.method, 
                                           List_artifacts_for_a_repository.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'List_artifacts_for_a_repository': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Get_an_artifact(BaseFunction):
    """Gets a specific artifact."""
    name = "Get an artifact"
    url = "/repos/{owner}/{repo}/actions/artifacts/{artifact_id}"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="owner", param_type=ParameterType.STRING, required=True),  # Repository owner.,
			Parameter(name="repo", param_type=ParameterType.STRING, required=True),  # Repository name.,
			Parameter(name="artifact_id", param_type=ParameterType.INTEGER, required=True),  # Artifact ID.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(name="id", param_type=OutputParameterType.INTEGER, is_array=False),  # Artifact ID.,
			OutputParameter(name="node_id", param_type=OutputParameterType.STRING, is_array=False),  # Node ID.,
			OutputParameter(name="name", param_type=OutputParameterType.STRING, is_array=False),  # Artifact name.,
			OutputParameter(name="size_in_bytes", param_type=OutputParameterType.INTEGER, is_array=False),  # Size in bytes.,
			OutputParameter(name="url", param_type=OutputParameterType.STRING, is_array=False),  # API URL for this artifact.,
			OutputParameter(name="archive_download_url", param_type=OutputParameterType.STRING, is_array=False),  # Download URL for the archive.,
			OutputParameter(name="expired", param_type=OutputParameterType.BOOLEAN, is_array=False),  # Whether the artifact has expired.,
			OutputParameter(name="created_at", param_type=OutputParameterType.STRING, is_array=False),  # Creation timestamp.,
			OutputParameter(name="expires_at", param_type=OutputParameterType.STRING, is_array=False),  # Expiration timestamp.,
			OutputParameter(name="updated_at", param_type=OutputParameterType.STRING, is_array=False),  # Last updated timestamp.,
			OutputParameter(name="digest", param_type=OutputParameterType.STRING, is_array=False),  # Digest hash.,
			OutputParameter(name="workflow_run", param_type=OutputParameterType.OBJECT, is_array=False),  # Workflow run associated with the artifact.,
			OutputParameter(name="id", param_type=OutputParameterType.INTEGER, is_array=False),  # Workflow run ID.,
			OutputParameter(name="repository_id", param_type=OutputParameterType.INTEGER, is_array=False),  # Repository ID.,
			OutputParameter(name="head_repository_id", param_type=OutputParameterType.INTEGER, is_array=False),  # Head repository ID.,
			OutputParameter(name="head_branch", param_type=OutputParameterType.STRING, is_array=False),  # Branch name.,
			OutputParameter(name="head_sha", param_type=OutputParameterType.STRING, is_array=False),  # SHA of the head commit.
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Get_an_artifact.method, 
                                           Get_an_artifact.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_an_artifact': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Delete_an_artifact(BaseFunction):
    """Deletes an artifact."""
    name = "Delete an artifact"
    url = "/repos/{owner}/{repo}/actions/artifacts/{artifact_id}"
    args_in_url = True
    method = DELETE

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="owner", param_type=ParameterType.STRING, required=True),  # Repository owner.,
			Parameter(name="repo", param_type=ParameterType.STRING, required=True),  # Repository name.,
			Parameter(name="artifact_id", param_type=ParameterType.INTEGER, required=True),  # Artifact ID.
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Delete_an_artifact.method, 
                                           Delete_an_artifact.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Delete_an_artifact': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Download_an_artifact_Get_redirect_URL(BaseFunction):
    """Gets a redirect URL to download an archive."""
    name = "Download an artifact (Get redirect URL)"
    url = "/repos/{owner}/{repo}/actions/artifacts/{artifact_id}/{archive_format}"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="owner", param_type=ParameterType.STRING, required=True),  # Repository owner.,
			Parameter(name="repo", param_type=ParameterType.STRING, required=True),  # Repository name.,
			Parameter(name="artifact_id", param_type=ParameterType.INTEGER, required=True),  # Artifact ID.,
			Parameter(name="archive_format", param_type=ParameterType.STRING, required=True),  # Archive format, e.g., 'zip'.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(name="redirect_url", param_type=OutputParameterType.STRING, is_array=False),  # URL to redirect for downloading.
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Download_an_artifact_Get_redirect_URL.method, 
                                           Download_an_artifact_Get_redirect_URL.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Download_an_artifact_Get_redirect_URL': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class List_workflow_run_artifacts(BaseFunction):
    """Lists artifacts for a workflow run."""
    name = "List workflow run artifacts"
    url = "/repos/{owner}/{repo}/actions/runs/{run_id}/artifacts"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="owner", param_type=ParameterType.STRING, required=True),  # Repository owner.,
			Parameter(name="repo", param_type=ParameterType.STRING, required=True),  # Repository name.,
			Parameter(name="run_id", param_type=ParameterType.INTEGER, required=True),  # Workflow run ID.,
			Parameter(name="per_page", param_type=ParameterType.INTEGER, required=False),  # Results per page, max 100.,
			Parameter(name="page", param_type=ParameterType.INTEGER, required=False),  # Page number.,
			Parameter(name="name", param_type=ParameterType.STRING, required=False),  # Artifact name filter.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(name="total_count", param_type=OutputParameterType.INTEGER, is_array=False),  # Total number of artifacts.,
			OutputParameter(name="artifacts", param_type=OutputParameterType.OBJECT, is_array=True),  # List of artifacts.,
			OutputParameter(name="id", param_type=OutputParameterType.INTEGER, is_array=False),  # Artifact ID.,
			OutputParameter(name="node_id", param_type=OutputParameterType.STRING, is_array=False),  # Node ID.,
			OutputParameter(name="name", param_type=OutputParameterType.STRING, is_array=False),  # Artifact name.,
			OutputParameter(name="size_in_bytes", param_type=OutputParameterType.INTEGER, is_array=False),  # Size in bytes.,
			OutputParameter(name="url", param_type=OutputParameterType.STRING, is_array=False),  # API URL.,
			OutputParameter(name="archive_download_url", param_type=OutputParameterType.STRING, is_array=False),  # Archive download URL.,
			OutputParameter(name="expired", param_type=OutputParameterType.BOOLEAN, is_array=False),  # Expired status.,
			OutputParameter(name="created_at", param_type=OutputParameterType.STRING, is_array=False),  # Creation timestamp.,
			OutputParameter(name="expires_at", param_type=OutputParameterType.STRING, is_array=False),  # Expiration timestamp.,
			OutputParameter(name="updated_at", param_type=OutputParameterType.STRING, is_array=False),  # Update timestamp.,
			OutputParameter(name="digest", param_type=OutputParameterType.STRING, is_array=False),  # Digest hash.,
			OutputParameter(name="workflow_run", param_type=OutputParameterType.OBJECT, is_array=False),  # Associated workflow run.,
			OutputParameter(name="id", param_type=OutputParameterType.INTEGER, is_array=False),  # Workflow run ID.,
			OutputParameter(name="repository_id", param_type=OutputParameterType.INTEGER, is_array=False),  # Repository ID.,
			OutputParameter(name="head_repository_id", param_type=OutputParameterType.INTEGER, is_array=False),  # Head repository ID.,
			OutputParameter(name="head_branch", param_type=OutputParameterType.STRING, is_array=False),  # Branch name.,
			OutputParameter(name="head_sha", param_type=OutputParameterType.STRING, is_array=False),  # SHA of head commit.
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(List_workflow_run_artifacts.method, 
                                           List_workflow_run_artifacts.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'List_workflow_run_artifacts': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class List_organization_variables(BaseFunction):
    """Lists all organization variables."""
    name = "List organization variables"
    url = "https://api.github.com/orgs/{org}/actions/variables"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="accept", param_type=ParameterType.STRING, required=True),  # Setting to 'application/vnd.github+json' is recommended.,
			Parameter(name="org", param_type=ParameterType.STRING, required=True),  # The organization name. The name is not case sensitive.,
			Parameter(name="per_page", param_type=ParameterType.INTEGER, required=False),  # The number of results per page (max 30). Default: 10.,
			Parameter(name="page", param_type=ParameterType.INTEGER, required=False),  # The page number of the results to fetch. Default: 1.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(name="total_count", param_type=OutputParameterType.INTEGER, is_array=False),  # Total number of variables.,
			OutputParameter(name="variables", param_type=OutputParameterType.OBJECT, is_array=True),  # List of organization variables.,
			OutputParameter(name="name", param_type=OutputParameterType.STRING, is_array=False),  # Variable name.,
			OutputParameter(name="value", param_type=OutputParameterType.STRING, is_array=False),  # Variable value.,
			OutputParameter(name="created_at", param_type=OutputParameterType.STRING, is_array=False),  # Timestamp of creation.,
			OutputParameter(name="updated_at", param_type=OutputParameterType.STRING, is_array=False),  # Timestamp of last update.,
			OutputParameter(name="visibility", param_type=OutputParameterType.STRING, is_array=False),  # Visibility of the variable.,
			OutputParameter(name="selected_repositories_url", param_type=OutputParameterType.STRING, is_array=False),  # URL to list repositories with access.
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(List_organization_variables.method, 
                                           List_organization_variables.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'List_organization_variables': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Create_an_organization_variable(BaseFunction):
    """Creates an organization variable."""
    name = "Create an organization variable"
    url = "https://api.github.com/orgs/{org}/actions/variables"
    args_in_url = True
    method = INSERT

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="accept", param_type=ParameterType.STRING, required=True),  # Setting to 'application/vnd.github+json' is recommended.,
			Parameter(name="org", param_type=ParameterType.STRING, required=True),  # The organization name. The name is not case sensitive.,
			Parameter(name="name", param_type=ParameterType.STRING, required=True),  # The name of the variable.,
			Parameter(name="value", param_type=ParameterType.STRING, required=True),  # The value of the variable.,
			Parameter(name="visibility", param_type=ParameterType.STRING, required=True),  # The type of repositories that can access the variable. Can be 'all', 'private', or 'selected'.,
			Parameter(name="selected_repository_ids", param_type=ParameterType.INTEGER, required=False),  # Array of repository IDs that can access the variable if 'visibility' is 'selected'.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(name="status_code", param_type=OutputParameterType.INTEGER, is_array=False),  # Response status code, e.g., 201 for created.
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Create_an_organization_variable.method, 
                                           Create_an_organization_variable.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Create_an_organization_variable': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Get_an_organization_variable(BaseFunction):
    """Retrieves a specific organization variable."""
    name = "Get an organization variable"
    url = "https://api.github.com/orgs/{org}/actions/variables/{name}"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="accept", param_type=ParameterType.STRING, required=True),  # Setting to 'application/vnd.github+json' is recommended.,
			Parameter(name="org", param_type=ParameterType.STRING, required=True),  # The organization name.,
			Parameter(name="name", param_type=ParameterType.STRING, required=True),  # The name of the variable.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(name="name", param_type=OutputParameterType.STRING, is_array=False),  # Variable name.,
			OutputParameter(name="value", param_type=OutputParameterType.STRING, is_array=False),  # Variable value.,
			OutputParameter(name="created_at", param_type=OutputParameterType.STRING, is_array=False),  # Timestamp of creation.,
			OutputParameter(name="updated_at", param_type=OutputParameterType.STRING, is_array=False),  # Timestamp of last update.,
			OutputParameter(name="visibility", param_type=OutputParameterType.STRING, is_array=False),  # Visibility of the variable.,
			OutputParameter(name="selected_repositories_url", param_type=OutputParameterType.STRING, is_array=False),  # URL to list repositories with access.
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Get_an_organization_variable.method, 
                                           Get_an_organization_variable.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_an_organization_variable': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Update_an_organization_variable(BaseFunction):
    """Updates an organization variable."""
    name = "Update an organization variable"
    url = "https://api.github.com/orgs/{org}/actions/variables/{name}"
    args_in_url = True
    method = UPDATE

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="accept", param_type=ParameterType.STRING, required=True),  # Setting to 'application/vnd.github+json' is recommended.,
			Parameter(name="org", param_type=ParameterType.STRING, required=True),  # The organization name.,
			Parameter(name="name", param_type=ParameterType.STRING, required=True),  # The variable name to update.,
			Parameter(name="body", param_type=OutputParameterType.OBJECT, required=True),  # Contains 'name', 'value', 'visibility', and/or 'selected_repository_ids'.,
			Parameter(name="name_field", param_type=ParameterType.STRING, required=False),  # Updated variable name.,
			Parameter(name="value", param_type=ParameterType.STRING, required=False),  # Updated variable value.,
			Parameter(name="visibility", param_type=ParameterType.STRING, required=False),  # Visibility type, e.g., 'all', 'private', or 'selected'.,
			Parameter(name="selected_repository_ids", param_type=ParameterType.INTEGER, required=False),  # Array of repository IDs if 'visibility' is 'selected'.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(name="status_code", param_type=OutputParameterType.INTEGER, is_array=False),  # 204 for success.
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Update_an_organization_variable.method, 
                                           Update_an_organization_variable.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Update_an_organization_variable': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Delete_an_organization_variable(BaseFunction):
    """Deletes an organization variable."""
    name = "Delete an organization variable"
    url = "https://api.github.com/orgs/{org}/actions/variables/{name}"
    args_in_url = True
    method = DELETE

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="accept", param_type=ParameterType.STRING, required=True),  # Setting to 'application/vnd.github+json' is recommended.,
			Parameter(name="org", param_type=ParameterType.STRING, required=True),  # The organization name.,
			Parameter(name="name", param_type=ParameterType.STRING, required=True),  # The variable name to delete.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(name="status_code", param_type=OutputParameterType.INTEGER, is_array=False),  # 204 indicates success.
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Delete_an_organization_variable.method, 
                                           Delete_an_organization_variable.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Delete_an_organization_variable': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class List_selected_repositories_for_an_organization_variable(BaseFunction):
    """Lists all repositories that can access an organization variable."""
    name = "List selected repositories for an organization variable"
    url = "https://api.github.com/orgs/{org}/actions/variables/{name}/repositories"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="accept", param_type=ParameterType.STRING, required=True),  # Setting to 'application/vnd.github+json' is recommended.,
			Parameter(name="org", param_type=ParameterType.STRING, required=True),  # The organization name.,
			Parameter(name="name", param_type=ParameterType.STRING, required=True),  # Name of the variable.,
			Parameter(name="page", param_type=ParameterType.INTEGER, required=False),  # Page number for pagination. Default 1.,
			Parameter(name="per_page", param_type=ParameterType.INTEGER, required=False),  # Number of results per page, max 100. Default 30.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(name="total_count", param_type=OutputParameterType.INTEGER, is_array=False),  # Total number of repositories.,
			OutputParameter(name="repositories", param_type=OutputParameterType.OBJECT, is_array=True),  # List of repositories.,
			OutputParameter(name="id", param_type=OutputParameterType.INTEGER, is_array=False),  # Repository ID.,
			OutputParameter(name="node_id", param_type=OutputParameterType.STRING, is_array=False),  # Repository node ID.,
			OutputParameter(name="name", param_type=OutputParameterType.STRING, is_array=False),  # Repository name.,
			OutputParameter(name="full_name", param_type=OutputParameterType.STRING, is_array=False),  # Full repository name.,
			OutputParameter(name="owner", param_type=OutputParameterType.OBJECT, is_array=False),  # Repository owner info.,
			OutputParameter(name="login", param_type=OutputParameterType.STRING, is_array=False),  # Owner login.,
			OutputParameter(name="id", param_type=OutputParameterType.INTEGER, is_array=False),  # Owner ID.,
			OutputParameter(name="avatar_url", param_type=OutputParameterType.STRING, is_array=False),  # Owner avatar URL.,
			OutputParameter(name="html_url", param_type=OutputParameterType.STRING, is_array=False),  # Owner HTML URL.
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(List_selected_repositories_for_an_organization_variable.method, 
                                           List_selected_repositories_for_an_organization_variable.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'List_selected_repositories_for_an_organization_variable': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Set_selected_repositories_for_an_organization_variable(BaseFunction):
    """Replaces all repositories with specified list for a variable."""
    name = "Set selected repositories for an organization variable"
    url = "https://api.github.com/orgs/{org}/actions/variables/{name}/repositories"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="accept", param_type=ParameterType.STRING, required=True),  # Setting to 'application/vnd.github+json' is recommended.,
			Parameter(name="org", param_type=ParameterType.STRING, required=True),  # The organization name.,
			Parameter(name="name", param_type=ParameterType.STRING, required=True),  # The variable name.,
			Parameter(name="body", param_type=OutputParameterType.OBJECT, required=True),  # Contains 'selected_repository_ids'.,
			Parameter(name="selected_repository_ids", param_type=ParameterType.INTEGER, required=True),  # Array of repository IDs to set.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(name="status_code", param_type=OutputParameterType.INTEGER, is_array=False),  # 204 indicates success.
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Set_selected_repositories_for_an_organization_variable.method, 
                                           Set_selected_repositories_for_an_organization_variable.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Set_selected_repositories_for_an_organization_variable': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Add_selected_repository_to_an_organization_variable(BaseFunction):
    """Adds a repository to an organization variable."""
    name = "Add selected repository to an organization variable"
    url = "https://api.github.com/orgs/{org}/actions/variables/{name}/repositories/{repository_id}"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="accept", param_type=ParameterType.STRING, required=True),  # Setting to 'application/vnd.github+json' is recommended.,
			Parameter(name="org", param_type=ParameterType.STRING, required=True),  # Organization name.,
			Parameter(name="name", param_type=ParameterType.STRING, required=True),  # Variable name.,
			Parameter(name="repository_id", param_type=ParameterType.INTEGER, required=True),  # Repository ID to add.,
			Parameter(name="body", param_type=OutputParameterType.OBJECT, required=True),  # Contains 'repository_id'.,
			Parameter(name="repository_id_field", param_type=ParameterType.INTEGER, required=False),  # Repository ID.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(name="status_code", param_type=OutputParameterType.INTEGER, is_array=False),  # 204 for success.
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Add_selected_repository_to_an_organization_variable.method, 
                                           Add_selected_repository_to_an_organization_variable.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Add_selected_repository_to_an_organization_variable': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Remove_selected_repository_from_an_organization_variable(BaseFunction):
    """Removes a repository from an organization variable."""
    name = "Remove selected repository from an organization variable"
    url = "https://api.github.com/orgs/{org}/actions/variables/{name}/repositories/{repository_id}"
    args_in_url = True
    method = DELETE

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="accept", param_type=ParameterType.STRING, required=True),  # Setting to 'application/vnd.github+json' is recommended.,
			Parameter(name="org", param_type=ParameterType.STRING, required=True),  # Organization name.,
			Parameter(name="name", param_type=ParameterType.STRING, required=True),  # Variable name.,
			Parameter(name="repository_id", param_type=ParameterType.INTEGER, required=True),  # Repository ID to remove.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(name="status_code", param_type=OutputParameterType.INTEGER, is_array=False),  # 204 indicates success.
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Remove_selected_repository_from_an_organization_variable.method, 
                                           Remove_selected_repository_from_an_organization_variable.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Remove_selected_repository_from_an_organization_variable': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class List_repository_variables(BaseFunction):
    """Lists all repository variables."""
    name = "List repository variables"
    url = "https://api.github.com/repos/{owner}/{repo}/actions/variables"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="accept", param_type=ParameterType.STRING, required=True),  # Setting to 'application/vnd.github+json' is recommended.,
			Parameter(name="owner", param_type=ParameterType.STRING, required=True),  # Repository owner.,
			Parameter(name="repo", param_type=ParameterType.STRING, required=True),  # Repository name.,
			Parameter(name="per_page", param_type=ParameterType.INTEGER, required=False),  # Max 30 results per page. Default: 10.,
			Parameter(name="page", param_type=ParameterType.INTEGER, required=False),  # Page number. Default: 1.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(name="total_count", param_type=OutputParameterType.INTEGER, is_array=False),  # Number of variables.,
			OutputParameter(name="variables", param_type=OutputParameterType.OBJECT, is_array=True),  # List of variables.,
			OutputParameter(name="name", param_type=OutputParameterType.STRING, is_array=False),  # Variable name.,
			OutputParameter(name="value", param_type=OutputParameterType.STRING, is_array=False),  # Variable value.,
			OutputParameter(name="created_at", param_type=OutputParameterType.STRING, is_array=False),  # Timestamp of creation.,
			OutputParameter(name="updated_at", param_type=OutputParameterType.STRING, is_array=False),  # Timestamp of last update.
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(List_repository_variables.method, 
                                           List_repository_variables.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'List_repository_variables': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Create_a_repository_variable(BaseFunction):
    """Creates a repository variable."""
    name = "Create a repository variable"
    url = "https://api.github.com/repos/{owner}/{repo}/actions/variables"
    args_in_url = True
    method = INSERT

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="accept", param_type=ParameterType.STRING, required=True),  # Setting to 'application/vnd.github+json' is recommended.,
			Parameter(name="owner", param_type=ParameterType.STRING, required=True),  # Repository owner.,
			Parameter(name="repo", param_type=ParameterType.STRING, required=True),  # Repository name.,
			Parameter(name="name", param_type=ParameterType.STRING, required=True),  # Variable name.,
			Parameter(name="value", param_type=ParameterType.STRING, required=True),  # Variable value.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(name="status_code", param_type=OutputParameterType.INTEGER, is_array=False),  # 201 for created.
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Create_a_repository_variable.method, 
                                           Create_a_repository_variable.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Create_a_repository_variable': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Get_a_repository_variable(BaseFunction):
    """Retrieves a specific repository variable."""
    name = "Get a repository variable"
    url = "https://api.github.com/repos/{owner}/{repo}/actions/variables/{name}"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="accept", param_type=ParameterType.STRING, required=True),  # Setting to 'application/vnd.github+json' is recommended.,
			Parameter(name="owner", param_type=ParameterType.STRING, required=True),  # Repository owner.,
			Parameter(name="repo", param_type=ParameterType.STRING, required=True),  # Repository name.,
			Parameter(name="name", param_type=ParameterType.STRING, required=True),  # Variable name.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(name="name", param_type=OutputParameterType.STRING, is_array=False),  # Variable name.,
			OutputParameter(name="value", param_type=OutputParameterType.STRING, is_array=False),  # Variable value.,
			OutputParameter(name="created_at", param_type=OutputParameterType.STRING, is_array=False),  # Timestamp of creation.,
			OutputParameter(name="updated_at", param_type=OutputParameterType.STRING, is_array=False),  # Timestamp of last update.
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Get_a_repository_variable.method, 
                                           Get_a_repository_variable.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_a_repository_variable': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Update_a_repository_variable(BaseFunction):
    """Updates a repository variable."""
    name = "Update a repository variable"
    url = "https://api.github.com/repos/{owner}/{repo}/actions/variables/{name}"
    args_in_url = True
    method = UPDATE

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="accept", param_type=ParameterType.STRING, required=True),  # Setting to 'application/vnd.github+json' is recommended.,
			Parameter(name="owner", param_type=ParameterType.STRING, required=True),  # Repository owner.,
			Parameter(name="repo", param_type=ParameterType.STRING, required=True),  # Repository name.,
			Parameter(name="name", param_type=ParameterType.STRING, required=True),  # Variable name.,
			Parameter(name="body", param_type=OutputParameterType.OBJECT, required=True),  # Contains 'name' and 'value'.,
			Parameter(name="name_field", param_type=ParameterType.STRING, required=False),  # Updated variable name.,
			Parameter(name="value", param_type=ParameterType.STRING, required=False),  # Updated variable value.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(name="status_code", param_type=OutputParameterType.INTEGER, is_array=False),  # 204 for success.
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Update_a_repository_variable.method, 
                                           Update_a_repository_variable.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Update_a_repository_variable': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Delete_a_repository_variable(BaseFunction):
    """Deletes a repository variable."""
    name = "Delete a repository variable"
    url = "https://api.github.com/repos/{owner}/{repo}/actions/variables/{name}"
    args_in_url = True
    method = DELETE

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="accept", param_type=ParameterType.STRING, required=True),  # Setting to 'application/vnd.github+json' is recommended.,
			Parameter(name="owner", param_type=ParameterType.STRING, required=True),  # Repository owner.,
			Parameter(name="repo", param_type=ParameterType.STRING, required=True),  # Repository name.,
			Parameter(name="name", param_type=ParameterType.STRING, required=True),  # Variable name.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(name="status_code", param_type=OutputParameterType.INTEGER, is_array=False),  # 204 indicates success.
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Delete_a_repository_variable.method, 
                                           Delete_a_repository_variable.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Delete_a_repository_variable': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class List_environment_variables(BaseFunction):
    """Lists all environment variables."""
    name = "List environment variables"
    url = "https://api.github.com/repos/{owner}/{repo}/environments/{environment_name}/variables"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="accept", param_type=ParameterType.STRING, required=True),  # Setting to 'application/vnd.github+json' is recommended.,
			Parameter(name="owner", param_type=ParameterType.STRING, required=True),  # Repository owner.,
			Parameter(name="repo", param_type=ParameterType.STRING, required=True),  # Repository name.,
			Parameter(name="environment_name", param_type=ParameterType.STRING, required=True),  # Environment name.,
			Parameter(name="per_page", param_type=ParameterType.INTEGER, required=False),  # Max 30 results per page, default 10.,
			Parameter(name="page", param_type=ParameterType.INTEGER, required=False),  # Page number, default 1.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(name="total_count", param_type=OutputParameterType.INTEGER, is_array=False),  # Total number of environment variables.,
			OutputParameter(name="variables", param_type=OutputParameterType.OBJECT, is_array=True),  # List of environment variables.,
			OutputParameter(name="name", param_type=OutputParameterType.STRING, is_array=False),  # Variable name.,
			OutputParameter(name="value", param_type=OutputParameterType.STRING, is_array=False),  # Variable value.,
			OutputParameter(name="created_at", param_type=OutputParameterType.STRING, is_array=False),  # Timestamp of creation.,
			OutputParameter(name="updated_at", param_type=OutputParameterType.STRING, is_array=False),  # Timestamp of last update.
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(List_environment_variables.method, 
                                           List_environment_variables.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'List_environment_variables': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Create_an_environment_variable(BaseFunction):
    """Creates an environment variable."""
    name = "Create an environment variable"
    url = "https://api.github.com/repos/{owner}/{repo}/environments/{environment_name}/variables"
    args_in_url = True
    method = INSERT

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="accept", param_type=ParameterType.STRING, required=True),  # Setting to 'application/vnd.github+json' is recommended.,
			Parameter(name="owner", param_type=ParameterType.STRING, required=True),  # Repository owner.,
			Parameter(name="repo", param_type=ParameterType.STRING, required=True),  # Repository name.,
			Parameter(name="environment_name", param_type=ParameterType.STRING, required=True),  # Environment name.,
			Parameter(name="name", param_type=ParameterType.STRING, required=True),  # Variable name.,
			Parameter(name="value", param_type=ParameterType.STRING, required=True),  # Variable value.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(name="status_code", param_type=OutputParameterType.INTEGER, is_array=False),  # 201 for created.
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Create_an_environment_variable.method, 
                                           Create_an_environment_variable.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Create_an_environment_variable': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Get_an_environment_variable(BaseFunction):
    """Retrieves a specific environment variable."""
    name = "Get an environment variable"
    url = "https://api.github.com/repos/{owner}/{repo}/environments/{environment_name}/variables/{name}"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="accept", param_type=ParameterType.STRING, required=True),  # Setting to 'application/vnd.github+json' is recommended.,
			Parameter(name="owner", param_type=ParameterType.STRING, required=True),  # Repository owner.,
			Parameter(name="repo", param_type=ParameterType.STRING, required=True),  # Repository name.,
			Parameter(name="environment_name", param_type=ParameterType.STRING, required=True),  # Environment name.,
			Parameter(name="name", param_type=ParameterType.STRING, required=True),  # Variable name.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(name="name", param_type=OutputParameterType.STRING, is_array=False),  # Variable name.,
			OutputParameter(name="value", param_type=OutputParameterType.STRING, is_array=False),  # Variable value.,
			OutputParameter(name="created_at", param_type=OutputParameterType.STRING, is_array=False),  # Timestamp of creation.,
			OutputParameter(name="updated_at", param_type=OutputParameterType.STRING, is_array=False),  # Timestamp of last update.
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Get_an_environment_variable.method, 
                                           Get_an_environment_variable.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_an_environment_variable': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Update_an_environment_variable(BaseFunction):
    """Updates an environment variable."""
    name = "Update an environment variable"
    url = "https://api.github.com/repos/{owner}/{repo}/environments/{environment_name}/variables/{name}"
    args_in_url = True
    method = UPDATE

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="accept", param_type=ParameterType.STRING, required=True),  # Setting to 'application/vnd.github+json' is recommended.,
			Parameter(name="owner", param_type=ParameterType.STRING, required=True),  # Repository owner.,
			Parameter(name="repo", param_type=ParameterType.STRING, required=True),  # Repository name.,
			Parameter(name="environment_name", param_type=ParameterType.STRING, required=True),  # Environment name.,
			Parameter(name="name", param_type=ParameterType.STRING, required=True),  # Variable name.,
			Parameter(name="body", param_type=OutputParameterType.OBJECT, required=True),  # Contains 'name' and 'value'.,
			Parameter(name="name_field", param_type=ParameterType.STRING, required=False),  # Updated variable name.,
			Parameter(name="value", param_type=ParameterType.STRING, required=False),  # Updated variable value.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(name="status_code", param_type=OutputParameterType.INTEGER, is_array=False),  # 204 for success.
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Update_an_environment_variable.method, 
                                           Update_an_environment_variable.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Update_an_environment_variable': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Delete_an_environment_variable(BaseFunction):
    """Deletes an environment variable."""
    name = "Delete an environment variable"
    url = "https://api.github.com/repos/{owner}/{repo}/environments/{environment_name}/variables/{name}"
    args_in_url = True
    method = DELETE

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="accept", param_type=ParameterType.STRING, required=True),  # Setting to 'application/vnd.github+json' is recommended.,
			Parameter(name="owner", param_type=ParameterType.STRING, required=True),  # Repository owner.,
			Parameter(name="repo", param_type=ParameterType.STRING, required=True),  # Repository name.,
			Parameter(name="environment_name", param_type=ParameterType.STRING, required=True),  # Environment name.,
			Parameter(name="name", param_type=ParameterType.STRING, required=True),  # Variable name.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(name="status_code", param_type=OutputParameterType.INTEGER, is_array=False),  # 204 indicates success.
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Delete_an_environment_variable.method, 
                                           Delete_an_environment_variable.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Delete_an_environment_variable': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class List_organization_secrets(BaseFunction):
    """Lists all secrets available in an organization without revealing their encrypted values."""
    name = "List organization secrets"
    url = "/orgs/{org}/actions/secrets"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="accept", param_type=ParameterType.STRING, required=False),  # Setting to `application/vnd.github+json` is recommended.,
			Parameter(name="org", param_type=ParameterType.STRING, required=True),  # The organization name. The name is not case sensitive.,
			Parameter(name="per_page", param_type=ParameterType.INTEGER, required=False),  # The number of results per page (max 100). Default: 30.,
			Parameter(name="page", param_type=ParameterType.INTEGER, required=False),  # The page number of the results to fetch. Default: 1.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(name="total_count", param_type=OutputParameterType.INTEGER, is_array=False),  # Total number of secrets.,
			OutputParameter(name="secrets", param_type=OutputParameterType.OBJECT, is_array=True),  # Array of secret objects.,
			OutputParameter(name="name", param_type=OutputParameterType.STRING, is_array=False),  # Name of the secret.,
			OutputParameter(name="created_at", param_type=OutputParameterType.STRING, is_array=False),  # Creation timestamp.,
			OutputParameter(name="updated_at", param_type=OutputParameterType.STRING, is_array=False),  # Last updated timestamp.,
			OutputParameter(name="visibility", param_type=OutputParameterType.STRING, is_array=False),  # Visibility of the secret.,
			OutputParameter(name="selected_repositories_url", param_type=OutputParameterType.STRING, is_array=False),  # URL to list repositories with access for 'selected' visibility.
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(List_organization_secrets.method, 
                                           List_organization_secrets.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'List_organization_secrets': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Get_an_organization_public_key(BaseFunction):
    """Gets your public key, which you need to encrypt secrets."""
    name = "Get an organization public key"
    url = "/orgs/{org}/actions/secrets/public-key"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="accept", param_type=ParameterType.STRING, required=False),  # Setting to `application/vnd.github+json` is recommended.,
			Parameter(name="org", param_type=ParameterType.STRING, required=True),  # The organization name. The name is not case sensitive.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(name="key_id", param_type=OutputParameterType.STRING, is_array=False),  # ID of the public key.,
			OutputParameter(name="key", param_type=OutputParameterType.STRING, is_array=False),  # Public key used for encryption.
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Get_an_organization_public_key.method, 
                                           Get_an_organization_public_key.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_an_organization_public_key': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Get_an_organization_secret(BaseFunction):
    """Gets a single organization secret without revealing its encrypted value."""
    name = "Get an organization secret"
    url = "/orgs/{org}/actions/secrets/{secret_name}"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="accept", param_type=ParameterType.STRING, required=False),  # Setting to `application/vnd.github+json` is recommended.,
			Parameter(name="org", param_type=ParameterType.STRING, required=True),  # The organization name. The name is not case sensitive.,
			Parameter(name="secret_name", param_type=ParameterType.STRING, required=True),  # Name of the secret.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(name="name", param_type=OutputParameterType.STRING, is_array=False),  # Name of the secret.,
			OutputParameter(name="created_at", param_type=OutputParameterType.STRING, is_array=False),  # Timestamp of creation.,
			OutputParameter(name="updated_at", param_type=OutputParameterType.STRING, is_array=False),  # Timestamp of last update.,
			OutputParameter(name="visibility", param_type=OutputParameterType.STRING, is_array=False),  # Visibility of the secret.,
			OutputParameter(name="selected_repositories_url", param_type=OutputParameterType.STRING, is_array=False),  # URL to list repositories with access for 'selected' visibility.
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Get_an_organization_secret.method, 
                                           Get_an_organization_secret.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_an_organization_secret': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Create_or_update_an_organization_secret(BaseFunction):
    """Creates or updates an organization secret with an encrypted value."""
    name = "Create or update an organization secret"
    url = "/orgs/{org}/actions/secrets/{secret_name}"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="accept", param_type=ParameterType.STRING, required=False),  # Setting to `application/vnd.github+json` is recommended.,
			Parameter(name="org", param_type=ParameterType.STRING, required=True),  # The organization name. The name is not case sensitive.,
			Parameter(name="secret_name", param_type=ParameterType.STRING, required=True),  # Name of the secret.,
			Parameter(name="encrypted_value", param_type=ParameterType.STRING, required=True),  # Value for your secret, encrypted with LibSodium.,
			Parameter(name="key_id", param_type=ParameterType.STRING, required=True),  # ID of the key used to encrypt the secret.,
			Parameter(name="visibility", param_type=ParameterType.STRING, required=True),  # Access level: `all`, `private`, or `selected`.,
			Parameter(name="selected_repository_ids", param_type=ParameterType.INTEGER, required=False),  # Array of repository IDs for `selected` visibility.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(name="status_code", param_type=OutputParameterType.INTEGER, is_array=False),  # 202 for creation, 204 for update.
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Create_or_update_an_organization_secret.method, 
                                           Create_or_update_an_organization_secret.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Create_or_update_an_organization_secret': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Delete_an_organization_secret(BaseFunction):
    """Deletes a secret in an organization."""
    name = "Delete an organization secret"
    url = "/orgs/{org}/actions/secrets/{secret_name}"
    args_in_url = True
    method = DELETE

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="accept", param_type=ParameterType.STRING, required=False),  # Setting to `application/vnd.github+json` is recommended.,
			Parameter(name="org", param_type=ParameterType.STRING, required=True),  # The organization name. The name is not case sensitive.,
			Parameter(name="secret_name", param_type=ParameterType.STRING, required=True),  # Name of the secret.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(name="status_code", param_type=OutputParameterType.INTEGER, is_array=False),  # 204 success, no content.
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Delete_an_organization_secret.method, 
                                           Delete_an_organization_secret.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Delete_an_organization_secret': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class List_selected_repositories_for_an_organization_secret(BaseFunction):
    """Lists all repositories that have been selected when `visibility` is `selected`."""
    name = "List selected repositories for an organization secret"
    url = "/orgs/{org}/actions/secrets/{secret_name}/repositories"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="accept", param_type=ParameterType.STRING, required=False),  # Setting to `application/vnd.github+json` is recommended.,
			Parameter(name="org", param_type=ParameterType.STRING, required=True),  # The organization name. The name is not case sensitive.,
			Parameter(name="secret_name", param_type=ParameterType.STRING, required=True),  # Name of the secret.,
			Parameter(name="page", param_type=ParameterType.INTEGER, required=False),  # Page number for pagination. Default: 1.,
			Parameter(name="per_page", param_type=ParameterType.INTEGER, required=False),  # Results per page. Max 100. Default: 30.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(name="total_count", param_type=OutputParameterType.INTEGER, is_array=False),  # Total count of repositories.,
			OutputParameter(name="repositories", param_type=OutputParameterType.OBJECT, is_array=True),  # Array of repository objects.,
			OutputParameter(name="id", param_type=OutputParameterType.INTEGER, is_array=False),  # Repository ID.,
			OutputParameter(name="node_id", param_type=OutputParameterType.STRING, is_array=False),  # Repository node ID.,
			OutputParameter(name="name", param_type=OutputParameterType.STRING, is_array=False),  # Repository name.,
			OutputParameter(name="full_name", param_type=OutputParameterType.STRING, is_array=False),  # Repository full name.,
			OutputParameter(name="owner", param_type=OutputParameterType.OBJECT, is_array=False),  # Owner object.,
			OutputParameter(name="login", param_type=OutputParameterType.STRING, is_array=False),  # Owner login.,
			OutputParameter(name="id", param_type=OutputParameterType.INTEGER, is_array=False),  # Owner ID.,
			OutputParameter(name="node_id", param_type=OutputParameterType.STRING, is_array=False),  # Owner node ID.,
			OutputParameter(name="avatar_url", param_type=OutputParameterType.STRING, is_array=False),  # Owner avatar URL.,
			OutputParameter(name="url", param_type=OutputParameterType.STRING, is_array=False),  # Owner URL.,
			OutputParameter(name="html_url", param_type=OutputParameterType.STRING, is_array=False),  # Owner profile URL.,
			OutputParameter(name="type", param_type=OutputParameterType.STRING, is_array=False),  # Owner type.,
			OutputParameter(name="site_admin", param_type=OutputParameterType.BOOLEAN, is_array=False),  # Whether owner is site admin.,
			OutputParameter(name="private", param_type=OutputParameterType.BOOLEAN, is_array=False),  # Repository privacy status.,
			OutputParameter(name="html_url", param_type=OutputParameterType.STRING, is_array=False),  # Repository URL.
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(List_selected_repositories_for_an_organization_secret.method, 
                                           List_selected_repositories_for_an_organization_secret.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'List_selected_repositories_for_an_organization_secret': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Add_selected_repository_to_an_organization_secret(BaseFunction):
    """Adds a repository to an organization secret."""
    name = "Add selected repository to an organization secret"
    url = "/orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="accept", param_type=ParameterType.STRING, required=False),  # Setting to `application/vnd.github+json` is recommended.,
			Parameter(name="org", param_type=ParameterType.STRING, required=True),  # The organization name.,
			Parameter(name="secret_name", param_type=ParameterType.STRING, required=True),  # Name of the secret.,
			Parameter(name="repository_id", param_type=ParameterType.INTEGER, required=True),  # Repository ID.,
			Parameter(name="accept", param_type=ParameterType.STRING, required=False),  # Setting to `application/vnd.github+json` is recommended.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(name="status_code", param_type=OutputParameterType.INTEGER, is_array=False),  # 204 when repository was added, 409 for conflict.
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Add_selected_repository_to_an_organization_secret.method, 
                                           Add_selected_repository_to_an_organization_secret.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Add_selected_repository_to_an_organization_secret': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Remove_selected_repository_from_an_organization_secret(BaseFunction):
    """Removes a repository from an organization secret."""
    name = "Remove selected repository from an organization secret"
    url = "/orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}"
    args_in_url = True
    method = DELETE

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="accept", param_type=ParameterType.STRING, required=False),  # Setting to `application/vnd.github+json` is recommended.,
			Parameter(name="org", param_type=ParameterType.STRING, required=True),  # The organization name.,
			Parameter(name="secret_name", param_type=ParameterType.STRING, required=True),  # Name of the secret.,
			Parameter(name="repository_id", param_type=ParameterType.INTEGER, required=True),  # Repository ID.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(name="status_code", param_type=OutputParameterType.INTEGER, is_array=False),  # 204 when repository was removed, 409 for conflict.
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Remove_selected_repository_from_an_organization_secret.method, 
                                           Remove_selected_repository_from_an_organization_secret.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Remove_selected_repository_from_an_organization_secret': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class List_repository_secrets(BaseFunction):
    """Lists all secrets available in a repository without revealing their encrypted values."""
    name = "List repository secrets"
    url = "/repos/{owner}/{repo}/actions/secrets"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="accept", param_type=ParameterType.STRING, required=False),  # Setting to `application/vnd.github+json` is recommended.,
			Parameter(name="owner", param_type=ParameterType.STRING, required=True),  # Repository owner.,
			Parameter(name="repo", param_type=ParameterType.STRING, required=True),  # Repository name.,
			Parameter(name="per_page", param_type=ParameterType.INTEGER, required=False),  # Results per page. Max 100. Default: 30.,
			Parameter(name="page", param_type=ParameterType.INTEGER, required=False),  # Page number. Default: 1.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(name="total_count", param_type=OutputParameterType.INTEGER, is_array=False),  # Total secrets count.,
			OutputParameter(name="secrets", param_type=OutputParameterType.OBJECT, is_array=True),  # Array of secret objects.,
			OutputParameter(name="name", param_type=OutputParameterType.STRING, is_array=False),  # Secret name.,
			OutputParameter(name="created_at", param_type=OutputParameterType.STRING, is_array=False),  # Creation timestamp.,
			OutputParameter(name="updated_at", param_type=OutputParameterType.STRING, is_array=False),  # Last update timestamp.
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(List_repository_secrets.method, 
                                           List_repository_secrets.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'List_repository_secrets': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Get_a_repository_public_key(BaseFunction):
    """Gets your public key, which you need to encrypt secrets."""
    name = "Get a repository public key"
    url = "/repos/{owner}/{repo}/actions/secrets/public-key"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="accept", param_type=ParameterType.STRING, required=False),  # Setting to `application/vnd.github+json` is recommended.,
			Parameter(name="owner", param_type=ParameterType.STRING, required=True),  # Repository owner.,
			Parameter(name="repo", param_type=ParameterType.STRING, required=True),  # Repository name.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(name="key_id", param_type=OutputParameterType.STRING, is_array=False),  # ID of the public key.,
			OutputParameter(name="key", param_type=OutputParameterType.STRING, is_array=False),  # Public key for encryption.
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Get_a_repository_public_key.method, 
                                           Get_a_repository_public_key.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_a_repository_public_key': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Get_a_repository_secret(BaseFunction):
    """Gets a single repository secret without revealing its encrypted value."""
    name = "Get a repository secret"
    url = "/repos/{owner}/{repo}/actions/secrets/{secret_name}"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="accept", param_type=ParameterType.STRING, required=False),  # Setting to `application/vnd.github+json` is recommended.,
			Parameter(name="owner", param_type=ParameterType.STRING, required=True),  # Repository owner.,
			Parameter(name="repo", param_type=ParameterType.STRING, required=True),  # Repository name.,
			Parameter(name="secret_name", param_type=ParameterType.STRING, required=True),  # Secret name.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(name="name", param_type=OutputParameterType.STRING, is_array=False),  # Secret name.,
			OutputParameter(name="created_at", param_type=OutputParameterType.STRING, is_array=False),  # Created at timestamp.,
			OutputParameter(name="updated_at", param_type=OutputParameterType.STRING, is_array=False),  # Updated at timestamp.
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Get_a_repository_secret.method, 
                                           Get_a_repository_secret.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_a_repository_secret': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Create_or_update_a_repository_secret(BaseFunction):
    """Creates or updates a repository secret with an encrypted value."""
    name = "Create or update a repository secret"
    url = "/repos/{owner}/{repo}/actions/secrets/{secret_name}"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="accept", param_type=ParameterType.STRING, required=False),  # Setting to `application/vnd.github+json` is recommended.,
			Parameter(name="owner", param_type=ParameterType.STRING, required=True),  # Repository owner.,
			Parameter(name="repo", param_type=ParameterType.STRING, required=True),  # Repository name.,
			Parameter(name="secret_name", param_type=ParameterType.STRING, required=True),  # Secret name.,
			Parameter(name="encrypted_value", param_type=ParameterType.STRING, required=True),  # Value for the secret, encrypted with LibSodium.,
			Parameter(name="key_id", param_type=ParameterType.STRING, required=True),  # ID of the key used to encrypt the secret.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(name="status_code", param_type=OutputParameterType.INTEGER, is_array=False),  # 201 for creation, 204 for update.
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Create_or_update_a_repository_secret.method, 
                                           Create_or_update_a_repository_secret.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Create_or_update_a_repository_secret': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Delete_a_repository_secret(BaseFunction):
    """Deletes a secret in a repository."""
    name = "Delete a repository secret"
    url = "/repos/{owner}/{repo}/actions/secrets/{secret_name}"
    args_in_url = True
    method = DELETE

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="accept", param_type=ParameterType.STRING, required=False),  # Setting to `application/vnd.github+json` is recommended.,
			Parameter(name="owner", param_type=ParameterType.STRING, required=True),  # Repository owner.,
			Parameter(name="repo", param_type=ParameterType.STRING, required=True),  # Repository name.,
			Parameter(name="secret_name", param_type=ParameterType.STRING, required=True),  # Secret name.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(name="status_code", param_type=OutputParameterType.INTEGER, is_array=False),  # 204 success, no content.
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Delete_a_repository_secret.method, 
                                           Delete_a_repository_secret.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Delete_a_repository_secret': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class List_environment_secrets(BaseFunction):
    """Lists all secrets in an environment."""
    name = "List environment secrets"
    url = "/repositories/{repository_id}/environments/{environment_name}/secrets"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="accept", param_type=ParameterType.STRING, required=False),  # Setting to `application/vnd.github+json` is recommended.,
			Parameter(name="repository_id", param_type=ParameterType.INTEGER, required=True),  # Repository ID.,
			Parameter(name="environment_name", param_type=ParameterType.STRING, required=True),  # Environment name (URL encoded).,
			Parameter(name="accept", param_type=ParameterType.STRING, required=False),  # Setting to `application/vnd.github+json` is recommended.,
			Parameter(name="owner", param_type=ParameterType.STRING, required=True),  # Repository owner.,
			Parameter(name="repo", param_type=ParameterType.STRING, required=True),  # Repository name.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(name="total_count", param_type=OutputParameterType.INTEGER, is_array=False),  # Total number of secrets.,
			OutputParameter(name="secrets", param_type=OutputParameterType.OBJECT, is_array=True),  # Array of environment secret objects.,
			OutputParameter(name="name", param_type=OutputParameterType.STRING, is_array=False),  # Name of the secret.,
			OutputParameter(name="created_at", param_type=OutputParameterType.STRING, is_array=False),  # Timestamp of creation.,
			OutputParameter(name="updated_at", param_type=OutputParameterType.STRING, is_array=False),  # Timestamp of last update.
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(List_environment_secrets.method, 
                                           List_environment_secrets.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'List_environment_secrets': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Get_an_environment_public_key(BaseFunction):
    """Gets the public key for an environment."""
    name = "Get an environment public key"
    url = "/repositories/{repository_id}/environments/{environment_name}/secrets/public-key"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="accept", param_type=ParameterType.STRING, required=False),  # Setting to `application/vnd.github+json` is recommended.,
			Parameter(name="repository_id", param_type=ParameterType.INTEGER, required=True),  # Repository ID.,
			Parameter(name="environment_name", param_type=ParameterType.STRING, required=True),  # Environment name.,
			Parameter(name="owner", param_type=ParameterType.STRING, required=True),  # Repository owner.,
			Parameter(name="repo", param_type=ParameterType.STRING, required=True),  # Repository name.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(name="key_id", param_type=OutputParameterType.STRING, is_array=False),  # ID of the public key.,
			OutputParameter(name="key", param_type=OutputParameterType.STRING, is_array=False),  # Public key for encryption.
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Get_an_environment_public_key.method, 
                                           Get_an_environment_public_key.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_an_environment_public_key': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Get_an_environment_secret(BaseFunction):
    """Gets a single environment secret without revealing its encrypted value."""
    name = "Get an environment secret"
    url = "/repositories/{owner}/{repo}/environments/{environment_name}/secrets/{secret_name}"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="accept", param_type=ParameterType.STRING, required=False),  # Setting to `application/vnd.github+json` is recommended.,
			Parameter(name="owner", param_type=ParameterType.STRING, required=True),  # Repository owner.,
			Parameter(name="repo", param_type=ParameterType.STRING, required=True),  # Repository name.,
			Parameter(name="environment_name", param_type=ParameterType.STRING, required=True),  # Environment name.,
			Parameter(name="secret_name", param_type=ParameterType.STRING, required=True),  # Secret name.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(name="name", param_type=OutputParameterType.STRING, is_array=False),  # Secret name.,
			OutputParameter(name="created_at", param_type=OutputParameterType.STRING, is_array=False),  # Created at timestamp.,
			OutputParameter(name="updated_at", param_type=OutputParameterType.STRING, is_array=False),  # Updated at timestamp.
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Get_an_environment_secret.method, 
                                           Get_an_environment_secret.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_an_environment_secret': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Create_or_update_an_environment_secret(BaseFunction):
    """Creates or updates an environment secret."""
    name = "Create or update an environment secret"
    url = "/repositories/{owner}/{repo}/environments/{environment_name}/secrets/{secret_name}"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="accept", param_type=ParameterType.STRING, required=False),  # Setting to `application/vnd.github+json` is recommended.,
			Parameter(name="owner", param_type=ParameterType.STRING, required=True),  # Repository owner.,
			Parameter(name="repo", param_type=ParameterType.STRING, required=True),  # Repository name.,
			Parameter(name="environment_name", param_type=ParameterType.STRING, required=True),  # Environment name.,
			Parameter(name="secret_name", param_type=ParameterType.STRING, required=True),  # Secret name.,
			Parameter(name="encrypted_value", param_type=ParameterType.STRING, required=True),  # Encrypted secret value.,
			Parameter(name="key_id", param_type=ParameterType.STRING, required=True),  # ID of the key used to encrypt the secret.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(name="status_code", param_type=OutputParameterType.INTEGER, is_array=False),  # 201 for created, 204 for updated.
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Create_or_update_an_environment_secret.method, 
                                           Create_or_update_an_environment_secret.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Create_or_update_an_environment_secret': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Delete_an_environment_secret(BaseFunction):
    """Deletes an environment secret."""
    name = "Delete an environment secret"
    url = "/repositories/{owner}/{repo}/environments/{environment_name}/secrets/{secret_name}"
    args_in_url = True
    method = DELETE

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="accept", param_type=ParameterType.STRING, required=False),  # Setting to `application/vnd.github+json` is recommended.,
			Parameter(name="owner", param_type=ParameterType.STRING, required=True),  # Repository owner.,
			Parameter(name="repo", param_type=ParameterType.STRING, required=True),  # Repository name.,
			Parameter(name="environment_name", param_type=ParameterType.STRING, required=True),  # Environment name.,
			Parameter(name="secret_name", param_type=ParameterType.STRING, required=True),  # Secret name.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(name="status_code", param_type=OutputParameterType.INTEGER, is_array=False),  # 204 success, no content.
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Delete_an_environment_secret.method, 
                                           Delete_an_environment_secret.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Delete_an_environment_secret': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class List_selfhosted_runner_groups_for_an_organization(BaseFunction):
    """Lists all self-hosted runner groups configured in an organization."""
    name = "List self-hosted runner groups for an organization"
    url = "/orgs/{org}/actions/runner-groups"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="org", param_type=ParameterType.STRING, required=True),  # The organization name. The name is not case sensitive.,
			Parameter(name="per_page", param_type=ParameterType.INTEGER, required=False),  # The number of results per page (max 100). Default: 30.,
			Parameter(name="page", param_type=ParameterType.INTEGER, required=False),  # The page number of the results to fetch. Default: 1.,
			Parameter(name="visible_to_repository", param_type=ParameterType.STRING, required=False),  # Only return runner groups that are allowed to be used by this repository.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(name="total_count", param_type=OutputParameterType.INTEGER, is_array=False),  # Total count of runner groups.,
			OutputParameter(name="runner_groups", param_type=OutputParameterType.OBJECT, is_array=True),  # List of runner group objects.,
			OutputParameter(name="id", param_type=OutputParameterType.INTEGER, is_array=False),  # ID of the runner group.,
			OutputParameter(name="name", param_type=OutputParameterType.STRING, is_array=False),  # Name of the runner group.,
			OutputParameter(name="visibility", param_type=OutputParameterType.STRING, is_array=False),  # Visibility of the runner group.,
			OutputParameter(name="default", param_type=OutputParameterType.BOOLEAN, is_array=False),  # Whether the group is the default.,
			OutputParameter(name="runners_url", param_type=OutputParameterType.STRING, is_array=False),  # URL to list runners in this group.,
			OutputParameter(name="inherited", param_type=OutputParameterType.BOOLEAN, is_array=False),  # Whether the group is inherited.,
			OutputParameter(name="allows_public_repositories", param_type=OutputParameterType.BOOLEAN, is_array=False),  # Whether the group allows public repositories.,
			OutputParameter(name="restricted_to_workflows", param_type=OutputParameterType.BOOLEAN, is_array=False),  # Whether the group is restricted to workflows.,
			OutputParameter(name="selected_workflows", param_type=OutputParameterType.STRING, is_array=True),  # List of workflows associated with the group.,
			OutputParameter(name="workflow_restrictions_read_only", param_type=OutputParameterType.BOOLEAN, is_array=False),  # Whether workflow restrictions are read-only.
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(List_selfhosted_runner_groups_for_an_organization.method, 
                                           List_selfhosted_runner_groups_for_an_organization.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'List_selfhosted_runner_groups_for_an_organization': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Create_a_selfhosted_runner_group_for_an_organization(BaseFunction):
    """Creates a new self-hosted runner group for an organization."""
    name = "Create a self-hosted runner group for an organization"
    url = "/orgs/{org}/actions/runner-groups"
    args_in_url = True
    method = INSERT

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="org", param_type=ParameterType.STRING, required=True),  # The organization name. The name is not case sensitive.,
			Parameter(name="name", param_type=ParameterType.STRING, required=True),  # Name of the runner group.,
			Parameter(name="visibility", param_type=ParameterType.STRING, required=False),  # Visibility of the runner group. One of: `selected`, `all`, `private`. Default: `all`.,
			Parameter(name="selected_repository_ids", param_type=OutputParameterType.OBJECT, required=False),  # List of repository IDs that can access the runner group.,
			Parameter(name="runners", param_type=OutputParameterType.OBJECT, required=False),  # List of runner IDs to add to the group.,
			Parameter(name="allows_public_repositories", param_type=ParameterType.BOOLEAN, required=False),  # Whether the group can be used by public repositories. Default: false.,
			Parameter(name="restricted_to_workflows", param_type=ParameterType.BOOLEAN, required=False),  # Restrict to specific workflows. Default: false.,
			Parameter(name="selected_workflows", param_type=OutputParameterType.OBJECT, required=False),  # List of workflows.,
			Parameter(name="network_configuration_id", param_type=ParameterType.STRING, required=False),  # Identifier of network configuration.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(name="id", param_type=OutputParameterType.INTEGER, is_array=False),  # ID of the created group.,
			OutputParameter(name="name", param_type=OutputParameterType.STRING, is_array=False),  # Name of the group.,
			OutputParameter(name="visibility", param_type=OutputParameterType.STRING, is_array=False),  # Visibility of the group.,
			OutputParameter(name="default", param_type=OutputParameterType.BOOLEAN, is_array=False),  # Whether the group is default.,
			OutputParameter(name="selected_repositories_url", param_type=OutputParameterType.STRING, is_array=False),  # URL to list repositories.,
			OutputParameter(name="runners_url", param_type=OutputParameterType.STRING, is_array=False),  # URL to list runners.,
			OutputParameter(name="hosted_runners_url", param_type=OutputParameterType.STRING, is_array=False),  # URL to list hosted runners.,
			OutputParameter(name="network_configuration_id", param_type=OutputParameterType.STRING, is_array=False),  # Network configuration ID.,
			OutputParameter(name="inherited", param_type=OutputParameterType.BOOLEAN, is_array=False),  # Whether inherited.,
			OutputParameter(name="allows_public_repositories", param_type=OutputParameterType.BOOLEAN, is_array=False),  # Allows public repositories.,
			OutputParameter(name="restricted_to_workflows", param_type=OutputParameterType.BOOLEAN, is_array=False),  # Restricted to workflows.,
			OutputParameter(name="selected_workflows", param_type=OutputParameterType.STRING, is_array=True),  # List of workflows.,
			OutputParameter(name="workflow_restrictions_read_only", param_type=OutputParameterType.BOOLEAN, is_array=False),  # Workflow restrictions read-only.
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Create_a_selfhosted_runner_group_for_an_organization.method, 
                                           Create_a_selfhosted_runner_group_for_an_organization.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Create_a_selfhosted_runner_group_for_an_organization': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Get_a_selfhosted_runner_group_for_an_organization(BaseFunction):
    """Gets a specific self-hosted runner group."""
    name = "Get a self-hosted runner group for an organization"
    url = "/orgs/{org}/actions/runner-groups/{runner_group_id}"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="org", param_type=ParameterType.STRING, required=True),  # The organization name.,
			Parameter(name="runner_group_id", param_type=ParameterType.INTEGER, required=True),  # ID of the runner group.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(name="id", param_type=OutputParameterType.INTEGER, is_array=False),  # ID of the runner group.,
			OutputParameter(name="name", param_type=OutputParameterType.STRING, is_array=False),  # Name of the runner group.,
			OutputParameter(name="visibility", param_type=OutputParameterType.STRING, is_array=False),  # Visibility of the group.,
			OutputParameter(name="default", param_type=OutputParameterType.BOOLEAN, is_array=False),  # Whether default.,
			OutputParameter(name="selected_repositories_url", param_type=OutputParameterType.STRING, is_array=False),  # URL to list repositories.,
			OutputParameter(name="runners_url", param_type=OutputParameterType.STRING, is_array=False),  # URL to list runners.,
			OutputParameter(name="hosted_runners_url", param_type=OutputParameterType.STRING, is_array=False),  # URL to list hosted runners.,
			OutputParameter(name="network_configuration_id", param_type=OutputParameterType.STRING, is_array=False),  # Network configuration ID.,
			OutputParameter(name="inherited", param_type=OutputParameterType.BOOLEAN, is_array=False),  # Whether inherited.,
			OutputParameter(name="allows_public_repositories", param_type=OutputParameterType.BOOLEAN, is_array=False),  # Allows public repositories.,
			OutputParameter(name="restricted_to_workflows", param_type=OutputParameterType.BOOLEAN, is_array=False),  # Restricted to workflows.,
			OutputParameter(name="selected_workflows", param_type=OutputParameterType.STRING, is_array=True),  # List of workflows.,
			OutputParameter(name="workflow_restrictions_read_only", param_type=OutputParameterType.BOOLEAN, is_array=False),  # Workflow restrictions read-only.
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Get_a_selfhosted_runner_group_for_an_organization.method, 
                                           Get_a_selfhosted_runner_group_for_an_organization.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_a_selfhosted_runner_group_for_an_organization': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Update_a_selfhosted_runner_group_for_an_organization(BaseFunction):
    """Updates a self-hosted runner group."""
    name = "Update a self-hosted runner group for an organization"
    url = "/orgs/{org}/actions/runner-groups/{runner_group_id}"
    args_in_url = True
    method = UPDATE

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="org", param_type=ParameterType.STRING, required=True),  # The organization name.,
			Parameter(name="runner_group_id", param_type=ParameterType.INTEGER, required=True),  # ID of the runner group.,
			Parameter(name="name", param_type=ParameterType.STRING, required=False),  # New name of the runner group.,
			Parameter(name="visibility", param_type=ParameterType.STRING, required=False),  # Visibility of the runner group. One of: `selected`, `all`, `private`.,
			Parameter(name="allows_public_repositories", param_type=ParameterType.BOOLEAN, required=False),  # Allows public repositories.,
			Parameter(name="restricted_to_workflows", param_type=ParameterType.BOOLEAN, required=False),  # Restrict to workflows.,
			Parameter(name="selected_workflows", param_type=OutputParameterType.OBJECT, required=False),  # List of workflows.,
			Parameter(name="network_configuration_id", param_type=ParameterType.STRING, required=False),  # Network configuration ID.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(name="id", param_type=OutputParameterType.INTEGER, is_array=False),  # ID of the updated group.,
			OutputParameter(name="name", param_type=OutputParameterType.STRING, is_array=False),  # Name of the group.,
			OutputParameter(name="visibility", param_type=OutputParameterType.STRING, is_array=False),  # Visibility of the group.,
			OutputParameter(name="default", param_type=OutputParameterType.BOOLEAN, is_array=False),  # Whether default.,
			OutputParameter(name="selected_repositories_url", param_type=OutputParameterType.STRING, is_array=False),  # URL to list repositories.,
			OutputParameter(name="runners_url", param_type=OutputParameterType.STRING, is_array=False),  # URL to list runners.,
			OutputParameter(name="hosted_runners_url", param_type=OutputParameterType.STRING, is_array=False),  # URL to list hosted runners.,
			OutputParameter(name="network_configuration_id", param_type=OutputParameterType.STRING, is_array=False),  # Network configuration ID.,
			OutputParameter(name="inherited", param_type=OutputParameterType.BOOLEAN, is_array=False),  # Whether inherited.,
			OutputParameter(name="allows_public_repositories", param_type=OutputParameterType.BOOLEAN, is_array=False),  # Allows public repositories.,
			OutputParameter(name="restricted_to_workflows", param_type=OutputParameterType.BOOLEAN, is_array=False),  # Restricted to workflows.,
			OutputParameter(name="selected_workflows", param_type=OutputParameterType.STRING, is_array=True),  # List of workflows.,
			OutputParameter(name="workflow_restrictions_read_only", param_type=OutputParameterType.BOOLEAN, is_array=False),  # Workflow restrictions read-only.
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Update_a_selfhosted_runner_group_for_an_organization.method, 
                                           Update_a_selfhosted_runner_group_for_an_organization.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Update_a_selfhosted_runner_group_for_an_organization': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Delete_a_selfhosted_runner_group_from_an_organization(BaseFunction):
    """Deletes a self-hosted runner group."""
    name = "Delete a self-hosted runner group from an organization"
    url = "/orgs/{org}/actions/runner-groups/{runner_group_id}"
    args_in_url = True
    method = DELETE

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="org", param_type=ParameterType.STRING, required=True),  # The organization name.,
			Parameter(name="runner_group_id", param_type=ParameterType.INTEGER, required=True),  # ID of the runner group to delete.
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Delete_a_selfhosted_runner_group_from_an_organization.method, 
                                           Delete_a_selfhosted_runner_group_from_an_organization.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Delete_a_selfhosted_runner_group_from_an_organization': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class List_GitHubhosted_runners_for_an_organization(BaseFunction):
    """Lists GitHub-hosted runners for an organization."""
    name = "List GitHub-hosted runners for an organization"
    url = "/orgs/{org}/actions/hosted-runners"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="org", param_type=ParameterType.STRING, required=True),  # The organization name.,
			Parameter(name="per_page", param_type=ParameterType.INTEGER, required=False),  # Results per page. Default: 30.,
			Parameter(name="page", param_type=ParameterType.INTEGER, required=False),  # Page number. Default: 1.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(name="total_count", param_type=OutputParameterType.INTEGER, is_array=False),  # Total count of runners.,
			OutputParameter(name="runners", param_type=OutputParameterType.OBJECT, is_array=True),  # List of runner objects.,
			OutputParameter(name="id", param_type=OutputParameterType.INTEGER, is_array=False),  # ID of the runner.,
			OutputParameter(name="name", param_type=OutputParameterType.STRING, is_array=False),  # Name of the runner.,
			OutputParameter(name="runner_group_id", param_type=OutputParameterType.INTEGER, is_array=False),  # ID of the runner group.,
			OutputParameter(name="platform", param_type=OutputParameterType.STRING, is_array=False),  # Platform of the runner.,
			OutputParameter(name="status", param_type=OutputParameterType.STRING, is_array=False),  # Status of the runner.,
			OutputParameter(name="last_active_on", param_type=OutputParameterType.STRING, is_array=False),  # Last active date/time.
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(List_GitHubhosted_runners_for_an_organization.method, 
                                           List_GitHubhosted_runners_for_an_organization.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'List_GitHubhosted_runners_for_an_organization': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Get_a_GitHubhosted_runner_for_an_organization(BaseFunction):
    """Gets a GitHub-hosted runner configured in an organization."""
    name = "Get a GitHub-hosted runner for an organization"
    url = "/orgs/{org}/actions/hosted-runners/{hosted_runner_id}"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="org", param_type=ParameterType.STRING, required=True),  # The organization name.,
			Parameter(name="hosted_runner_id", param_type=ParameterType.INTEGER, required=True),  # ID of the hosted runner.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(name="id", param_type=OutputParameterType.INTEGER, is_array=False),  # ID of the runner.,
			OutputParameter(name="name", param_type=OutputParameterType.STRING, is_array=False),  # Name of the runner.,
			OutputParameter(name="runner_group_id", param_type=OutputParameterType.INTEGER, is_array=False),  # ID of the runner group.,
			OutputParameter(name="platform", param_type=OutputParameterType.STRING, is_array=False),  # Platform of the runner.,
			OutputParameter(name="status", param_type=OutputParameterType.STRING, is_array=False),  # Status of the runner.,
			OutputParameter(name="last_active_on", param_type=OutputParameterType.STRING, is_array=False),  # Last active date/time.
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Get_a_GitHubhosted_runner_for_an_organization.method, 
                                           Get_a_GitHubhosted_runner_for_an_organization.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_a_GitHubhosted_runner_for_an_organization': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Update_a_GitHubhosted_runner_for_an_organization(BaseFunction):
    """Updates a GitHub-hosted runner for an organization."""
    name = "Update a GitHub-hosted runner for an organization"
    url = "/orgs/{org}/actions/hosted-runners/{hosted_runner_id}"
    args_in_url = True
    method = UPDATE

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="org", param_type=ParameterType.STRING, required=True),  # The organization name.,
			Parameter(name="hosted_runner_id", param_type=ParameterType.INTEGER, required=True),  # ID of the hosted runner.,
			Parameter(name="name", param_type=ParameterType.STRING, required=False),  # Name of the runner.,
			Parameter(name="runner_group_id", param_type=ParameterType.INTEGER, required=False),  # ID of the runner group.,
			Parameter(name="maximum_runners", param_type=ParameterType.INTEGER, required=False),  # Maximum runners.,
			Parameter(name="enable_static_ip", param_type=ParameterType.BOOLEAN, required=False),  # Enable static IP.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(name="id", param_type=OutputParameterType.INTEGER, is_array=False),  # ID of the runner.,
			OutputParameter(name="name", param_type=OutputParameterType.STRING, is_array=False),  # Name of the runner.,
			OutputParameter(name="runner_group_id", param_type=OutputParameterType.INTEGER, is_array=False),  # ID of the runner group.,
			OutputParameter(name="platform", param_type=OutputParameterType.STRING, is_array=False),  # Platform of the runner.,
			OutputParameter(name="status", param_type=OutputParameterType.STRING, is_array=False),  # Status of the runner.,
			OutputParameter(name="last_active_on", param_type=OutputParameterType.STRING, is_array=False),  # Last active date/time.
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Update_a_GitHubhosted_runner_for_an_organization.method, 
                                           Update_a_GitHubhosted_runner_for_an_organization.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Update_a_GitHubhosted_runner_for_an_organization': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Delete_a_GitHubhosted_runner_for_an_organization(BaseFunction):
    """Deletes a GitHub-hosted runner for an organization."""
    name = "Delete a GitHub-hosted runner for an organization"
    url = "/orgs/{org}/actions/hosted-runners/{hosted_runner_id}"
    args_in_url = True
    method = DELETE

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="org", param_type=ParameterType.STRING, required=True),  # The organization name.,
			Parameter(name="hosted_runner_id", param_type=ParameterType.INTEGER, required=True),  # ID of the hosted runner.
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Delete_a_GitHubhosted_runner_for_an_organization.method, 
                                           Delete_a_GitHubhosted_runner_for_an_organization.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Delete_a_GitHubhosted_runner_for_an_organization': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Get_GitHub_Actions_permissions_for_an_organization(BaseFunction):
    """Gets the GitHub Actions permissions policy for repositories and allowed actions and reusable workflows in an organization."""
    name = "Get GitHub Actions permissions for an organization"
    url = "https://api.github.com/orgs/{org}/actions/permissions"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="accept", param_type=ParameterType.STRING, required=False),  # Setting to 'application/vnd.github+json' is recommended.,
			Parameter(name="org", param_type=ParameterType.STRING, required=True),  # The organization name. The name is not case sensitive.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(name="enabled_repositories", param_type=OutputParameterType.STRING, is_array=False),  # The repositories policy: 'all', 'none', or 'selected'.,
			OutputParameter(name="allowed_actions", param_type=OutputParameterType.STRING, is_array=False),  # The actions policy: 'all', 'local_only', or 'selected'.,
			OutputParameter(name="selected_actions_url", param_type=OutputParameterType.STRING, is_array=False),  # URL to the selected actions and workflows.
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Get_GitHub_Actions_permissions_for_an_organization.method, 
                                           Get_GitHub_Actions_permissions_for_an_organization.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_GitHub_Actions_permissions_for_an_organization': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Set_GitHub_Actions_permissions_for_an_organization(BaseFunction):
    """Sets the GitHub Actions permissions policy for repositories and allowed actions and reusable workflows in an organization."""
    name = "Set GitHub Actions permissions for an organization"
    url = "https://api.github.com/orgs/{org}/actions/permissions"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="accept", param_type=ParameterType.STRING, required=False),  # Setting to 'application/vnd.github+json' is recommended.,
			Parameter(name="org", param_type=ParameterType.STRING, required=True),  # The organization name. The name is not case sensitive.,
			Parameter(name="enabled_repositories", param_type=ParameterType.STRING, required=True),  # Policy that controls repositories: 'all', 'none', or 'selected'.,
			Parameter(name="allowed_actions", param_type=ParameterType.STRING, required=True),  # Policy for actions: 'all', 'local_only', or 'selected'.
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Set_GitHub_Actions_permissions_for_an_organization.method, 
                                           Set_GitHub_Actions_permissions_for_an_organization.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Set_GitHub_Actions_permissions_for_an_organization': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class List_selected_repositories_enabled_for_GitHub_Actions_in_an_organization(BaseFunction):
    """Lists the selected repositories that are enabled for GitHub Actions in an organization."""
    name = "List selected repositories enabled for GitHub Actions in an organization"
    url = "https://api.github.com/orgs/{org}/actions/permissions/repositories"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="accept", param_type=ParameterType.STRING, required=False),  # Setting to 'application/vnd.github+json' is recommended.,
			Parameter(name="org", param_type=ParameterType.STRING, required=True),  # The organization name. The name is not case sensitive.,
			Parameter(name="per_page", param_type=ParameterType.INTEGER, required=False),  # Results per page. Default: 30.,
			Parameter(name="page", param_type=ParameterType.INTEGER, required=False),  # Page number. Default: 1.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(name="total_count", param_type=OutputParameterType.INTEGER, is_array=False),  # Total number of repositories.,
			OutputParameter(name="repositories", param_type=OutputParameterType.OBJECT, is_array=True),  # List of repositories with details.
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(List_selected_repositories_enabled_for_GitHub_Actions_in_an_organization.method, 
                                           List_selected_repositories_enabled_for_GitHub_Actions_in_an_organization.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'List_selected_repositories_enabled_for_GitHub_Actions_in_an_organization': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Set_selected_repositories_enabled_for_GitHub_Actions_in_an_organization(BaseFunction):
    """Replaces the list of selected repositories that are enabled for GitHub Actions in an organization."""
    name = "Set selected repositories enabled for GitHub Actions in an organization"
    url = "https://api.github.com/orgs/{org}/actions/permissions/repositories"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="accept", param_type=ParameterType.STRING, required=False),  # Setting to 'application/vnd.github+json' is recommended.,
			Parameter(name="org", param_type=ParameterType.STRING, required=True),  # The organization name. The name is not case sensitive.,
			Parameter(name="selected_repository_ids", param_type=OutputParameterType.OBJECT, required=True),  # Array of repository IDs to enable.
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Set_selected_repositories_enabled_for_GitHub_Actions_in_an_organization.method, 
                                           Set_selected_repositories_enabled_for_GitHub_Actions_in_an_organization.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Set_selected_repositories_enabled_for_GitHub_Actions_in_an_organization': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Enable_a_selected_repository_for_GitHub_Actions_in_an_organization(BaseFunction):
    """Adds a repository to the list of selected repositories that are enabled for GitHub Actions."""
    name = "Enable a selected repository for GitHub Actions in an organization"
    url = "https://api.github.com/orgs/{org}/actions/permissions/repositories/{repository_id}"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="accept", param_type=ParameterType.STRING, required=False),  # Setting to 'application/vnd.github+json' is recommended.,
			Parameter(name="org", param_type=ParameterType.STRING, required=True),  # The organization name. The name is not case sensitive.,
			Parameter(name="repository_id", param_type=ParameterType.INTEGER, required=True),  # The ID of the repository.
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Enable_a_selected_repository_for_GitHub_Actions_in_an_organization.method, 
                                           Enable_a_selected_repository_for_GitHub_Actions_in_an_organization.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Enable_a_selected_repository_for_GitHub_Actions_in_an_organization': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Disable_a_selected_repository_for_GitHub_Actions_in_an_organization(BaseFunction):
    """Removes a repository from the list of enabled repositories for GitHub Actions."""
    name = "Disable a selected repository for GitHub Actions in an organization"
    url = "https://api.github.com/orgs/{org}/actions/permissions/repositories/{repository_id}"
    args_in_url = True
    method = DELETE

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="accept", param_type=ParameterType.STRING, required=False),  # Setting to 'application/vnd.github+json' is recommended.,
			Parameter(name="org", param_type=ParameterType.STRING, required=True),  # The organization name. The name is not case sensitive.,
			Parameter(name="repository_id", param_type=ParameterType.INTEGER, required=True),  # The ID of the repository.
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Disable_a_selected_repository_for_GitHub_Actions_in_an_organization.method, 
                                           Disable_a_selected_repository_for_GitHub_Actions_in_an_organization.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Disable_a_selected_repository_for_GitHub_Actions_in_an_organization': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Get_allowed_actions_and_reusable_workflows_for_an_organization(BaseFunction):
    """Gets the selected actions and reusable workflows that are allowed in an organization."""
    name = "Get allowed actions and reusable workflows for an organization"
    url = "https://api.github.com/orgs/{org}/actions/permissions/selected-actions"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="accept", param_type=ParameterType.STRING, required=False),  # Setting to 'application/vnd.github+json' is recommended.,
			Parameter(name="org", param_type=ParameterType.STRING, required=True),  # The organization name. The name is not case sensitive.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(name="github_owned_allowed", param_type=OutputParameterType.BOOLEAN, is_array=False),  # Whether GitHub-owned actions are allowed.,
			OutputParameter(name="verified_allowed", param_type=OutputParameterType.BOOLEAN, is_array=False),  # Whether actions from GitHub Marketplace verified creators are allowed.,
			OutputParameter(name="patterns_allowed", param_type=OutputParameterType.STRING, is_array=True),  # List of allowed patterns.
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Get_allowed_actions_and_reusable_workflows_for_an_organization.method, 
                                           Get_allowed_actions_and_reusable_workflows_for_an_organization.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_allowed_actions_and_reusable_workflows_for_an_organization': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Set_allowed_actions_and_reusable_workflows_for_an_organization(BaseFunction):
    """Sets the actions and reusable workflows that are allowed in an organization."""
    name = "Set allowed actions and reusable workflows for an organization"
    url = "https://api.github.com/orgs/{org}/actions/permissions/selected-actions"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="accept", param_type=ParameterType.STRING, required=False),  # Setting to 'application/vnd.github+json' is recommended.,
			Parameter(name="org", param_type=ParameterType.STRING, required=True),  # The organization name. The name is not case sensitive.,
			Parameter(name="github_owned_allowed", param_type=ParameterType.BOOLEAN, required=True),  # Whether GitHub-owned actions are allowed.,
			Parameter(name="verified_allowed", param_type=ParameterType.BOOLEAN, required=True),  # Whether actions from GitHub Marketplace verified creators are allowed.,
			Parameter(name="patterns_allowed", param_type=OutputParameterType.OBJECT, required=True),  # List of patterns allowed.
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Set_allowed_actions_and_reusable_workflows_for_an_organization.method, 
                                           Set_allowed_actions_and_reusable_workflows_for_an_organization.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Set_allowed_actions_and_reusable_workflows_for_an_organization': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Get_default_workflow_permissions_for_an_organization(BaseFunction):
    """Gets the default workflow permissions granted to the GITHUB_TOKEN in an organization."""
    name = "Get default workflow permissions for an organization"
    url = "https://api.github.com/orgs/{org}/actions/permissions/workflow"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="accept", param_type=ParameterType.STRING, required=False),  # Setting to 'application/vnd.github+json' is recommended.,
			Parameter(name="org", param_type=ParameterType.STRING, required=True),  # The organization name. The name is not case sensitive.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(name="default_workflow_permissions", param_type=OutputParameterType.STRING, is_array=False),  # Default permissions: 'read' or 'write'.,
			OutputParameter(name="can_approve_pull_request_reviews", param_type=OutputParameterType.BOOLEAN, is_array=False),  # Whether GitHub Actions can approve pull requests.
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Get_default_workflow_permissions_for_an_organization.method, 
                                           Get_default_workflow_permissions_for_an_organization.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_default_workflow_permissions_for_an_organization': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Set_default_workflow_permissions_for_an_organization(BaseFunction):
    """Sets the default workflow permissions in an organization."""
    name = "Set default workflow permissions for an organization"
    url = "https://api.github.com/orgs/{org}/actions/permissions/workflow"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="accept", param_type=ParameterType.STRING, required=False),  # Setting to 'application/vnd.github+json' is recommended.,
			Parameter(name="org", param_type=ParameterType.STRING, required=True),  # The organization name. The name is not case sensitive.,
			Parameter(name="default_workflow_permissions", param_type=ParameterType.STRING, required=True),  # Permissions: 'read' or 'write'.,
			Parameter(name="can_approve_pull_request_reviews", param_type=ParameterType.BOOLEAN, required=True),  # Whether GitHub Actions can approve pull requests.
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Set_default_workflow_permissions_for_an_organization.method, 
                                           Set_default_workflow_permissions_for_an_organization.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Set_default_workflow_permissions_for_an_organization': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Get_GitHub_Actions_permissions_for_a_repository(BaseFunction):
    """Gets the GitHub Actions permissions policy for a repository."""
    name = "Get GitHub Actions permissions for a repository"
    url = "https://api.github.com/repos/{owner}/{repo}/actions/permissions"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="accept", param_type=ParameterType.STRING, required=False),  # Setting to 'application/vnd.github+json' is recommended.,
			Parameter(name="owner", param_type=ParameterType.STRING, required=True),  # Repository owner.,
			Parameter(name="repo", param_type=ParameterType.STRING, required=True),  # Repository name.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(name="enabled", param_type=OutputParameterType.BOOLEAN, is_array=False),  # Whether Actions are enabled.,
			OutputParameter(name="allowed_actions", param_type=OutputParameterType.STRING, is_array=False),  # Allowed actions policy: 'all', 'selected'.,
			OutputParameter(name="selected_actions_url", param_type=OutputParameterType.STRING, is_array=False),  # URL to selected actions.
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Get_GitHub_Actions_permissions_for_a_repository.method, 
                                           Get_GitHub_Actions_permissions_for_a_repository.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_GitHub_Actions_permissions_for_a_repository': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Set_GitHub_Actions_permissions_for_a_repository(BaseFunction):
    """Sets the GitHub Actions permissions policy for a repository."""
    name = "Set GitHub Actions permissions for a repository"
    url = "https://api.github.com/repos/{owner}/{repo}/actions/permissions"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="accept", param_type=ParameterType.STRING, required=False),  # Setting to 'application/vnd.github+json' is recommended.,
			Parameter(name="owner", param_type=ParameterType.STRING, required=True),  # Repository owner.,
			Parameter(name="repo", param_type=ParameterType.STRING, required=True),  # Repository name.,
			Parameter(name="enabled", param_type=ParameterType.BOOLEAN, required=True),  # Whether Actions are enabled.,
			Parameter(name="allowed_actions", param_type=ParameterType.STRING, required=True),  # Allowed actions policy: 'all', 'local_only', 'selected'.
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Set_GitHub_Actions_permissions_for_a_repository.method, 
                                           Set_GitHub_Actions_permissions_for_a_repository.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Set_GitHub_Actions_permissions_for_a_repository': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Get_the_level_of_access_for_workflows_outside_of_the_repository(BaseFunction):
    """Gets the level of access for workflows outside of a repository."""
    name = "Get the level of access for workflows outside of the repository"
    url = "https://api.github.com/repos/{owner}/{repo}/actions/permissions/access"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="accept", param_type=ParameterType.STRING, required=False),  # Setting to 'application/vnd.github+json' is recommended.,
			Parameter(name="owner", param_type=ParameterType.STRING, required=True),  # Repository owner.,
			Parameter(name="repo", param_type=ParameterType.STRING, required=True),  # Repository name.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(name="access_level", param_type=OutputParameterType.STRING, is_array=False),  # Access level: 'none', 'user', 'organization'.
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Get_the_level_of_access_for_workflows_outside_of_the_repository.method, 
                                           Get_the_level_of_access_for_workflows_outside_of_the_repository.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_the_level_of_access_for_workflows_outside_of_the_repository': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Set_the_level_of_access_for_workflows_outside_of_the_repository(BaseFunction):
    """Sets the level of access for workflows outside of a repository."""
    name = "Set the level of access for workflows outside of the repository"
    url = "https://api.github.com/repos/{owner}/{repo}/actions/permissions/access"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="accept", param_type=ParameterType.STRING, required=False),  # Setting to 'application/vnd.github+json' is recommended.,
			Parameter(name="owner", param_type=ParameterType.STRING, required=True),  # Repository owner.,
			Parameter(name="repo", param_type=ParameterType.STRING, required=True),  # Repository name.,
			Parameter(name="access_level", param_type=ParameterType.STRING, required=True),  # Access level: 'none', 'user', 'organization'.
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Set_the_level_of_access_for_workflows_outside_of_the_repository.method, 
                                           Set_the_level_of_access_for_workflows_outside_of_the_repository.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Set_the_level_of_access_for_workflows_outside_of_the_repository': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Get_the_customization_template_for_an_OIDC_subject_claim_for_an_organization(BaseFunction):
    """Gets the customization template for an OpenID Connect (OIDC) subject claim."""
    name = "Get the customization template for an OIDC subject claim for an organization"
    url = "https://api.github.com/orgs/{org}/actions/oidc/customization/sub"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="org", param_type=ParameterType.STRING, required=True),  # The organization name. The name is not case sensitive.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(name="include_claim_keys", param_type=OutputParameterType.STRING, is_array=True),  # Array of claim keys included in the template.
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Get_the_customization_template_for_an_OIDC_subject_claim_for_an_organization.method, 
                                           Get_the_customization_template_for_an_OIDC_subject_claim_for_an_organization.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_the_customization_template_for_an_OIDC_subject_claim_for_an_organization': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Set_the_customization_template_for_an_OIDC_subject_claim_for_an_organization(BaseFunction):
    """Creates or updates the customization template for an OpenID Connect (OIDC) subject claim."""
    name = "Set the customization template for an OIDC subject claim for an organization"
    url = "https://api.github.com/orgs/{org}/actions/oidc/customization/sub"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="org", param_type=ParameterType.STRING, required=True),  # The organization name. The name is not case sensitive.,
			Parameter(name="include_claim_keys", param_type=ParameterType.STRING, required=True),  # Array of unique strings, each claim key can only contain alphanumeric characters and underscores.
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Set_the_customization_template_for_an_OIDC_subject_claim_for_an_organization.method, 
                                           Set_the_customization_template_for_an_OIDC_subject_claim_for_an_organization.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Set_the_customization_template_for_an_OIDC_subject_claim_for_an_organization': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Get_the_customization_template_for_an_OIDC_subject_claim_for_a_repository(BaseFunction):
    """Gets the customization template for an OpenID Connect (OIDC) subject claim for a repository."""
    name = "Get the customization template for an OIDC subject claim for a repository"
    url = "https://api.github.com/repos/{owner}/{repo}/actions/oidc/customization/sub"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="owner", param_type=ParameterType.STRING, required=True),  # The account owner of the repository. The name is not case sensitive.,
			Parameter(name="repo", param_type=ParameterType.STRING, required=True),  # The name of the repository without the `.git` extension. The name is not case sensitive.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(name="use_default", param_type=OutputParameterType.BOOLEAN, is_array=False),  # Indicates whether default template is used.,
			OutputParameter(name="include_claim_keys", param_type=OutputParameterType.STRING, is_array=True),  # Array of claim keys included in the template.
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Get_the_customization_template_for_an_OIDC_subject_claim_for_a_repository.method, 
                                           Get_the_customization_template_for_an_OIDC_subject_claim_for_a_repository.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_the_customization_template_for_an_OIDC_subject_claim_for_a_repository': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Set_the_customization_template_for_an_OIDC_subject_claim_for_a_repository(BaseFunction):
    """Sets the customization template and `opt-in` or `opt-out` flag for an OpenID Connect (OIDC) subject claim for a repository."""
    name = "Set the customization template for an OIDC subject claim for a repository"
    url = "https://api.github.com/repos/{owner}/{repo}/actions/oidc/customization/sub"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="owner", param_type=ParameterType.STRING, required=True),  # The account owner of the repository. The name is not case sensitive.,
			Parameter(name="repo", param_type=ParameterType.STRING, required=True),  # The name of the repository without the `.git` extension. The name is not case sensitive.,
			Parameter(name="use_default", param_type=ParameterType.BOOLEAN, required=True),  # Whether to use the default template or not. If `true`, the `include_claim_keys` field is ignored.,
			Parameter(name="include_claim_keys", param_type=ParameterType.STRING, required=False),  # Array of unique strings, each claim key can only contain alphanumeric characters and underscores.
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Set_the_customization_template_for_an_OIDC_subject_claim_for_a_repository.method, 
                                           Set_the_customization_template_for_an_OIDC_subject_claim_for_a_repository.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Set_the_customization_template_for_an_OIDC_subject_claim_for_a_repository': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class List_selfhosted_runners_for_an_organization(BaseFunction):
    """Lists all self-hosted runners configured in an organization."""
    name = "List self-hosted runners for an organization"
    url = "https://api.github.com/orgs/{org}/actions/runners"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="org", param_type=ParameterType.STRING, required=True),  # The organization name (not case sensitive).
        ]

    def get_output_schema(self):
        return [
            OutputParameter(name="total_count", param_type=OutputParameterType.INTEGER, is_array=False),  # Total number of runners.,
			OutputParameter(name="runners", param_type=OutputParameterType.OBJECT, is_array=True),  # List of runner objects.
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(List_selfhosted_runners_for_an_organization.method, 
                                           List_selfhosted_runners_for_an_organization.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'List_selfhosted_runners_for_an_organization': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class List_runner_applications_for_an_organization(BaseFunction):
    """Lists binaries for the runner application that you can download and run."""
    name = "List runner applications for an organization"
    url = "https://api.github.com/orgs/{org}/actions/runners/downloads"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="org", param_type=ParameterType.STRING, required=True),  # The organization name (not case sensitive).
        ]

    def get_output_schema(self):
        return [
            OutputParameter(name="downloader_versions", param_type=OutputParameterType.OBJECT, is_array=True),  # List of downloadable runner application binaries.
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(List_runner_applications_for_an_organization.method, 
                                           List_runner_applications_for_an_organization.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'List_runner_applications_for_an_organization': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Create_configuration_for_a_justintime_runner_for_an_organization(BaseFunction):
    """Generates a configuration for a JIT runner in an organization."""
    name = "Create configuration for a just-in-time runner for an organization"
    url = "https://api.github.com/orgs/{org}/actions/runners/generate-jitconfig"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="org", param_type=ParameterType.STRING, required=True),  # The organization name (not case sensitive).,
			Parameter(name="name", param_type=ParameterType.STRING, required=True),  # The name of the new runner.,
			Parameter(name="runner_group_id", param_type=ParameterType.INTEGER, required=True),  # ID of the runner group.,
			Parameter(name="labels", param_type=OutputParameterType.OBJECT, required=True),  # Array of strings with labels.,
			Parameter(name="work_folder", param_type=ParameterType.STRING, required=False),  # Working directory relative to runner install directory.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(name="runner", param_type=OutputParameterType.OBJECT, is_array=False),  # Details of the generated runner.,
			OutputParameter(name="encoded_jit_config", param_type=OutputParameterType.STRING, is_array=False),  # Encoded JIT configuration.
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Create_configuration_for_a_justintime_runner_for_an_organization.method, 
                                           Create_configuration_for_a_justintime_runner_for_an_organization.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Create_configuration_for_a_justintime_runner_for_an_organization': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Create_a_registration_token_for_an_organization(BaseFunction):
    """Returns a token to register a self-hosted runner to an organization."""
    name = "Create a registration token for an organization"
    url = "https://api.github.com/orgs/{org}/actions/runners/registration-token"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="org", param_type=ParameterType.STRING, required=True),  # The organization name.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(name="token", param_type=OutputParameterType.STRING, is_array=False),  # Registration token.,
			OutputParameter(name="expires_at", param_type=OutputParameterType.STRING, is_array=False),  # Expiration time of the token.
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Create_a_registration_token_for_an_organization.method, 
                                           Create_a_registration_token_for_an_organization.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Create_a_registration_token_for_an_organization': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Create_a_remove_token_for_an_organization(BaseFunction):
    """Returns a token to remove a self-hosted runner from an organization."""
    name = "Create a remove token for an organization"
    url = "https://api.github.com/orgs/{org}/actions/runners/remove-token"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="org", param_type=ParameterType.STRING, required=True),  # The organization name.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(name="token", param_type=OutputParameterType.STRING, is_array=False),  # Removal token.,
			OutputParameter(name="expires_at", param_type=OutputParameterType.STRING, is_array=False),  # Expiration time of the token.
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Create_a_remove_token_for_an_organization.method, 
                                           Create_a_remove_token_for_an_organization.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Create_a_remove_token_for_an_organization': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Get_a_selfhosted_runner_for_an_organization(BaseFunction):
    """Gets a specific self-hosted runner in an organization."""
    name = "Get a self-hosted runner for an organization"
    url = "https://api.github.com/orgs/{org}/actions/runners/{runner_id}"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="org", param_type=ParameterType.STRING, required=True),  # Organization name.,
			Parameter(name="runner_id", param_type=ParameterType.INTEGER, required=True),  # Identifier of the runner.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(name="id", param_type=OutputParameterType.INTEGER, is_array=False),  # Runner ID.,
			OutputParameter(name="name", param_type=OutputParameterType.STRING, is_array=False),  # Runner name.,
			OutputParameter(name="os", param_type=OutputParameterType.STRING, is_array=False),  # Operating system.,
			OutputParameter(name="status", param_type=OutputParameterType.STRING, is_array=False),  # Runner status.,
			OutputParameter(name="busy", param_type=OutputParameterType.BOOLEAN, is_array=False),  # Whether the runner is busy.,
			OutputParameter(name="ephemeral", param_type=OutputParameterType.BOOLEAN, is_array=False),  # Is ephemeral runner.,
			OutputParameter(name="labels", param_type=OutputParameterType.OBJECT, is_array=True),  # Labels associated with the runner.
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Get_a_selfhosted_runner_for_an_organization.method, 
                                           Get_a_selfhosted_runner_for_an_organization.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_a_selfhosted_runner_for_an_organization': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Delete_a_selfhosted_runner_from_an_organization(BaseFunction):
    """Removes a self-hosted runner from an organization."""
    name = "Delete a self-hosted runner from an organization"
    url = "https://api.github.com/orgs/{org}/actions/runners/{runner_id}"
    args_in_url = True
    method = DELETE

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="org", param_type=ParameterType.STRING, required=True),  # Organization name.,
			Parameter(name="runner_id", param_type=ParameterType.INTEGER, required=True),  # Identifier of the runner to delete.
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Delete_a_selfhosted_runner_from_an_organization.method, 
                                           Delete_a_selfhosted_runner_from_an_organization.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Delete_a_selfhosted_runner_from_an_organization': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class List_labels_for_a_selfhosted_runner_for_an_organization(BaseFunction):
    """Lists labels for a self-hosted runner."""
    name = "List labels for a self-hosted runner for an organization"
    url = "https://api.github.com/orgs/{org}/actions/runners/{runner_id}/labels"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="org", param_type=ParameterType.STRING, required=True),  # Organization name.,
			Parameter(name="runner_id", param_type=ParameterType.INTEGER, required=True),  # ID of the runner.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(name="total_count", param_type=OutputParameterType.INTEGER, is_array=False),  # Total labels count.,
			OutputParameter(name="labels", param_type=OutputParameterType.OBJECT, is_array=True),  # List of labels.
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(List_labels_for_a_selfhosted_runner_for_an_organization.method, 
                                           List_labels_for_a_selfhosted_runner_for_an_organization.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'List_labels_for_a_selfhosted_runner_for_an_organization': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Add_custom_labels_to_a_selfhosted_runner_for_an_organization(BaseFunction):
    """Adds labels to a self-hosted runner in an organization."""
    name = "Add custom labels to a self-hosted runner for an organization"
    url = "https://api.github.com/orgs/{org}/actions/runners/{runner_id}/labels"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="org", param_type=ParameterType.STRING, required=True),  # Organization name.,
			Parameter(name="runner_id", param_type=ParameterType.INTEGER, required=True),  # ID of the runner.,
			Parameter(name="labels", param_type=OutputParameterType.OBJECT, required=True),  # Labels to add.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(name="total_count", param_type=OutputParameterType.INTEGER, is_array=False),  # Total labels after addition.,
			OutputParameter(name="labels", param_type=OutputParameterType.OBJECT, is_array=True),  # Updated list of labels.
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Add_custom_labels_to_a_selfhosted_runner_for_an_organization.method, 
                                           Add_custom_labels_to_a_selfhosted_runner_for_an_organization.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Add_custom_labels_to_a_selfhosted_runner_for_an_organization': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Set_custom_labels_for_a_selfhosted_runner_for_an_organization(BaseFunction):
    """Sets labels for a self-hosted runner in an organization, replacing existing labels."""
    name = "Set custom labels for a self-hosted runner for an organization"
    url = "https://api.github.com/orgs/{org}/actions/runners/{runner_id}/labels"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="org", param_type=ParameterType.STRING, required=True),  # Organization name.,
			Parameter(name="runner_id", param_type=ParameterType.INTEGER, required=True),  # ID of the runner.,
			Parameter(name="labels", param_type=OutputParameterType.OBJECT, required=True),  # New set of labels to assign.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(name="total_count", param_type=OutputParameterType.INTEGER, is_array=False),  # Total labels after setting.,
			OutputParameter(name="labels", param_type=OutputParameterType.OBJECT, is_array=True),  # Final list of labels.
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Set_custom_labels_for_a_selfhosted_runner_for_an_organization.method, 
                                           Set_custom_labels_for_a_selfhosted_runner_for_an_organization.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Set_custom_labels_for_a_selfhosted_runner_for_an_organization': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Remove_all_custom_labels_from_a_selfhosted_runner_for_an_organization(BaseFunction):
    """Removes all custom labels from a self-hosted runner in an organization."""
    name = "Remove all custom labels from a self-hosted runner for an organization"
    url = "https://api.github.com/orgs/{org}/actions/runners/{runner_id}/labels"
    args_in_url = True
    method = DELETE

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="org", param_type=ParameterType.STRING, required=True),  # Organization name.,
			Parameter(name="runner_id", param_type=ParameterType.INTEGER, required=True),  # ID of the runner.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(name="total_count", param_type=OutputParameterType.INTEGER, is_array=False),  # Remaining labels count.,
			OutputParameter(name="labels", param_type=OutputParameterType.OBJECT, is_array=True),  # Remaining labels.
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Remove_all_custom_labels_from_a_selfhosted_runner_for_an_organization.method, 
                                           Remove_all_custom_labels_from_a_selfhosted_runner_for_an_organization.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Remove_all_custom_labels_from_a_selfhosted_runner_for_an_organization': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Remove_a_custom_label_from_a_selfhosted_runner_for_an_organization(BaseFunction):
    """Removes a specific label from a self-hosted runner in an organization."""
    name = "Remove a custom label from a self-hosted runner for an organization"
    url = "https://api.github.com/orgs/{org}/actions/runners/{runner_id}/labels/{name}"
    args_in_url = True
    method = DELETE

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="org", param_type=ParameterType.STRING, required=True),  # Organization name.,
			Parameter(name="runner_id", param_type=ParameterType.INTEGER, required=True),  # Runner ID.,
			Parameter(name="name", param_type=ParameterType.STRING, required=True),  # Name of the label to remove.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(name="total_count", param_type=OutputParameterType.INTEGER, is_array=False),  # Remaining labels count.,
			OutputParameter(name="labels", param_type=OutputParameterType.OBJECT, is_array=True),  # Remaining labels.
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Remove_a_custom_label_from_a_selfhosted_runner_for_an_organization.method, 
                                           Remove_a_custom_label_from_a_selfhosted_runner_for_an_organization.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Remove_a_custom_label_from_a_selfhosted_runner_for_an_organization': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Get_a_job_for_a_workflow_run(BaseFunction):
    """Retrieve details of a specific workflow job."""
    name = "Get a job for a workflow run"
    url = "https://api.github.com/repos/{owner}/{repo}/actions/jobs/{job_id}"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="owner", param_type=ParameterType.STRING, required=True),  # The account owner of the repository.,
			Parameter(name="repo", param_type=ParameterType.STRING, required=True),  # The repository name.,
			Parameter(name="job_id", param_type=ParameterType.INTEGER, required=True),  # The unique identifier of the job.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(name="id", param_type=OutputParameterType.INTEGER, is_array=False),  # The ID of the job.,
			OutputParameter(name="run_id", param_type=OutputParameterType.INTEGER, is_array=False),  # The ID of the associated workflow run.,
			OutputParameter(name="run_url", param_type=OutputParameterType.STRING, is_array=False),  # URL of the workflow run.,
			OutputParameter(name="node_id", param_type=OutputParameterType.STRING, is_array=False),  # Node ID.,
			OutputParameter(name="head_sha", param_type=OutputParameterType.STRING, is_array=False),  # SHA of the head commit.,
			OutputParameter(name="url", param_type=OutputParameterType.STRING, is_array=False),  # API URL of the job.,
			OutputParameter(name="html_url", param_type=OutputParameterType.STRING, is_array=False),  # HTML URL of the job in GitHub.,
			OutputParameter(name="status", param_type=OutputParameterType.STRING, is_array=False),  # Status of the job.,
			OutputParameter(name="conclusion", param_type=OutputParameterType.STRING, is_array=False),  # Conclusion of the job.,
			OutputParameter(name="started_at", param_type=OutputParameterType.STRING, is_array=False),  # Timestamp when the job started.,
			OutputParameter(name="completed_at", param_type=OutputParameterType.STRING, is_array=False),  # Timestamp when the job completed.,
			OutputParameter(name="name", param_type=OutputParameterType.STRING, is_array=False),  # Name of the job.,
			OutputParameter(name="steps", param_type=OutputParameterType.OBJECT, is_array=True),  # List of steps in the job.,
			OutputParameter(name="check_run_url", param_type=OutputParameterType.STRING, is_array=False),  # URL for the associated check run.,
			OutputParameter(name="labels", param_type=OutputParameterType.STRING, is_array=True),  # Labels assigned to the job.,
			OutputParameter(name="runner_id", param_type=OutputParameterType.INTEGER, is_array=False),  # ID of the runner.,
			OutputParameter(name="runner_name", param_type=OutputParameterType.STRING, is_array=False),  # Name of the runner.,
			OutputParameter(name="runner_group_id", param_type=OutputParameterType.INTEGER, is_array=False),  # ID of the runner group.,
			OutputParameter(name="runner_group_name", param_type=OutputParameterType.STRING, is_array=False),  # Name of the runner group.,
			OutputParameter(name="workflow_name", param_type=OutputParameterType.STRING, is_array=False),  # Name of the workflow.,
			OutputParameter(name="head_branch", param_type=OutputParameterType.STRING, is_array=False),  # Head branch of the workflow.
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Get_a_job_for_a_workflow_run.method, 
                                           Get_a_job_for_a_workflow_run.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_a_job_for_a_workflow_run': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Download_job_logs_for_a_workflow_run(BaseFunction):
    """Download logs for a specific workflow job."""
    name = "Download job logs for a workflow run"
    url = "https://api.github.com/repos/{owner}/{repo}/actions/jobs/{job_id}/logs"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="owner", param_type=ParameterType.STRING, required=True),  # The account owner of the repository.,
			Parameter(name="repo", param_type=ParameterType.STRING, required=True),  # The repository name.,
			Parameter(name="job_id", param_type=ParameterType.INTEGER, required=True),  # The unique identifier of the job.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(name="redirect_url", param_type=OutputParameterType.STRING, is_array=False),  # URL to download logs.
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Download_job_logs_for_a_workflow_run.method, 
                                           Download_job_logs_for_a_workflow_run.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Download_job_logs_for_a_workflow_run': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class List_jobs_for_a_workflow_run_attempt(BaseFunction):
    """List jobs for a specific workflow run attempt."""
    name = "List jobs for a workflow run attempt"
    url = "https://api.github.com/repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/jobs"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="owner", param_type=ParameterType.STRING, required=True),  # Repository owner.,
			Parameter(name="repo", param_type=ParameterType.STRING, required=True),  # Repository name.,
			Parameter(name="run_id", param_type=ParameterType.INTEGER, required=True),  # Workflow run ID.,
			Parameter(name="attempt_number", param_type=ParameterType.INTEGER, required=True),  # Attempt number of the workflow run.,
			Parameter(name="per_page", param_type=ParameterType.INTEGER, required=False),  # Results per page (max 100).,
			Parameter(name="page", param_type=ParameterType.INTEGER, required=False),  # Page number.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(name="total_count", param_type=OutputParameterType.INTEGER, is_array=False),  # Total count of jobs.,
			OutputParameter(name="jobs", param_type=OutputParameterType.OBJECT, is_array=True),  # List of jobs.
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(List_jobs_for_a_workflow_run_attempt.method, 
                                           List_jobs_for_a_workflow_run_attempt.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'List_jobs_for_a_workflow_run_attempt': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class List_jobs_for_a_workflow_run(BaseFunction):
    """List all jobs for a specific workflow run."""
    name = "List jobs for a workflow run"
    url = "https://api.github.com/repos/{owner}/{repo}/actions/runs/{run_id}/jobs"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="owner", param_type=ParameterType.STRING, required=True),  # Repository owner.,
			Parameter(name="repo", param_type=ParameterType.STRING, required=True),  # Repository name.,
			Parameter(name="run_id", param_type=ParameterType.INTEGER, required=True),  # Workflow run ID.,
			Parameter(name="filter", param_type=ParameterType.STRING, required=False),  # Filter jobs by 'latest' or 'all'. Default is 'latest'.,
			Parameter(name="per_page", param_type=ParameterType.INTEGER, required=False),  # Results per page (max 100).,
			Parameter(name="page", param_type=ParameterType.INTEGER, required=False),  # Page number.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(name="total_count", param_type=OutputParameterType.INTEGER, is_array=False),  # Total number of jobs.,
			OutputParameter(name="jobs", param_type=OutputParameterType.OBJECT, is_array=True),  # List of jobs.
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(List_jobs_for_a_workflow_run.method, 
                                           List_jobs_for_a_workflow_run.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'List_jobs_for_a_workflow_run': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Rerun_a_job_from_a_workflow_run(BaseFunction):
    """Re-run a specific job in a workflow run."""
    name = "Re-run a job from a workflow run"
    url = "/repos/{owner}/{repo}/actions/jobs/{job_id}/rerun"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="owner", param_type=ParameterType.STRING, required=True),  # The account owner of the repository.,
			Parameter(name="repo", param_type=ParameterType.STRING, required=True),  # The name of the repository.,
			Parameter(name="job_id", param_type=ParameterType.INTEGER, required=True),  # The unique identifier of the job.,
			Parameter(name="enable_debug_logging", param_type=ParameterType.BOOLEAN, required=False),  # Whether to enable debug logging for the re-run. Default: false
        ]

    def get_output_schema(self):
        return [
            OutputParameter(name="status_code", param_type=OutputParameterType.STRING, is_array=False),  # HTTP response status code indicating success or failure.
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Rerun_a_job_from_a_workflow_run.method, 
                                           Rerun_a_job_from_a_workflow_run.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Rerun_a_job_from_a_workflow_run': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class List_workflow_runs_for_a_repository(BaseFunction):
    """Lists all workflow runs for a repository with optional filters."""
    name = "List workflow runs for a repository"
    url = "/repos/{owner}/{repo}/actions/runs"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="owner", param_type=ParameterType.STRING, required=True),  # The account owner of the repository.,
			Parameter(name="repo", param_type=ParameterType.STRING, required=True),  # The name of the repository.,
			Parameter(name="actor", param_type=ParameterType.STRING, required=False),  # Returns workflow runs created by this user.,
			Parameter(name="branch", param_type=ParameterType.STRING, required=False),  # Returns workflow runs associated with this branch.,
			Parameter(name="event", param_type=ParameterType.STRING, required=False),  # Returns workflow runs triggered by this event.,
			Parameter(name="status", param_type=ParameterType.STRING, required=False),  # Returns workflow runs with the specified status.,
			Parameter(name="per_page", param_type=ParameterType.INTEGER, required=False),  # Results per page (max 100). Default: 30.,
			Parameter(name="page", param_type=ParameterType.INTEGER, required=False),  # Page number of the results to fetch. Default: 1.,
			Parameter(name="created", param_type=ParameterType.STRING, required=False),  # Date range for creation, in ISO 8601 format.,
			Parameter(name="exclude_pull_requests", param_type=ParameterType.BOOLEAN, required=False),  # Whether to exclude pull request runs. Default: false.,
			Parameter(name="check_suite_id", param_type=ParameterType.INTEGER, required=False),  # Filter by check suite ID.,
			Parameter(name="head_sha", param_type=ParameterType.STRING, required=False),  # Filter by commit SHA.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(name="total_count", param_type=OutputParameterType.INTEGER, is_array=False),  # Total number of workflow runs.,
			OutputParameter(name="workflow_runs", param_type=OutputParameterType.OBJECT, is_array=True),  # List of workflow run objects.
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(List_workflow_runs_for_a_repository.method, 
                                           List_workflow_runs_for_a_repository.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'List_workflow_runs_for_a_repository': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Get_a_workflow_run(BaseFunction):
    """Get details of a specific workflow run."""
    name = "Get a workflow run"
    url = "/repos/{owner}/{repo}/actions/runs/{run_id}"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="owner", param_type=ParameterType.STRING, required=True),  # The account owner of the repository.,
			Parameter(name="repo", param_type=ParameterType.STRING, required=True),  # The name of the repository.,
			Parameter(name="run_id", param_type=ParameterType.INTEGER, required=True),  # The ID of the workflow run.,
			Parameter(name="exclude_pull_requests", param_type=ParameterType.BOOLEAN, required=False),  # Whether to exclude pull requests from the response. Default: false.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(name="id", param_type=OutputParameterType.INTEGER, is_array=False),  # ID of the workflow run.,
			OutputParameter(name="name", param_type=OutputParameterType.STRING, is_array=False),  # Name of the workflow.,
			OutputParameter(name="status", param_type=OutputParameterType.STRING, is_array=False),  # Status of the workflow run.,
			OutputParameter(name="conclusion", param_type=OutputParameterType.STRING, is_array=False),  # Conclusion of the workflow run.,
			OutputParameter(name="created_at", param_type=OutputParameterType.STRING, is_array=False),  # When the run was created.,
			OutputParameter(name="updated_at", param_type=OutputParameterType.STRING, is_array=False),  # When the run was last updated.
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Get_a_workflow_run.method, 
                                           Get_a_workflow_run.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_a_workflow_run': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Delete_a_workflow_run(BaseFunction):
    """Deletes a workflow run."""
    name = "Delete a workflow run"
    url = "/repos/{owner}/{repo}/actions/runs/{run_id}"
    args_in_url = True
    method = DELETE

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="owner", param_type=ParameterType.STRING, required=True),  # The account owner of the repository.,
			Parameter(name="repo", param_type=ParameterType.STRING, required=True),  # The name of the repository.,
			Parameter(name="run_id", param_type=ParameterType.INTEGER, required=True),  # The ID of the workflow run.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(name="status_code", param_type=OutputParameterType.STRING, is_array=False),  # HTTP response status code.
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Delete_a_workflow_run.method, 
                                           Delete_a_workflow_run.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Delete_a_workflow_run': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Get_the_review_history_for_a_workflow_run(BaseFunction):
    """Get the review history for a specific workflow run."""
    name = "Get the review history for a workflow run"
    url = "/repos/{owner}/{repo}/actions/runs/{run_id}/approvals"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="owner", param_type=ParameterType.STRING, required=True),  # The account owner of the repository.,
			Parameter(name="repo", param_type=ParameterType.STRING, required=True),  # The name of the repository.,
			Parameter(name="run_id", param_type=ParameterType.INTEGER, required=True),  # The ID of the workflow run.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(name="approvals", param_type=OutputParameterType.OBJECT, is_array=True),  # List of approval objects.
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Get_the_review_history_for_a_workflow_run.method, 
                                           Get_the_review_history_for_a_workflow_run.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_the_review_history_for_a_workflow_run': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Approve_a_workflow_run_for_a_fork_pull_request(BaseFunction):
    """Approve a workflow run for a fork pull request."""
    name = "Approve a workflow run for a fork pull request"
    url = "/repos/{owner}/{repo}/actions/runs/{run_id}/approve"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="owner", param_type=ParameterType.STRING, required=True),  # The account owner of the repository.,
			Parameter(name="repo", param_type=ParameterType.STRING, required=True),  # The name of the repository.,
			Parameter(name="run_id", param_type=ParameterType.INTEGER, required=True),  # The ID of the workflow run.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(name="status_code", param_type=OutputParameterType.STRING, is_array=False),  # HTTP response status code.
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Approve_a_workflow_run_for_a_fork_pull_request.method, 
                                           Approve_a_workflow_run_for_a_fork_pull_request.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Approve_a_workflow_run_for_a_fork_pull_request': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Rerun_a_workflow(BaseFunction):
    """Re-run a workflow run."""
    name = "Re-run a workflow"
    url = "/repos/{owner}/{repo}/actions/runs/{run_id}/rerun"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="owner", param_type=ParameterType.STRING, required=True),  # The account owner of the repository.,
			Parameter(name="repo", param_type=ParameterType.STRING, required=True),  # The name of the repository.,
			Parameter(name="run_id", param_type=ParameterType.INTEGER, required=True),  # The ID of the workflow run.,
			Parameter(name="enable_debug_logging", param_type=ParameterType.BOOLEAN, required=False),  # Whether to enable debug logging for the re-run. Default: false.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(name="status_code", param_type=OutputParameterType.STRING, is_array=False),  # HTTP response status code.
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Rerun_a_workflow.method, 
                                           Rerun_a_workflow.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Rerun_a_workflow': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Rerun_failed_jobs_from_a_workflow_run(BaseFunction):
    """Re-run all failed jobs in a workflow run."""
    name = "Re-run failed jobs from a workflow run"
    url = "/repos/{owner}/{repo}/actions/runs/{run_id}/rerun-failed-jobs"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="owner", param_type=ParameterType.STRING, required=True),  # The account owner of the repository.,
			Parameter(name="repo", param_type=ParameterType.STRING, required=True),  # The name of the repository.,
			Parameter(name="run_id", param_type=ParameterType.INTEGER, required=True),  # The ID of the workflow run.,
			Parameter(name="enable_debug_logging", param_type=ParameterType.BOOLEAN, required=False),  # Whether to enable debug logging for the re-run. Default: false.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(name="status_code", param_type=OutputParameterType.STRING, is_array=False),  # HTTP response status code.
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Rerun_failed_jobs_from_a_workflow_run.method, 
                                           Rerun_failed_jobs_from_a_workflow_run.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Rerun_failed_jobs_from_a_workflow_run': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Get_workflow_run_usage(BaseFunction):
    """Get the usage details of a workflow run."""
    name = "Get workflow run usage"
    url = "/repos/{owner}/{repo}/actions/runs/{run_id}/timing"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="owner", param_type=ParameterType.STRING, required=True),  # The account owner of the repository.,
			Parameter(name="repo", param_type=ParameterType.STRING, required=True),  # The name of the repository.,
			Parameter(name="run_id", param_type=ParameterType.INTEGER, required=True),  # The ID of the workflow run.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(name="billable", param_type=OutputParameterType.OBJECT, is_array=False),  # Billable minutes and total run time details.,
			OutputParameter(name="run_duration_ms", param_type=OutputParameterType.INTEGER, is_array=False),  # Total duration of the run in milliseconds.
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Get_workflow_run_usage.method, 
                                           Get_workflow_run_usage.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_workflow_run_usage': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class List_workflow_runs_for_a_workflow(BaseFunction):
    """List all workflow runs for a specific workflow."""
    name = "List workflow runs for a workflow"
    url = "https://api.github.com/repos/{owner}/{repo}/actions/workflows/{workflow_id}/runs"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="owner", param_type=ParameterType.STRING, required=True),  # The account owner of the repository.,
			Parameter(name="repo", param_type=ParameterType.STRING, required=True),  # The name of the repository.,
			Parameter(name="workflow_id", param_type=ParameterType.STRING, required=True),  # The ID of the workflow or its file name.,
			Parameter(name="actor", param_type=ParameterType.STRING, required=False),  # Return workflow runs for this user.,
			Parameter(name="branch", param_type=ParameterType.STRING, required=False),  # Return workflow runs associated with this branch.,
			Parameter(name="event", param_type=ParameterType.STRING, required=False),  # Return workflow runs triggered by this event.,
			Parameter(name="status", param_type=ParameterType.STRING, required=False),  # Return workflow runs with this status.,
			Parameter(name="per_page", param_type=ParameterType.INTEGER, required=False),  # Results per page (max 100). Default: 30.,
			Parameter(name="page", param_type=ParameterType.INTEGER, required=False),  # Page number of the results to fetch. Default: 1.,
			Parameter(name="created", param_type=ParameterType.STRING, required=False),  # Returns workflow runs created within the given date-time range.,
			Parameter(name="exclude_pull_requests", param_type=ParameterType.BOOLEAN, required=False),  # Omit pull requests from the results. Default: false.,
			Parameter(name="check_suite_id", param_type=ParameterType.INTEGER, required=False),  # Returns workflow runs with this check_suite_id.,
			Parameter(name="head_sha", param_type=ParameterType.STRING, required=False),  # Returns workflow runs associated with this head_sha.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(name="total_count", param_type=OutputParameterType.INTEGER, is_array=False),  # Total number of workflow runs.,
			OutputParameter(name="workflow_runs", param_type=OutputParameterType.OBJECT, is_array=True),  # List of workflow run objects.
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(List_workflow_runs_for_a_workflow.method, 
                                           List_workflow_runs_for_a_workflow.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'List_workflow_runs_for_a_workflow': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class List_workflow_runs_for_a_workflow_alternative_documentation_reference(BaseFunction):
    """Alternative reference for listing workflow runs."""
    name = "List workflow runs for a workflow (alternative documentation reference)"
    url = "https://api.github.com/repos/{owner}/{repo}/actions/workflows/{workflow_id}/runs"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="owner", param_type=ParameterType.STRING, required=True),  # The account owner of the repository.,
			Parameter(name="repo", param_type=ParameterType.STRING, required=True),  # The name of the repository.,
			Parameter(name="workflow_id", param_type=ParameterType.STRING, required=True),  # The ID of the workflow or its file name.,
			Parameter(name="actor", param_type=ParameterType.STRING, required=False),  # Return workflow runs for this user.,
			Parameter(name="branch", param_type=ParameterType.STRING, required=False),  # Return workflow runs associated with this branch.,
			Parameter(name="event", param_type=ParameterType.STRING, required=False),  # Return workflow run triggered by this event.,
			Parameter(name="status", param_type=ParameterType.STRING, required=False),  # Return workflow runs with this status.,
			Parameter(name="per_page", param_type=ParameterType.INTEGER, required=False),  # Number of results per page (max 100). Default: 30.,
			Parameter(name="page", param_type=ParameterType.INTEGER, required=False),  # Page number of the results. Default: 1.,
			Parameter(name="created", param_type=ParameterType.STRING, required=False),  # Filter workflow runs created within this date-time range.,
			Parameter(name="exclude_pull_requests", param_type=ParameterType.BOOLEAN, required=False),  # Exclude pull requests from results. Default: false.,
			Parameter(name="check_suite_id", param_type=ParameterType.INTEGER, required=False),  # Filter by check_suite_id.,
			Parameter(name="head_sha", param_type=ParameterType.STRING, required=False),  # Filter by associated head_sha.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(name="total_count", param_type=OutputParameterType.INTEGER, is_array=False),  # Total count of workflow runs.,
			OutputParameter(name="workflow_runs", param_type=OutputParameterType.OBJECT, is_array=True),  # Array of workflow run objects.
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(List_workflow_runs_for_a_workflow_alternative_documentation_reference.method, 
                                           List_workflow_runs_for_a_workflow_alternative_documentation_reference.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'List_workflow_runs_for_a_workflow_alternative_documentation_reference': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Get_GitHub_App_installation_tokens(BaseFunction):
    """Retrieve cache usage information for a specific organization."""
    name = "Get GitHub App installation tokens"
    url = "/rest/authentication-endpoints-available-for-github-app-installation-access-tokens#/orgs/{org}/actions/cache/usage"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="org", param_type=ParameterType.STRING, required=True),  # The organization name.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(name="total_usage_bytes", param_type=OutputParameterType.INTEGER, is_array=False),  # Total cache usage in bytes for the organization.,
			OutputParameter(name="total_count", param_type=OutputParameterType.INTEGER, is_array=False),  # Total number of cache usage entries.
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Get_GitHub_App_installation_tokens.method, 
                                           Get_GitHub_App_installation_tokens.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_GitHub_App_installation_tokens': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class List_repositories_with_GitHub_Actions_cache_usage_for_an_organization(BaseFunction):
    """Lists repositories with their GitHub Actions cache usage for a specified organization."""
    name = "List repositories with GitHub Actions cache usage for an organization"
    url = "/rest/authentication-endpoints-available-for-github-app-installation-access-tokens#/orgs/{org}/actions/cache/usage-by-repository"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="org", param_type=ParameterType.STRING, required=True),  # The organization name.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(name="repositories", param_type=OutputParameterType.OBJECT, is_array=True),  # List of repositories with cache usage details.,
			OutputParameter(name="repository_name", param_type=OutputParameterType.STRING, is_array=False),  # Repository name.,
			OutputParameter(name="cache_usage_bytes", param_type=OutputParameterType.INTEGER, is_array=False),  # Cache usage in bytes for the repository.,
			OutputParameter(name="cache_count", param_type=OutputParameterType.INTEGER, is_array=False),  # Number of cache entries for the repository.
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(List_repositories_with_GitHub_Actions_cache_usage_for_an_organization.method, 
                                           List_repositories_with_GitHub_Actions_cache_usage_for_an_organization.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'List_repositories_with_GitHub_Actions_cache_usage_for_an_organization': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class List_GitHubhosted_runners_for_an_organization(BaseFunction):
    """Returns a list of GitHub-hosted runners for the specified organization."""
    name = "List GitHub-hosted runners for an organization"
    url = "/rest/authentication-endpoints-available-for-github-app-installation-access-tokens#/orgs/{org}/actions/hosted-runners"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="org", param_type=ParameterType.STRING, required=True),  # The organization name.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(name="runners", param_type=OutputParameterType.OBJECT, is_array=True),  # List of GitHub-hosted runners.,
			OutputParameter(name="runner_id", param_type=OutputParameterType.INTEGER, is_array=False),  # Unique identifier for the runner.,
			OutputParameter(name="name", param_type=OutputParameterType.STRING, is_array=False),  # Name of the runner.,
			OutputParameter(name="os", param_type=OutputParameterType.STRING, is_array=False),  # Operating system of the runner.,
			OutputParameter(name="status", param_type=OutputParameterType.STRING, is_array=False),  # Current status of the runner.
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(List_GitHubhosted_runners_for_an_organization.method, 
                                           List_GitHubhosted_runners_for_an_organization.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'List_GitHubhosted_runners_for_an_organization': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Create_a_GitHubhosted_runner_for_an_organization(BaseFunction):
    """Creates a new GitHub-hosted runner for the specified organization."""
    name = "Create a GitHub-hosted runner for an organization"
    url = "/rest/authentication-endpoints-available-for-github-app-installation-access-tokens#/orgs/{org}/actions/hosted-runners"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="org", param_type=ParameterType.STRING, required=True),  # The organization name.,
			Parameter(name="name", param_type=ParameterType.STRING, required=True),  # Name for the new runner.,
			Parameter(name="os", param_type=ParameterType.STRING, required=True),  # Operating system for the runner.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(name="runner_id", param_type=OutputParameterType.INTEGER, is_array=False),  # Identifier for the created runner.,
			OutputParameter(name="name", param_type=OutputParameterType.STRING, is_array=False),  # Name of the runner.,
			OutputParameter(name="os", param_type=OutputParameterType.STRING, is_array=False),  # Operating system of the runner.,
			OutputParameter(name="status", param_type=OutputParameterType.STRING, is_array=False),  # Current status of the runner.
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Create_a_GitHubhosted_runner_for_an_organization.method, 
                                           Create_a_GitHubhosted_runner_for_an_organization.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Create_a_GitHubhosted_runner_for_an_organization': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class List_images_of_GitHubowned_hosted_runners(BaseFunction):
    """Lists available images of GitHub-owned hosted runners for the organization."""
    name = "List images of GitHub-owned hosted runners"
    url = "/rest/authentication-endpoints-available-for-github-app-installation-access-tokens#/orgs/{org}/actions/hosted-runners/images/github-owned"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="org", param_type=ParameterType.STRING, required=True),  # Organization name.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(name="images", param_type=OutputParameterType.STRING, is_array=True),  # List of GitHub-owned runner images.
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(List_images_of_GitHubowned_hosted_runners.method, 
                                           List_images_of_GitHubowned_hosted_runners.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'List_images_of_GitHubowned_hosted_runners': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class List_partner_images_of_hosted_runners(BaseFunction):
    """Lists available partner images of hosted runners for the organization."""
    name = "List partner images of hosted runners"
    url = "/rest/authentication-endpoints-available-for-github-app-installation-access-tokens#/orgs/{org}/actions/hosted-runners/images/partner"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="org", param_type=ParameterType.STRING, required=True),  # Organization name.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(name="images", param_type=OutputParameterType.STRING, is_array=True),  # List of partner runner images.
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(List_partner_images_of_hosted_runners.method, 
                                           List_partner_images_of_hosted_runners.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'List_partner_images_of_hosted_runners': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Get_limits_on_GitHubhosted_runners_for_an_organization(BaseFunction):
    """Retrieves limits on GitHub-hosted runners for the specified organization."""
    name = "Get limits on GitHub-hosted runners for an organization"
    url = "/rest/authentication-endpoints-available-for-github-app-installation-access-tokens#/orgs/{org}/actions/hosted-runners/limits"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="org", param_type=ParameterType.STRING, required=True),  # Organization name.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(name="limits", param_type=OutputParameterType.OBJECT, is_array=False),  # Limits information.
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Get_limits_on_GitHubhosted_runners_for_an_organization.method, 
                                           Get_limits_on_GitHubhosted_runners_for_an_organization.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_limits_on_GitHubhosted_runners_for_an_organization': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Get_machine_sizes_for_GitHubhosted_runners_in_an_organization(BaseFunction):
    """Lists the available machine sizes for GitHub-hosted runners in an organization."""
    name = "Get machine sizes for GitHub-hosted runners in an organization"
    url = "/rest/authentication-endpoints-available-for-github-app-installation-access-tokens#/orgs/{org}/actions/hosted-runners/machine-sizes"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="org", param_type=ParameterType.STRING, required=True),  # Organization name.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(name="machine_sizes", param_type=OutputParameterType.OBJECT, is_array=True),  # List of machine size specifications.
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Get_machine_sizes_for_GitHubhosted_runners_in_an_organization.method, 
                                           Get_machine_sizes_for_GitHubhosted_runners_in_an_organization.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_machine_sizes_for_GitHubhosted_runners_in_an_organization': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Get_available_platforms_for_GitHubhosted_runners(BaseFunction):
    """Lists the platforms available for GitHub-hosted runners in the specified organization."""
    name = "Get available platforms for GitHub-hosted runners"
    url = "/rest/authentication-endpoints-available-for-github-app-installation-access-tokens#/orgs/{org}/actions/hosted-runners/platforms"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="org", param_type=ParameterType.STRING, required=True),  # Organization name.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(name="platforms", param_type=OutputParameterType.STRING, is_array=True),  # Supported platforms for GitHub-hosted runners.
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Get_available_platforms_for_GitHubhosted_runners.method, 
                                           Get_available_platforms_for_GitHubhosted_runners.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_available_platforms_for_GitHubhosted_runners': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Get_details_of_a_specific_GitHubhosted_runner_for_an_organization(BaseFunction):
    """Retrieves details of a specific GitHub-hosted runner for an organization."""
    name = "Get details of a specific GitHub-hosted runner for an organization"
    url = "/rest/authentication-endpoints-available-for-github-app-installation-access-tokens#/orgs/{org}/actions/hosted-runners/{hosted_runner_id}"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="org", param_type=ParameterType.STRING, required=True),  # Organization name.,
			Parameter(name="hosted_runner_id", param_type=ParameterType.INTEGER, required=True),  # ID of the hosted runner.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(name="runner_id", param_type=OutputParameterType.INTEGER, is_array=False),  # ID of the runner.,
			OutputParameter(name="name", param_type=OutputParameterType.STRING, is_array=False),  # Name of the runner.,
			OutputParameter(name="os", param_type=OutputParameterType.STRING, is_array=False),  # Operating system of the runner.,
			OutputParameter(name="status", param_type=OutputParameterType.STRING, is_array=False),  # Current status of the runner.
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Get_details_of_a_specific_GitHubhosted_runner_for_an_organization.method, 
                                           Get_details_of_a_specific_GitHubhosted_runner_for_an_organization.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_details_of_a_specific_GitHubhosted_runner_for_an_organization': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Update_a_GitHubhosted_runner_for_an_organization(BaseFunction):
    """Updates details of a specific GitHub-hosted runner for an organization."""
    name = "Update a GitHub-hosted runner for an organization"
    url = "/rest/authentication-endpoints-available-for-github-app-installation-access-tokens#/orgs/{org}/actions/hosted-runners/{hosted_runner_id}"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="org", param_type=ParameterType.STRING, required=True),  # Organization name.,
			Parameter(name="hosted_runner_id", param_type=ParameterType.INTEGER, required=True),  # ID of the hosted runner.,
			Parameter(name="name", param_type=ParameterType.STRING, required=False),  # New name of the runner.,
			Parameter(name="status", param_type=ParameterType.STRING, required=False),  # New status of the runner.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(name="runner_id", param_type=OutputParameterType.INTEGER, is_array=False),  # ID of the runner.,
			OutputParameter(name="name", param_type=OutputParameterType.STRING, is_array=False),  # Updated name of the runner.,
			OutputParameter(name="status", param_type=OutputParameterType.STRING, is_array=False),  # Updated status of the runner.
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Update_a_GitHubhosted_runner_for_an_organization.method, 
                                           Update_a_GitHubhosted_runner_for_an_organization.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Update_a_GitHubhosted_runner_for_an_organization': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Delete_a_GitHubhosted_runner_from_an_organization(BaseFunction):
    """Removes a specific GitHub-hosted runner from the organization."""
    name = "Delete a GitHub-hosted runner from an organization"
    url = "/rest/authentication-endpoints-available-for-github-app-installation-access-tokens#/orgs/{org}/actions/hosted-runners/{hosted_runner_id}"
    args_in_url = True
    method = DELETE

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="org", param_type=ParameterType.STRING, required=True),  # Organization name.,
			Parameter(name="hosted_runner_id", param_type=ParameterType.INTEGER, required=True),  # ID of the hosted runner.
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Delete_a_GitHubhosted_runner_from_an_organization.method, 
                                           Delete_a_GitHubhosted_runner_from_an_organization.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Delete_a_GitHubhosted_runner_from_an_organization': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Get_OIDC_customizations_for_an_organization(BaseFunction):
    """Retrieves the OIDC customization template for the specified organization."""
    name = "Get OIDC customizations for an organization"
    url = "/rest/authentication-endpoints-available-for-github-app-installation-access-tokens#/orgs/{org}/actions/oidc/customization/sub"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="org", param_type=ParameterType.STRING, required=True),  # Organization name.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(name="customization", param_type=OutputParameterType.OBJECT, is_array=False),  # OIDC customization details.
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Get_OIDC_customizations_for_an_organization.method, 
                                           Get_OIDC_customizations_for_an_organization.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_OIDC_customizations_for_an_organization': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Set_OIDC_customizations_for_an_organization(BaseFunction):
    """Sets the OIDC customization template for the specified organization."""
    name = "Set OIDC customizations for an organization"
    url = "/rest/authentication-endpoints-available-for-github-app-installation-access-tokens#/orgs/{org}/actions/oidc/customization/sub"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="org", param_type=ParameterType.STRING, required=True),  # Organization name.,
			Parameter(name="template", param_type=OutputParameterType.OBJECT, required=True),  # OIDC customization template data.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(name="customization", param_type=OutputParameterType.OBJECT, is_array=False),  # Updated OIDC customization details.
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Set_OIDC_customizations_for_an_organization.method, 
                                           Set_OIDC_customizations_for_an_organization.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Set_OIDC_customizations_for_an_organization': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class listprivateregistriesforanorganization(BaseFunction):
    """"""
    name = "list-private-registries-for-an-organization"
    url = "https://api.github.com/orgs/{org}/private-registries"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="org", param_type=ParameterType.STRING, required=True),  # Name of the organization
        ]

    def get_output_schema(self):
        return [
            OutputParameter(name="registries", param_type=OutputParameterType.OBJECT, is_array=True),  # List of private registries
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(listprivateregistriesforanorganization.method, 
                                           listprivateregistriesforanorganization.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'listprivateregistriesforanorganization': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class createaprivateregistryforanorganization(BaseFunction):
    """"""
    name = "create-a-private-registry-for-an-organization"
    url = "https://api.github.com/orgs/{org}/private-registries"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="org", param_type=ParameterType.STRING, required=True),  # Name of the organization,
			Parameter(name="registry_name", param_type=ParameterType.STRING, required=True),  # Name of the private registry
        ]

    def get_output_schema(self):
        return [
            OutputParameter(name="registry", param_type=OutputParameterType.OBJECT, is_array=False),  # Details of the created private registry
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(createaprivateregistryforanorganization.method, 
                                           createaprivateregistryforanorganization.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'createaprivateregistryforanorganization': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class getprivateregistriespublickeyforanorganization(BaseFunction):
    """"""
    name = "get-private-registries-public-key-for-an-organization"
    url = "https://api.github.com/orgs/{org}/private-registries/public-key"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="org", param_type=ParameterType.STRING, required=True),  # Name of the organization
        ]

    def get_output_schema(self):
        return [
            OutputParameter(name="public_key", param_type=OutputParameterType.STRING, is_array=False),  # Public key used for encrypting secrets
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(getprivateregistriespublickeyforanorganization.method, 
                                           getprivateregistriespublickeyforanorganization.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'getprivateregistriespublickeyforanorganization': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class getaprivateregistryforanorganization(BaseFunction):
    """"""
    name = "get-a-private-registry-for-an-organization"
    url = "https://api.github.com/orgs/{org}/private-registries/{secret_name}"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="org", param_type=ParameterType.STRING, required=True),  # Name of the organization,
			Parameter(name="secret_name", param_type=ParameterType.STRING, required=True),  # Name of the secret
        ]

    def get_output_schema(self):
        return [
            OutputParameter(name="registry", param_type=OutputParameterType.OBJECT, is_array=False),  # Details of the private registry
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(getaprivateregistryforanorganization.method, 
                                           getaprivateregistryforanorganization.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'getaprivateregistryforanorganization': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class updateaprivateregistryforanorganization(BaseFunction):
    """"""
    name = "update-a-private-registry-for-an-organization"
    url = "https://api.github.com/orgs/{org}/private-registries/{secret_name}"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="org", param_type=ParameterType.STRING, required=True),  # Name of the organization,
			Parameter(name="secret_name", param_type=ParameterType.STRING, required=True),  # Name of the secret,
			Parameter(name="update_fields", param_type=OutputParameterType.OBJECT, required=True),  # Fields to update in the registry
        ]

    def get_output_schema(self):
        return [
            OutputParameter(name="updated_registry", param_type=OutputParameterType.OBJECT, is_array=False),  # Updated registry details
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(updateaprivateregistryforanorganization.method, 
                                           updateaprivateregistryforanorganization.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'updateaprivateregistryforanorganization': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class deleteaprivateregistryforanorganization(BaseFunction):
    """"""
    name = "delete-a-private-registry-for-an-organization"
    url = "https://api.github.com/orgs/{org}/private-registries/{secret_name}"
    args_in_url = True
    method = DELETE

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="org", param_type=ParameterType.STRING, required=True),  # Name of the organization,
			Parameter(name="secret_name", param_type=ParameterType.STRING, required=True),  # Name of the secret
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(deleteaprivateregistryforanorganization.method, 
                                           deleteaprivateregistryforanorganization.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'deleteaprivateregistryforanorganization': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class listorganizationprojects(BaseFunction):
    """"""
    name = "list-organization-projects"
    url = "https://api.github.com/orgs/{org}/projects"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="org", param_type=ParameterType.STRING, required=True),  # Organization name
        ]

    def get_output_schema(self):
        return [
            OutputParameter(name="projects", param_type=OutputParameterType.OBJECT, is_array=True),  # List of projects
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(listorganizationprojects.method, 
                                           listorganizationprojects.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'listorganizationprojects': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class createanorganizationproject(BaseFunction):
    """"""
    name = "create-an-organization-project"
    url = "https://api.github.com/orgs/{org}/projects"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="org", param_type=ParameterType.STRING, required=True),  # Organization name,
			Parameter(name="project_name", param_type=ParameterType.STRING, required=True),  # Name of the project
        ]

    def get_output_schema(self):
        return [
            OutputParameter(name="project", param_type=OutputParameterType.OBJECT, is_array=False),  # Created project details
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(createanorganizationproject.method, 
                                           createanorganizationproject.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'createanorganizationproject': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class getaprojectcard(BaseFunction):
    """"""
    name = "get-a-project-card"
    url = "https://api.github.com/projects/columns/cards/{card_id}"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="card_id", param_type=ParameterType.INTEGER, required=True),  # ID of the project card
        ]

    def get_output_schema(self):
        return [
            OutputParameter(name="card", param_type=OutputParameterType.OBJECT, is_array=False),  # Details of the project card
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(getaprojectcard.method, 
                                           getaprojectcard.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'getaprojectcard': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class updateanexistingprojectcard(BaseFunction):
    """"""
    name = "update-an-existing-project-card"
    url = "https://api.github.com/projects/columns/cards/{card_id}"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="card_id", param_type=ParameterType.INTEGER, required=True),  # ID of the project card,
			Parameter(name="update_fields", param_type=OutputParameterType.OBJECT, required=True),  # Fields to update in the card
        ]

    def get_output_schema(self):
        return [
            OutputParameter(name="updated_card", param_type=OutputParameterType.OBJECT, is_array=False),  # Updated project card details
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(updateanexistingprojectcard.method, 
                                           updateanexistingprojectcard.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'updateanexistingprojectcard': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class deleteaprojectcard(BaseFunction):
    """"""
    name = "delete-a-project-card"
    url = "https://api.github.com/projects/columns/cards/{card_id}"
    args_in_url = True
    method = DELETE

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="card_id", param_type=ParameterType.INTEGER, required=True),  # ID of the project card
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(deleteaprojectcard.method, 
                                           deleteaprojectcard.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'deleteaprojectcard': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class moveaprojectcard(BaseFunction):
    """"""
    name = "move-a-project-card"
    url = "https://api.github.com/projects/columns/cards/{card_id}/moves"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="card_id", param_type=ParameterType.INTEGER, required=True),  # ID of the card to move,
			Parameter(name="move_to", param_type=OutputParameterType.OBJECT, required=True),  # Destination location details
        ]

    def get_output_schema(self):
        return [
            OutputParameter(name="moved_card", param_type=OutputParameterType.OBJECT, is_array=False),  # Details of the moved card
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(moveaprojectcard.method, 
                                           moveaprojectcard.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'moveaprojectcard': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class getaprojectcolumn(BaseFunction):
    """"""
    name = "get-a-project-column"
    url = "https://api.github.com/projects/columns/{column_id}"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="column_id", param_type=ParameterType.INTEGER, required=True),  # ID of the column
        ]

    def get_output_schema(self):
        return [
            OutputParameter(name="column", param_type=OutputParameterType.OBJECT, is_array=False),  # Details of the project column
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(getaprojectcolumn.method, 
                                           getaprojectcolumn.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'getaprojectcolumn': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class updateanexistingprojectcolumn(BaseFunction):
    """"""
    name = "update-an-existing-project-column"
    url = "https://api.github.com/projects/columns/{column_id}"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="column_id", param_type=ParameterType.INTEGER, required=True),  # ID of the column,
			Parameter(name="update_fields", param_type=OutputParameterType.OBJECT, required=True),  # Fields to update in the column
        ]

    def get_output_schema(self):
        return [
            OutputParameter(name="updated_column", param_type=OutputParameterType.OBJECT, is_array=False),  # Updated project column details
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(updateanexistingprojectcolumn.method, 
                                           updateanexistingprojectcolumn.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'updateanexistingprojectcolumn': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class deleteaprojectcolumn(BaseFunction):
    """"""
    name = "delete-a-project-column"
    url = "https://api.github.com/projects/columns/{column_id}"
    args_in_url = True
    method = DELETE

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="column_id", param_type=ParameterType.INTEGER, required=True),  # ID of the column
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(deleteaprojectcolumn.method, 
                                           deleteaprojectcolumn.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'deleteaprojectcolumn': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class listprojectcards(BaseFunction):
    """"""
    name = "list-project-cards"
    url = "https://api.github.com/projects/columns/{column_id}/cards"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="column_id", param_type=ParameterType.INTEGER, required=True),  # ID of the column
        ]

    def get_output_schema(self):
        return [
            OutputParameter(name="cards", param_type=OutputParameterType.OBJECT, is_array=True),  # List of project cards
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(listprojectcards.method, 
                                           listprojectcards.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'listprojectcards': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class createaprojectcard(BaseFunction):
    """"""
    name = "create-a-project-card"
    url = "https://api.github.com/projects/columns/{column_id}/cards"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="column_id", param_type=ParameterType.INTEGER, required=True),  # ID of the column,
			Parameter(name="card_details", param_type=OutputParameterType.OBJECT, required=True),  # Details of the new card
        ]

    def get_output_schema(self):
        return [
            OutputParameter(name="card", param_type=OutputParameterType.OBJECT, is_array=False),  # Created project card
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(createaprojectcard.method, 
                                           createaprojectcard.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'createaprojectcard': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class moveaprojectcolumn(BaseFunction):
    """"""
    name = "move-a-project-column"
    url = "https://api.github.com/projects/columns/{column_id}/moves"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="column_id", param_type=ParameterType.INTEGER, required=True),  # ID of the column,
			Parameter(name="move_to", param_type=OutputParameterType.OBJECT, required=True),  # Destination location details
        ]

    def get_output_schema(self):
        return [
            OutputParameter(name="moved_column", param_type=OutputParameterType.OBJECT, is_array=False),  # Details of the moved column
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(moveaprojectcolumn.method, 
                                           moveaprojectcolumn.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'moveaprojectcolumn': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class getaproject(BaseFunction):
    """"""
    name = "get-a-project"
    url = "https://api.github.com/projects/{project_id}"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="project_id", param_type=ParameterType.INTEGER, required=True),  # ID of the project
        ]

    def get_output_schema(self):
        return [
            OutputParameter(name="project", param_type=OutputParameterType.OBJECT, is_array=False),  # Details of the project
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(getaproject.method, 
                                           getaproject.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'getaproject': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class updateaproject(BaseFunction):
    """"""
    name = "update-a-project"
    url = "https://api.github.com/projects/{project_id}"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="project_id", param_type=ParameterType.INTEGER, required=True),  # ID of the project,
			Parameter(name="update_fields", param_type=OutputParameterType.OBJECT, required=True),  # Fields to update in the project
        ]

    def get_output_schema(self):
        return [
            OutputParameter(name="updated_project", param_type=OutputParameterType.OBJECT, is_array=False),  # Updated project details
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(updateaproject.method, 
                                           updateaproject.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'updateaproject': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class deleteaproject(BaseFunction):
    """"""
    name = "delete-a-project"
    url = "https://api.github.com/projects/{project_id}"
    args_in_url = True
    method = DELETE

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="project_id", param_type=ParameterType.INTEGER, required=True),  # ID of the project
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(deleteaproject.method, 
                                           deleteaproject.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'deleteaproject': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class listprojectcollaborators(BaseFunction):
    """"""
    name = "list-project-collaborators"
    url = "https://api.github.com/projects/{project_id}/collaborators"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="project_id", param_type=ParameterType.INTEGER, required=True),  # ID of the project
        ]

    def get_output_schema(self):
        return [
            OutputParameter(name="collaborators", param_type=OutputParameterType.OBJECT, is_array=True),  # List of project collaborators
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(listprojectcollaborators.method, 
                                           listprojectcollaborators.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'listprojectcollaborators': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class addprojectcollaborator(BaseFunction):
    """"""
    name = "add-project-collaborator"
    url = "https://api.github.com/projects/{project_id}/collaborators/{username}"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="project_id", param_type=ParameterType.INTEGER, required=True),  # ID of the project,
			Parameter(name="username", param_type=ParameterType.STRING, required=True),  # Username of the collaborator
        ]

    def get_output_schema(self):
        return [
            OutputParameter(name="status", param_type=OutputParameterType.STRING, is_array=False),  # Status message
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(addprojectcollaborator.method, 
                                           addprojectcollaborator.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'addprojectcollaborator': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class removeuserasacollaborator(BaseFunction):
    """"""
    name = "remove-user-as-a-collaborator"
    url = "https://api.github.com/projects/{project_id}/collaborators/{username}"
    args_in_url = True
    method = DELETE

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="project_id", param_type=ParameterType.INTEGER, required=True),  # ID of the project,
			Parameter(name="username", param_type=ParameterType.STRING, required=True),  # Username of the collaborator
        ]

    def get_output_schema(self):
        return [
            OutputParameter(name="status", param_type=OutputParameterType.STRING, is_array=False),  # Status message
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(removeuserasacollaborator.method, 
                                           removeuserasacollaborator.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'removeuserasacollaborator': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class getallrequestedreviewersforapullrequest(BaseFunction):
    """"""
    name = "get-all-requested-reviewers-for-a-pull-request"
    url = "https://api.github.com/repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="owner", param_type=ParameterType.STRING, required=True),  # Repository owner,
			Parameter(name="repo", param_type=ParameterType.STRING, required=True),  # Repository name,
			Parameter(name="pull_number", param_type=ParameterType.INTEGER, required=True),  # Pull request number
        ]

    def get_output_schema(self):
        return [
            OutputParameter(name="reviewers", param_type=OutputParameterType.STRING, is_array=True),  # List of reviewer usernames
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(getallrequestedreviewersforapullrequest.method, 
                                           getallrequestedreviewersforapullrequest.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'getallrequestedreviewersforapullrequest': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class requestreviewersforapullrequest(BaseFunction):
    """"""
    name = "request-reviewers-for-a-pull-request"
    url = "https://api.github.com/repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="owner", param_type=ParameterType.STRING, required=True),  # Repository owner,
			Parameter(name="repo", param_type=ParameterType.STRING, required=True),  # Repository name,
			Parameter(name="pull_number", param_type=ParameterType.INTEGER, required=True),  # Pull request number,
			Parameter(name="reviewers", param_type=OutputParameterType.OBJECT, required=True),  # List of reviewers to add
        ]

    def get_output_schema(self):
        return [
            OutputParameter(name="status", param_type=OutputParameterType.STRING, is_array=False),  # Status message
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(requestreviewersforapullrequest.method, 
                                           requestreviewersforapullrequest.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'requestreviewersforapullrequest': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class removerequestedreviewersfromapullrequest(BaseFunction):
    """"""
    name = "remove-requested-reviewers-from-a-pull-request"
    url = "https://api.github.com/repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers"
    args_in_url = True
    method = DELETE

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="owner", param_type=ParameterType.STRING, required=True),  # Repository owner,
			Parameter(name="repo", param_type=ParameterType.STRING, required=True),  # Repository name,
			Parameter(name="pull_number", param_type=ParameterType.INTEGER, required=True),  # Pull request number,
			Parameter(name="reviewers", param_type=OutputParameterType.OBJECT, required=True),  # List of reviewers to remove
        ]

    def get_output_schema(self):
        return [
            OutputParameter(name="status", param_type=OutputParameterType.STRING, is_array=False),  # Status message
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(removerequestedreviewersfromapullrequest.method, 
                                           removerequestedreviewersfromapullrequest.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'removerequestedreviewersfromapullrequest': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Actions__Get_GitHub_Actions_Cache_Usage_for_an_Organization(BaseFunction):
    """Retrieves cache usage information for an organization."""
    name = "Actions - Get GitHub Actions Cache Usage for an Organization"
    url = "/en/rest/actions/cache#get-github-actions-cache-usage-for-an-organization"
    args_in_url = False
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="org", param_type=ParameterType.STRING, required=True),  # Name of the organization.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(name="total_usage_bytes", param_type=OutputParameterType.INTEGER, is_array=False),  # Total cache usage in bytes.,
			OutputParameter(name="repository_usage", param_type=OutputParameterType.OBJECT, is_array=True),  # Usage per repository.
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Actions__Get_GitHub_Actions_Cache_Usage_for_an_Organization.method, 
                                           Actions__Get_GitHub_Actions_Cache_Usage_for_an_Organization.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Actions__Get_GitHub_Actions_Cache_Usage_for_an_Organization': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Actions__List_repositories_with_cache_usage_in_an_organization(BaseFunction):
    """Lists repositories in an organization with cache usage details."""
    name = "Actions - List repositories with cache usage in an organization"
    url = "/en/rest/actions/cache#list-repositories-with-github-actions-cache-usage-for-an-organization"
    args_in_url = False
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="org", param_type=ParameterType.STRING, required=True),  # Organization name.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(name="repositories", param_type=OutputParameterType.OBJECT, is_array=True),  # List of repositories with cache usage.
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Actions__List_repositories_with_cache_usage_in_an_organization.method, 
                                           Actions__List_repositories_with_cache_usage_in_an_organization.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Actions__List_repositories_with_cache_usage_in_an_organization': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Actions__List_GitHubhosted_runners_for_an_organization(BaseFunction):
    """Retrieves list of hosted runners for an organization."""
    name = "Actions - List GitHub-hosted runners for an organization"
    url = "/en/rest/actions/hosted-runners#list-github-hosted-runners-for-an-organization"
    args_in_url = False
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="org", param_type=ParameterType.STRING, required=True),  # Organization name.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(name="runners", param_type=OutputParameterType.OBJECT, is_array=True),  # List of GitHub-hosted runners.
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Actions__List_GitHubhosted_runners_for_an_organization.method, 
                                           Actions__List_GitHubhosted_runners_for_an_organization.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Actions__List_GitHubhosted_runners_for_an_organization': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Actions__Create_a_GitHubhosted_runner_for_an_organization(BaseFunction):
    """Creates a new GitHub-hosted runner for the specified organization."""
    name = "Actions - Create a GitHub-hosted runner for an organization"
    url = "/en/rest/actions/hosted-runners#create-a-github-hosted-runner-for-an-organization"
    args_in_url = False
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="org", param_type=ParameterType.STRING, required=True),  # Organization name.,
			Parameter(name="runner_details", param_type=OutputParameterType.OBJECT, required=True),  # Details of the runner to create.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(name="runner_id", param_type=OutputParameterType.INTEGER, is_array=False),  # ID of the created runner.
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Actions__Create_a_GitHubhosted_runner_for_an_organization.method, 
                                           Actions__Create_a_GitHubhosted_runner_for_an_organization.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Actions__Create_a_GitHubhosted_runner_for_an_organization': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Actions__Get_custom_OIDC_subject_claim_template_for_an_organization(BaseFunction):
    """Retrieves the custom OIDC subject claim template for an organization."""
    name = "Actions - Get custom OIDC subject claim template for an organization"
    url = "/en/rest/actions/oidc#get-the-customization-template-for-an-oidc-subject-claim-for-an-organization"
    args_in_url = False
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="org", param_type=ParameterType.STRING, required=True),  # Organization name.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(name="template", param_type=OutputParameterType.STRING, is_array=False),  # The OIDC subject claim template.
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Actions__Get_custom_OIDC_subject_claim_template_for_an_organization.method, 
                                           Actions__Get_custom_OIDC_subject_claim_template_for_an_organization.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Actions__Get_custom_OIDC_subject_claim_template_for_an_organization': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Permissions_required_for_GitHub_Apps__GitHub_Docs(BaseFunction):
    """Documentation explaining permissions required for GitHub Apps."""
    name = "Permissions required for GitHub Apps - GitHub Docs"
    url = "https://docs.github.com/en/rest/authentication/permissions-required-for-github-apps-#0"
    args_in_url = False
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            OutputParameter(name="Permissions for GitHub Apps", param_type=OutputParameterType.OBJECT, is_array=True),  # Permissions details for GitHub Apps.
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Permissions_required_for_GitHub_Apps__GitHub_Docs.method, 
                                           Permissions_required_for_GitHub_Apps__GitHub_Docs.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Permissions_required_for_GitHub_Apps__GitHub_Docs': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class GET_orgsorginsightsapiroutestatsactor_typeactor_id(BaseFunction):
    """Retrieve route statistics insights for an organization actor."""
    name = "GET /orgs/{org}/insights/api/route-stats/{actor_type}/{actor_id}"
    url = "/orgs/{org}/insights/api/route-stats/{actor_type}/{actor_id}"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="org", param_type=ParameterType.STRING, required=True),  # Organization name.,
			Parameter(name="actor_type", param_type=ParameterType.STRING, required=True),  # Type of actor.,
			Parameter(name="actor_id", param_type=ParameterType.STRING, required=True),  # Actor identifier.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(name="response", param_type=OutputParameterType.OBJECT, is_array=True),  # Insight data with route statistics.
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(GET_orgsorginsightsapiroutestatsactor_typeactor_id.method, 
                                           GET_orgsorginsightsapiroutestatsactor_typeactor_id.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'GET_orgsorginsightsapiroutestatsactor_typeactor_id': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class GET_orgsorginsightsapisubjectstats(BaseFunction):
    """Retrieve subject statistics insights for an organization."""
    name = "GET /orgs/{org}/insights/api/subject-stats"
    url = "/orgs/{org}/insights/api/subject-stats"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="org", param_type=ParameterType.STRING, required=True),  # Organization name.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(name="response", param_type=OutputParameterType.OBJECT, is_array=True),  # Subject statistics insights.
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(GET_orgsorginsightsapisubjectstats.method, 
                                           GET_orgsorginsightsapisubjectstats.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'GET_orgsorginsightsapisubjectstats': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class GET_orgsorginsightsapisummarystats(BaseFunction):
    """Retrieve summary statistics insights for an organization."""
    name = "GET /orgs/{org}/insights/api/summary-stats"
    url = "/orgs/{org}/insights/api/summary-stats"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="org", param_type=ParameterType.STRING, required=True),  # Organization name.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(name="response", param_type=OutputParameterType.OBJECT, is_array=True),  # Summary statistics insights.
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(GET_orgsorginsightsapisummarystats.method, 
                                           GET_orgsorginsightsapisummarystats.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'GET_orgsorginsightsapisummarystats': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class GET_orgsorginsightsapisummarystatsusersuser_id(BaseFunction):
    """Retrieve user-specific summary statistics insights for an organization."""
    name = "GET /orgs/{org}/insights/api/summary-stats/users/{user_id}"
    url = "/orgs/{org}/insights/api/summary-stats/users/{user_id}"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="org", param_type=ParameterType.STRING, required=True),  # Organization name.,
			Parameter(name="user_id", param_type=ParameterType.STRING, required=True),  # User identifier.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(name="response", param_type=OutputParameterType.OBJECT, is_array=True),  # User-specific summary statistics.
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(GET_orgsorginsightsapisummarystatsusersuser_id.method, 
                                           GET_orgsorginsightsapisummarystatsusersuser_id.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'GET_orgsorginsightsapisummarystatsusersuser_id': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class GET_orgsorginsightsapisummarystatsactor_typeactor_id(BaseFunction):
    """Retrieve summary statistics for an organization actor."""
    name = "GET /orgs/{org}/insights/api/summary-stats/{actor_type}/{actor_id}"
    url = "/orgs/{org}/insights/api/summary-stats/{actor_type}/{actor_id}"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="org", param_type=ParameterType.STRING, required=True),  # Organization name.,
			Parameter(name="actor_type", param_type=ParameterType.STRING, required=True),  # Type of actor.,
			Parameter(name="actor_id", param_type=ParameterType.STRING, required=True),  # Actor identifier.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(name="response", param_type=OutputParameterType.OBJECT, is_array=True),  # Summary stats for an actor.
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(GET_orgsorginsightsapisummarystatsactor_typeactor_id.method, 
                                           GET_orgsorginsightsapisummarystatsactor_typeactor_id.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'GET_orgsorginsightsapisummarystatsactor_typeactor_id': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class GET_orgsorginsightsapitimestats(BaseFunction):
    """Retrieve time statistics insights for an organization."""
    name = "GET /orgs/{org}/insights/api/time-stats"
    url = "/orgs/{org}/insights/api/time-stats"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="org", param_type=ParameterType.STRING, required=True),  # Organization name.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(name="response", param_type=OutputParameterType.OBJECT, is_array=True),  # Time-based statistics data.
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(GET_orgsorginsightsapitimestats.method, 
                                           GET_orgsorginsightsapitimestats.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'GET_orgsorginsightsapitimestats': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class GET_orgsorginsightsapitimestatsusersuser_id(BaseFunction):
    """Retrieve time statistics for a specific user in an organization."""
    name = "GET /orgs/{org}/insights/api/time-stats/users/{user_id}"
    url = "/orgs/{org}/insights/api/time-stats/users/{user_id}"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="org", param_type=ParameterType.STRING, required=True),  # Organization name.,
			Parameter(name="user_id", param_type=ParameterType.STRING, required=True),  # User ID.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(name="response", param_type=OutputParameterType.OBJECT, is_array=True),  # Time-based statistics for user.
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(GET_orgsorginsightsapitimestatsusersuser_id.method, 
                                           GET_orgsorginsightsapitimestatsusersuser_id.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'GET_orgsorginsightsapitimestatsusersuser_id': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class GET_orgsorginsightsapitimestatsactor_typeactor_id(BaseFunction):
    """Retrieve time statistics for an organization actor."""
    name = "GET /orgs/{org}/insights/api/time-stats/{actor_type}/{actor_id}"
    url = "/orgs/{org}/insights/api/time-stats/{actor_type}/{actor_id}"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="org", param_type=ParameterType.STRING, required=True),  # Organization name.,
			Parameter(name="actor_type", param_type=ParameterType.STRING, required=True),  # Type of actor.,
			Parameter(name="actor_id", param_type=ParameterType.STRING, required=True),  # Actor ID.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(name="response", param_type=OutputParameterType.OBJECT, is_array=True),  # Time stats for an actor.
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(GET_orgsorginsightsapitimestatsactor_typeactor_id.method, 
                                           GET_orgsorginsightsapitimestatsactor_typeactor_id.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'GET_orgsorginsightsapitimestatsactor_typeactor_id': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class GET_orgsorginsightsapiuserstatsuser_id(BaseFunction):
    """Retrieve user statistics for an organization."""
    name = "GET /orgs/{org}/insights/api/user-stats/{user_id}"
    url = "/orgs/{org}/insights/api/user-stats/{user_id}"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="org", param_type=ParameterType.STRING, required=True),  # Organization name.,
			Parameter(name="user_id", param_type=ParameterType.STRING, required=True),  # User ID.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(name="response", param_type=OutputParameterType.OBJECT, is_array=True),  # User-specific statistics.
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(GET_orgsorginsightsapiuserstatsuser_id.method, 
                                           GET_orgsorginsightsapiuserstatsuser_id.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'GET_orgsorginsightsapiuserstatsuser_id': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class PATCH_orgsorgdependabotrepositoryaccess(BaseFunction):
    """Update repository access for Dependabot within an organization."""
    name = "PATCH /orgs/{org}/dependabot/repository-access"
    url = "/orgs/{org}/dependabot/repository-access"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="org", param_type=ParameterType.STRING, required=True),  # Organization name.,
			Parameter(name="repositories", param_type=OutputParameterType.OBJECT, required=True),  # Repositories access details.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(name="response", param_type=OutputParameterType.OBJECT, is_array=False),  # Update result.
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(PATCH_orgsorgdependabotrepositoryaccess.method, 
                                           PATCH_orgsorgdependabotrepositoryaccess.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'PATCH_orgsorgdependabotrepositoryaccess': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class PUT_orgsorgdependabotrepositoryaccessdefaultlevel(BaseFunction):
    """Set default repository access level for Dependabot."""
    name = "PUT /orgs/{org}/dependabot/repository-access/default-level"
    url = "/orgs/{org}/dependabot/repository-access/default-level"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="org", param_type=ParameterType.STRING, required=True),  # Organization name.,
			Parameter(name="default_level", param_type=ParameterType.STRING, required=True),  # Default access level for Dependabot.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(name="response", param_type=OutputParameterType.OBJECT, is_array=False),  # Set default access level result.
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(PUT_orgsorgdependabotrepositoryaccessdefaultlevel.method, 
                                           PUT_orgsorgdependabotrepositoryaccessdefaultlevel.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'PUT_orgsorgdependabotrepositoryaccessdefaultlevel': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class PATCH_orgsorg(BaseFunction):
    """Update an organization."""
    name = "PATCH /orgs/{org}"
    url = "/orgs/{org}"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="org", param_type=ParameterType.STRING, required=True),  # Organization name.,
			Parameter(name="update_fields", param_type=OutputParameterType.OBJECT, required=True),  # Fields to update.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(name="response", param_type=OutputParameterType.OBJECT, is_array=False),  # Updated organization data.
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(PATCH_orgsorg.method, 
                                           PATCH_orgsorg.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'PATCH_orgsorg': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class DELETE_orgsorg(BaseFunction):
    """Delete an organization."""
    name = "DELETE /orgs/{org}"
    url = "/orgs/{org}"
    args_in_url = True
    method = DELETE

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="org", param_type=ParameterType.STRING, required=True),  # Organization name.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(name="response", param_type=OutputParameterType.OBJECT, is_array=False),  # Deletion confirmation.
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(DELETE_orgsorg.method, 
                                           DELETE_orgsorg.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'DELETE_orgsorg': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class POST_orgsorgactionshostedrunners(BaseFunction):
    """Create a GitHub-hosted runner for an organization."""
    name = "POST /orgs/{org}/actions/hosted-runners"
    url = "/orgs/{org}/actions/hosted-runners"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="org", param_type=ParameterType.STRING, required=True),  # Organization name.,
			Parameter(name="runner_configuration", param_type=OutputParameterType.OBJECT, required=False),  # Configuration for hosted runners.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(name="response", param_type=OutputParameterType.OBJECT, is_array=True),  # List of hosted runners.
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(POST_orgsorgactionshostedrunners.method, 
                                           POST_orgsorgactionshostedrunners.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'POST_orgsorgactionshostedrunners': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class PATCH_orgsorgactionshostedrunnershosted_runner_id(BaseFunction):
    """Update a GitHub-hosted runner for an organization."""
    name = "PATCH /orgs/{org}/actions/hosted-runners/{hosted_runner_id}"
    url = "/orgs/{org}/actions/hosted-runners/{hosted_runner_id}"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="org", param_type=ParameterType.STRING, required=True),  # Organization name.,
			Parameter(name="hosted_runner_id", param_type=ParameterType.STRING, required=True),  # Hosted runner ID.,
			Parameter(name="update_fields", param_type=OutputParameterType.OBJECT, required=True),  # Fields to update for the runner.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(name="response", param_type=OutputParameterType.OBJECT, is_array=False),  # Updated runner data.
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(PATCH_orgsorgactionshostedrunnershosted_runner_id.method, 
                                           PATCH_orgsorgactionshostedrunnershosted_runner_id.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'PATCH_orgsorgactionshostedrunnershosted_runner_id': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class DELETE_orgsorgactionshostedrunnershosted_runner_id(BaseFunction):
    """Delete a GitHub-hosted runner for an organization."""
    name = "DELETE /orgs/{org}/actions/hosted-runners/{hosted_runner_id}"
    url = "/orgs/{org}/actions/hosted-runners/{hosted_runner_id}"
    args_in_url = True
    method = DELETE

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="org", param_type=ParameterType.STRING, required=True),  # Organization name.,
			Parameter(name="hosted_runner_id", param_type=ParameterType.STRING, required=True),  # Hosted runner ID.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(name="response", param_type=OutputParameterType.OBJECT, is_array=False),  # Deletion confirmation.
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(DELETE_orgsorgactionshostedrunnershosted_runner_id.method, 
                                           DELETE_orgsorgactionshostedrunnershosted_runner_id.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'DELETE_orgsorgactionshostedrunnershosted_runner_id': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class PUT_orgsorgactionsoidccustomizationsub(BaseFunction):
    """Set the customization template for an OIDC subject claim."""
    name = "PUT /orgs/{org}/actions/oidc/customization/sub"
    url = "/orgs/{org}/actions/oidc/customization/sub"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="org", param_type=ParameterType.STRING, required=True),  # Organization name.,
			Parameter(name="custom_template", param_type=OutputParameterType.OBJECT, required=True),  # Customization template.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(name="response", param_type=OutputParameterType.OBJECT, is_array=False),  # Setup result.
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(PUT_orgsorgactionsoidccustomizationsub.method, 
                                           PUT_orgsorgactionsoidccustomizationsub.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'PUT_orgsorgactionsoidccustomizationsub': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class PUT_orgsorgactionspermissions(BaseFunction):
    """Set GitHub Actions permissions for an organization."""
    name = "PUT /orgs/{org}/actions/permissions"
    url = "/orgs/{org}/actions/permissions"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="org", param_type=ParameterType.STRING, required=True),  # Organization name.,
			Parameter(name="permissions", param_type=OutputParameterType.OBJECT, required=True),  # Permissions settings.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(name="response", param_type=OutputParameterType.OBJECT, is_array=False),  # Permissions update result.
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(PUT_orgsorgactionspermissions.method, 
                                           PUT_orgsorgactionspermissions.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'PUT_orgsorgactionspermissions': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class PUT_orgsorgactionspermissionsrepositories(BaseFunction):
    """Enable repositories for GitHub Actions within an organization."""
    name = "PUT /orgs/{org}/actions/permissions/repositories"
    url = "/orgs/{org}/actions/permissions/repositories"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="org", param_type=ParameterType.STRING, required=True),  # Organization name.,
			Parameter(name="repositories", param_type=OutputParameterType.OBJECT, required=True),  # Repositories enabled for GitHub Actions.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(name="response", param_type=OutputParameterType.OBJECT, is_array=False),  # Repositories permissions update result.
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(PUT_orgsorgactionspermissionsrepositories.method, 
                                           PUT_orgsorgactionspermissionsrepositories.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'PUT_orgsorgactionspermissionsrepositories': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class PUT_orgsorgactionspermissionsrepositoriesrepository_id(BaseFunction):
    """Enable a specific repository for GitHub Actions in an organization."""
    name = "PUT /orgs/{org}/actions/permissions/repositories/{repository_id}"
    url = "/orgs/{org}/actions/permissions/repositories/{repository_id}"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="org", param_type=ParameterType.STRING, required=True),  # Organization name.,
			Parameter(name="repository_id", param_type=ParameterType.INTEGER, required=True),  # Repository ID.,
			Parameter(name="permissions", param_type=OutputParameterType.OBJECT, required=True),  # Permissions for the repository.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(name="response", param_type=OutputParameterType.OBJECT, is_array=False),  # Repository permission update result.
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(PUT_orgsorgactionspermissionsrepositoriesrepository_id.method, 
                                           PUT_orgsorgactionspermissionsrepositoriesrepository_id.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'PUT_orgsorgactionspermissionsrepositoriesrepository_id': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class DELETE_orgsorgactionspermissionsrepositoriesrepository_id(BaseFunction):
    """Disable a repository for GitHub Actions in an organization."""
    name = "DELETE /orgs/{org}/actions/permissions/repositories/{repository_id}"
    url = "/orgs/{org}/actions/permissions/repositories/{repository_id}"
    args_in_url = True
    method = DELETE

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="org", param_type=ParameterType.STRING, required=True),  # Organization name.,
			Parameter(name="repository_id", param_type=ParameterType.INTEGER, required=True),  # Repository ID.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(name="response", param_type=OutputParameterType.OBJECT, is_array=False),  # Repository permission removal result.
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(DELETE_orgsorgactionspermissionsrepositoriesrepository_id.method, 
                                           DELETE_orgsorgactionspermissionsrepositoriesrepository_id.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'DELETE_orgsorgactionspermissionsrepositoriesrepository_id': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class PUT_orgsorgactionspermissionsselectedactions(BaseFunction):
    """Set allowed actions and reusable workflows for an organization."""
    name = "PUT /orgs/{org}/actions/permissions/selected-actions"
    url = "/orgs/{org}/actions/permissions/selected-actions"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="org", param_type=ParameterType.STRING, required=True),  # Organization name.,
			Parameter(name="allowed_actions", param_type=OutputParameterType.OBJECT, required=True),  # Allowed actions and workflows.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(name="response", param_type=OutputParameterType.OBJECT, is_array=False),  # Selected actions permissions update result.
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(PUT_orgsorgactionspermissionsselectedactions.method, 
                                           PUT_orgsorgactionspermissionsselectedactions.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'PUT_orgsorgactionspermissionsselectedactions': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class PUT_orgsorgactionspermissionsworkflow(BaseFunction):
    """Set default workflow permissions for an organization."""
    name = "PUT /orgs/{org}/actions/permissions/workflow"
    url = "/orgs/{org}/actions/permissions/workflow"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="org", param_type=ParameterType.STRING, required=True),  # Organization name.,
			Parameter(name="permissions", param_type=OutputParameterType.OBJECT, required=True),  # Default workflow permissions.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(name="response", param_type=OutputParameterType.OBJECT, is_array=False),  # Workflow permissions update result.
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(PUT_orgsorgactionspermissionsworkflow.method, 
                                           PUT_orgsorgactionspermissionsworkflow.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'PUT_orgsorgactionspermissionsworkflow': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class GET_orgsorgcodesecurityconfigurations(BaseFunction):
    """Retrieve code security configurations for an organization."""
    name = "GET /orgs/{org}/code-security/configurations"
    url = "/orgs/{org}/code-security/configurations"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="org", param_type=ParameterType.STRING, required=True),  # Organization name.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(name="configurations", param_type=OutputParameterType.OBJECT, is_array=True),  # Code security configurations.
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(GET_orgsorgcodesecurityconfigurations.method, 
                                           GET_orgsorgcodesecurityconfigurations.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'GET_orgsorgcodesecurityconfigurations': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class POST_orgsorgcodesecurityconfigurations(BaseFunction):
    """Create a new code security configuration for an organization."""
    name = "POST /orgs/{org}/code-security/configurations"
    url = "/orgs/{org}/code-security/configurations"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="org", param_type=ParameterType.STRING, required=True),  # Organization name.,
			Parameter(name="configuration", param_type=OutputParameterType.OBJECT, required=True),  # Code security configuration to create.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(name="configuration", param_type=OutputParameterType.OBJECT, is_array=False),  # Created code security configuration.
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(POST_orgsorgcodesecurityconfigurations.method, 
                                           POST_orgsorgcodesecurityconfigurations.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'POST_orgsorgcodesecurityconfigurations': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class GET_orgsorgcodesecurityconfigurationsdefaults(BaseFunction):
    """Retrieve default code security configurations."""
    name = "GET /orgs/{org}/code-security/configurations/defaults"
    url = "/orgs/{org}/code-security/configurations/defaults"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="org", param_type=ParameterType.STRING, required=True),  # Organization name.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(name="defaults", param_type=OutputParameterType.OBJECT, is_array=True),  # Default code security configurations.
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(GET_orgsorgcodesecurityconfigurationsdefaults.method, 
                                           GET_orgsorgcodesecurityconfigurationsdefaults.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'GET_orgsorgcodesecurityconfigurationsdefaults': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class DELETE_orgsorgcodesecurityconfigurationsdetach(BaseFunction):
    """Detach code security configurations from repositories."""
    name = "DELETE /orgs/{org}/code-security/configurations/detach"
    url = "/orgs/{org}/code-security/configurations/detach"
    args_in_url = True
    method = DELETE

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="org", param_type=ParameterType.STRING, required=True),  # Organization name.,
			Parameter(name="configuration_ids", param_type=OutputParameterType.OBJECT, required=True),  # IDs of configurations to detach.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(name="detachment_result", param_type=OutputParameterType.OBJECT, is_array=False),  # Result of detach operation.
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(DELETE_orgsorgcodesecurityconfigurationsdetach.method, 
                                           DELETE_orgsorgcodesecurityconfigurationsdetach.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'DELETE_orgsorgcodesecurityconfigurationsdetach': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class GET_orgsorgcodesecurityconfigurationsconfiguration_id(BaseFunction):
    """Get a specific code security configuration."""
    name = "GET /orgs/{org}/code-security/configurations/{configuration_id}"
    url = "/orgs/{org}/code-security/configurations/{configuration_id}"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="org", param_type=ParameterType.STRING, required=True),  # Organization name.,
			Parameter(name="configuration_id", param_type=ParameterType.STRING, required=True),  # Configuration ID.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(name="configuration", param_type=OutputParameterType.OBJECT, is_array=False),  # Code security configuration details.
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(GET_orgsorgcodesecurityconfigurationsconfiguration_id.method, 
                                           GET_orgsorgcodesecurityconfigurationsconfiguration_id.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'GET_orgsorgcodesecurityconfigurationsconfiguration_id': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class PATCH_orgsorgcodesecurityconfigurationsconfiguration_id(BaseFunction):
    """Update a specific code security configuration."""
    name = "PATCH /orgs/{org}/code-security/configurations/{configuration_id}"
    url = "/orgs/{org}/code-security/configurations/{configuration_id}"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="org", param_type=ParameterType.STRING, required=True),  # Organization name.,
			Parameter(name="configuration_id", param_type=ParameterType.STRING, required=True),  # Configuration ID.,
			Parameter(name="update_fields", param_type=OutputParameterType.OBJECT, required=True),  # Fields to update in the configuration.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(name="updated_configuration", param_type=OutputParameterType.OBJECT, is_array=False),  # Updated configuration details.
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(PATCH_orgsorgcodesecurityconfigurationsconfiguration_id.method, 
                                           PATCH_orgsorgcodesecurityconfigurationsconfiguration_id.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'PATCH_orgsorgcodesecurityconfigurationsconfiguration_id': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class DELETE_orgsorgcodesecurityconfigurationsconfiguration_id(BaseFunction):
    """Delete a specific code security configuration."""
    name = "DELETE /orgs/{org}/code-security/configurations/{configuration_id}"
    url = "/orgs/{org}/code-security/configurations/{configuration_id}"
    args_in_url = True
    method = DELETE

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="org", param_type=ParameterType.STRING, required=True),  # Organization name.,
			Parameter(name="configuration_id", param_type=ParameterType.STRING, required=True),  # Configuration ID.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(name="deletion_result", param_type=OutputParameterType.OBJECT, is_array=False),  # Result of deletion.
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(DELETE_orgsorgcodesecurityconfigurationsconfiguration_id.method, 
                                           DELETE_orgsorgcodesecurityconfigurationsconfiguration_id.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'DELETE_orgsorgcodesecurityconfigurationsconfiguration_id': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class POST_orgsorgcodesecurityconfigurationsconfiguration_idattach(BaseFunction):
    """Attach a code security configuration to repositories."""
    name = "POST /orgs/{org}/code-security/configurations/{configuration_id}/attach"
    url = "/orgs/{org}/code-security/configurations/{configuration_id}/attach"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="org", param_type=ParameterType.STRING, required=True),  # Organization name.,
			Parameter(name="configuration_id", param_type=ParameterType.STRING, required=True),  # Configuration ID.,
			Parameter(name="repositories", param_type=OutputParameterType.OBJECT, required=True),  # Repositories to attach.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(name="attachment_result", param_type=OutputParameterType.OBJECT, is_array=False),  # Result of attaching configuration.
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(POST_orgsorgcodesecurityconfigurationsconfiguration_idattach.method, 
                                           POST_orgsorgcodesecurityconfigurationsconfiguration_idattach.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'POST_orgsorgcodesecurityconfigurationsconfiguration_idattach': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class PUT_orgsorgcodesecurityconfigurationsconfiguration_iddefaults(BaseFunction):
    """Set a code security configuration as default for an organization."""
    name = "PUT /orgs/{org}/code-security/configurations/{configuration_id}/defaults"
    url = "/orgs/{org}/code-security/configurations/{configuration_id}/defaults"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="org", param_type=ParameterType.STRING, required=True),  # Organization name.,
			Parameter(name="configuration_id", param_type=ParameterType.STRING, required=True),  # Configuration ID.,
			Parameter(name="defaults", param_type=OutputParameterType.OBJECT, required=True),  # Default settings.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(name="defaults_set", param_type=OutputParameterType.OBJECT, is_array=False),  # Result of setting defaults.
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(PUT_orgsorgcodesecurityconfigurationsconfiguration_iddefaults.method, 
                                           PUT_orgsorgcodesecurityconfigurationsconfiguration_iddefaults.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'PUT_orgsorgcodesecurityconfigurationsconfiguration_iddefaults': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class GET_orgsorgcodesecurityconfigurationsconfiguration_idrepositories(BaseFunction):
    """Get repositories associated with a code security configuration."""
    name = "GET /orgs/{org}/code-security/configurations/{configuration_id}/repositories"
    url = "/orgs/{org}/code-security/configurations/{configuration_id}/repositories"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="org", param_type=ParameterType.STRING, required=True),  # Organization name.,
			Parameter(name="configuration_id", param_type=ParameterType.STRING, required=True),  # Configuration ID.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(name="repositories", param_type=OutputParameterType.OBJECT, is_array=True),  # Repositories associated with the security configuration.
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(GET_orgsorgcodesecurityconfigurationsconfiguration_idrepositories.method, 
                                           GET_orgsorgcodesecurityconfigurationsconfiguration_idrepositories.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'GET_orgsorgcodesecurityconfigurationsconfiguration_idrepositories': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class POST_orgsorgcopilotbillingselected_teams(BaseFunction):
    """Add teams to Copilot billing for an organization."""
    name = "POST /orgs/{org}/copilot/billing/selected_teams"
    url = "/orgs/{org}/copilot/billing/selected_teams"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="org", param_type=ParameterType.STRING, required=True),  # Organization name.,
			Parameter(name="teams", param_type=OutputParameterType.OBJECT, required=True),  # Teams to add to Co-Pilot billing.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(name="response", param_type=OutputParameterType.OBJECT, is_array=False),  # Result of adding teams to billing.
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(POST_orgsorgcopilotbillingselected_teams.method, 
                                           POST_orgsorgcopilotbillingselected_teams.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'POST_orgsorgcopilotbillingselected_teams': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class DELETE_orgsorgcopilotbillingselected_teams(BaseFunction):
    """Remove teams from Co-Pilot billing for an organization."""
    name = "DELETE /orgs/{org}/copilot/billing/selected_teams"
    url = "/orgs/{org}/copilot/billing/selected_teams"
    args_in_url = True
    method = DELETE

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="org", param_type=ParameterType.STRING, required=True),  # Organization name.,
			Parameter(name="teams", param_type=OutputParameterType.OBJECT, required=True),  # Teams to remove from Co-Pilot billing.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(name="response", param_type=OutputParameterType.OBJECT, is_array=False),  # Result of removing teams from billing.
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(DELETE_orgsorgcopilotbillingselected_teams.method, 
                                           DELETE_orgsorgcopilotbillingselected_teams.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'DELETE_orgsorgcopilotbillingselected_teams': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class POST_orgsorgcopilotbillingselected_users(BaseFunction):
    """Add users to Copilot billing for an organization."""
    name = "POST /orgs/{org}/copilot/billing/selected_users"
    url = "/orgs/{org}/copilot/billing/selected_users"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="org", param_type=ParameterType.STRING, required=True),  # Organization name.,
			Parameter(name="users", param_type=OutputParameterType.OBJECT, required=True),  # Users to add to Copilot billing.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(name="response", param_type=OutputParameterType.OBJECT, is_array=False),  # Result of adding users to billing.
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(POST_orgsorgcopilotbillingselected_users.method, 
                                           POST_orgsorgcopilotbillingselected_users.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'POST_orgsorgcopilotbillingselected_users': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class DELETE_orgsorgcopilotbillingselected_users(BaseFunction):
    """Remove users from Copilot billing for an organization."""
    name = "DELETE /orgs/{org}/copilot/billing/selected_users"
    url = "/orgs/{org}/copilot/billing/selected_users"
    args_in_url = True
    method = DELETE

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="org", param_type=ParameterType.STRING, required=True),  # Organization name.,
			Parameter(name="users", param_type=OutputParameterType.OBJECT, required=True),  # Users to remove from Copilot billing.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(name="response", param_type=OutputParameterType.OBJECT, is_array=False),  # Result of removing users from billing.
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(DELETE_orgsorgcopilotbillingselected_users.method, 
                                           DELETE_orgsorgcopilotbillingselected_users.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'DELETE_orgsorgcopilotbillingselected_users': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class GET_orgsorgcopilotbilling(BaseFunction):
    """Get Co-Pilot seat information and settings for an organization."""
    name = "GET /orgs/{org}/copilot/billing"
    url = "/orgs/{org}/copilot/billing"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="org", param_type=ParameterType.STRING, required=True),  # Organization name.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(name="billing_info", param_type=OutputParameterType.OBJECT, is_array=False),  # Copilot billing information.
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(GET_orgsorgcopilotbilling.method, 
                                           GET_orgsorgcopilotbilling.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'GET_orgsorgcopilotbilling': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class GET_orgsorgcopilotbillingseats(BaseFunction):
    """List all Copilot seat assignments for an organization."""
    name = "GET /orgs/{org}/copilot/billing/seats"
    url = "/orgs/{org}/copilot/billing/seats"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="org", param_type=ParameterType.STRING, required=True),  # Organization name.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(name="seats", param_type=OutputParameterType.OBJECT, is_array=True),  # List of Copilot seat assignments.
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(GET_orgsorgcopilotbillingseats.method, 
                                           GET_orgsorgcopilotbillingseats.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'GET_orgsorgcopilotbillingseats': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class GET_orgsorgcopilotmetrics(BaseFunction):
    """Get Copilot metrics for an organization."""
    name = "GET /orgs/{org}/copilot/metrics"
    url = "/orgs/{org}/copilot/metrics"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="org", param_type=ParameterType.STRING, required=True),  # Organization name.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(name="metrics", param_type=OutputParameterType.OBJECT, is_array=True),  # Copilot metrics data.
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(GET_orgsorgcopilotmetrics.method, 
                                           GET_orgsorgcopilotmetrics.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'GET_orgsorgcopilotmetrics': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class GET_orgsorginstallations(BaseFunction):
    """List app installations for an organization."""
    name = "GET /orgs/{org}/installations"
    url = "/orgs/{org}/installations"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="org", param_type=ParameterType.STRING, required=True),  # Organization name.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(name="installations", param_type=OutputParameterType.OBJECT, is_array=True),  # List of app installations.
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(GET_orgsorginstallations.method, 
                                           GET_orgsorginstallations.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'GET_orgsorginstallations': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class GET_orgsorginteractionlimits(BaseFunction):
    """Get interaction restrictions for an organization."""
    name = "GET /orgs/{org}/interaction-limits"
    url = "/orgs/{org}/interaction-limits"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="org", param_type=ParameterType.STRING, required=True),  # Organization name.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(name="limits", param_type=OutputParameterType.OBJECT, is_array=True),  # Interaction limits for the organization.
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(GET_orgsorginteractionlimits.method, 
                                           GET_orgsorginteractionlimits.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'GET_orgsorginteractionlimits': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class GET_orgsorgmembersusernamecopilot(BaseFunction):
    """Get copilot seat assignment details for a user in an organization."""
    name = "GET /orgs/{org}/members/{username}/copilot"
    url = "/orgs/{org}/members/{username}/copilot"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="org", param_type=ParameterType.STRING, required=True),  # Organization name.,
			Parameter(name="username", param_type=ParameterType.STRING, required=True),  # Username.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(name="assignment_details", param_type=OutputParameterType.OBJECT, is_array=False),  # Copilot seat assignment details.
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(GET_orgsorgmembersusernamecopilot.method, 
                                           GET_orgsorgmembersusernamecopilot.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'GET_orgsorgmembersusernamecopilot': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class GET_orgsorgsecuritymanagers(BaseFunction):
    """List security manager teams for an organization."""
    name = "GET /orgs/{org}/security-managers"
    url = "/orgs/{org}/security-managers"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="org", param_type=ParameterType.STRING, required=True),  # Organization name.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(name="security_managers", param_type=OutputParameterType.OBJECT, is_array=True),  # List of security manager teams.
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(GET_orgsorgsecuritymanagers.method, 
                                           GET_orgsorgsecuritymanagers.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'GET_orgsorgsecuritymanagers': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class GET_orgsorgsettingsbillingactions(BaseFunction):
    """Get GitHub Actions billing for an organization."""
    name = "GET /orgs/{org}/settings/billing/actions"
    url = "/orgs/{org}/settings/billing/actions"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="org", param_type=ParameterType.STRING, required=True),  # Organization name.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(name="billing_data", param_type=OutputParameterType.OBJECT, is_array=True),  # Billing data for GitHub Actions.
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(GET_orgsorgsettingsbillingactions.method, 
                                           GET_orgsorgsettingsbillingactions.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'GET_orgsorgsettingsbillingactions': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class GET_orgsorgsettingsbillingpackages(BaseFunction):
    """Get GitHub Packages billing for an organization."""
    name = "GET /orgs/{org}/settings/billing/packages"
    url = "/orgs/{org}/settings/billing/packages"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="org", param_type=ParameterType.STRING, required=True),  # Organization name.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(name="billing_data", param_type=OutputParameterType.OBJECT, is_array=True),  # Billing data for packages.
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(GET_orgsorgsettingsbillingpackages.method, 
                                           GET_orgsorgsettingsbillingpackages.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'GET_orgsorgsettingsbillingpackages': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class GET_orgsorgsettingsbillingsharedstorage(BaseFunction):
    """Get shared storage billing for an organization."""
    name = "GET /orgs/{org}/settings/billing/shared-storage"
    url = "/orgs/{org}/settings/billing/shared-storage"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="org", param_type=ParameterType.STRING, required=True),  # Organization name.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(name="storage_billing", param_type=OutputParameterType.OBJECT, is_array=True),  # Shared storage billing data.
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(GET_orgsorgsettingsbillingsharedstorage.method, 
                                           GET_orgsorgsettingsbillingsharedstorage.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'GET_orgsorgsettingsbillingsharedstorage': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class GET_orgsorgteamteam_slugcopilotmetrics(BaseFunction):
    """Get Copilot metrics for a team within an organization."""
    name = "GET /orgs/{org}/team/{team_slug}/copilot/metrics"
    url = "/orgs/{org}/team/{team_slug}/copilot/metrics"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="org", param_type=ParameterType.STRING, required=True),  # Organization name.,
			Parameter(name="team_slug", param_type=ParameterType.STRING, required=True),  # Team slug.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(name="metrics", param_type=OutputParameterType.OBJECT, is_array=True),  # Copilot metrics for the team.
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(GET_orgsorgteamteam_slugcopilotmetrics.method, 
                                           GET_orgsorgteamteam_slugcopilotmetrics.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'GET_orgsorgteamteam_slugcopilotmetrics': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class POST_orgsorgpersonalaccesstokens(BaseFunction):
    """"""
    name = "POST /orgs/{org}/personal-access-tokens"
    url = "https://docs.github.com/en/rest/orgs/personal-access-tokens#update-the-access-to-organization-resources-via-fine-grained-personal-access-tokens"
    args_in_url = True
    method = INSERT

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="org", param_type=ParameterType.STRING, required=True),  # Organization name
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(POST_orgsorgpersonalaccesstokens.method, 
                                           POST_orgsorgpersonalaccesstokens.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'POST_orgsorgpersonalaccesstokens': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class POST_orgsorgpersonalaccesstokenspat_id(BaseFunction):
    """"""
    name = "POST /orgs/{org}/personal-access-tokens/{pat_id}"
    url = "https://docs.github.com/en/rest/orgs/personal-access-tokens#update-the-access-a-fine-grained-personal-access-token-has-to-organization-resources"
    args_in_url = True
    method = INSERT

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="org", param_type=ParameterType.STRING, required=True),  # Organization name,
			Parameter(name="pat_id", param_type=ParameterType.INTEGER, required=True),  # Personal Access Token ID
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(POST_orgsorgpersonalaccesstokenspat_id.method, 
                                           POST_orgsorgpersonalaccesstokenspat_id.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'POST_orgsorgpersonalaccesstokenspat_id': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class GET_orgsorgpersonalaccesstokens(BaseFunction):
    """"""
    name = "GET /orgs/{org}/personal-access-tokens"
    url = "https://docs.github.com/en/rest/orgs/personal-access-tokens#list-fine-grained-personal-access-tokens-with-access-to-organization-resources"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="org", param_type=ParameterType.STRING, required=True),  # Organization name
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(GET_orgsorgpersonalaccesstokens.method, 
                                           GET_orgsorgpersonalaccesstokens.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'GET_orgsorgpersonalaccesstokens': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class GET_orgsorgpersonalaccesstokenspat_idrepositories(BaseFunction):
    """"""
    name = "GET /orgs/{org}/personal-access-tokens/{pat_id}/repositories"
    url = "https://docs.github.com/en/rest/orgs/personal-access-tokens#list-repositories-a-fine-grained-personal-access-token-has-access-to"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="org", param_type=ParameterType.STRING, required=True),  # Organization name,
			Parameter(name="pat_id", param_type=ParameterType.INTEGER, required=True),  # Personal Access Token ID
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(GET_orgsorgpersonalaccesstokenspat_idrepositories.method, 
                                           GET_orgsorgpersonalaccesstokenspat_idrepositories.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'GET_orgsorgpersonalaccesstokenspat_idrepositories': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class PUT_orgsorgteamsteam_slugprojectsproject_id(BaseFunction):
    """Multiple permissions are required, or a different permission may be used."""
    name = "PUT /orgs/{org}/teams/{team_slug}/projects/{project_id}"
    url = "https://docs.github.com/en/rest/teams/teams#add-or-update-team-project-permissions"
    args_in_url = True
    method = UPDATE

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="org", param_type=ParameterType.STRING, required=True),  # Organization name,
			Parameter(name="team_slug", param_type=ParameterType.STRING, required=True),  # Team slug,
			Parameter(name="project_id", param_type=ParameterType.INTEGER, required=True),  # Project ID
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(PUT_orgsorgteamsteam_slugprojectsproject_id.method, 
                                           PUT_orgsorgteamsteam_slugprojectsproject_id.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'PUT_orgsorgteamsteam_slugprojectsproject_id': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class DELETE_orgsorgteamsteam_slugprojectsproject_id(BaseFunction):
    """Multiple permissions are required, or a different permission may be used."""
    name = "DELETE /orgs/{org}/teams/{team_slug}/projects/{project_id}"
    url = "https://docs.github.com/en/rest/teams/teams#remove-a-project-from-a-team"
    args_in_url = True
    method = DELETE

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="org", param_type=ParameterType.STRING, required=True),  # Organization name,
			Parameter(name="team_slug", param_type=ParameterType.STRING, required=True),  # Team slug,
			Parameter(name="project_id", param_type=ParameterType.INTEGER, required=True),  # Project ID
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(DELETE_orgsorgteamsteam_slugprojectsproject_id.method, 
                                           DELETE_orgsorgteamsteam_slugprojectsproject_id.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'DELETE_orgsorgteamsteam_slugprojectsproject_id': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class GET_projectsproject_idcollaborators(BaseFunction):
    """Multiple permissions are required, or a different permission may be used."""
    name = "GET /projects/{project_id}/collaborators"
    url = "https://docs.github.com/en/rest/projects/collaborators#list-project-collaborators"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="project_id", param_type=ParameterType.INTEGER, required=True),  # Project ID
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(GET_projectsproject_idcollaborators.method, 
                                           GET_projectsproject_idcollaborators.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'GET_projectsproject_idcollaborators': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class PUT_projectsproject_idcollaboratorsusername(BaseFunction):
    """Multiple permissions are required, or a different permission may be used."""
    name = "PUT /projects/{project_id}/collaborators/{username}"
    url = "https://docs.github.com/en/rest/projects/collaborators#add-project-collaborator"
    args_in_url = True
    method = UPDATE

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="project_id", param_type=ParameterType.INTEGER, required=True),  # Project ID,
			Parameter(name="username", param_type=ParameterType.STRING, required=True),  # Username of the collaborator
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(PUT_projectsproject_idcollaboratorsusername.method, 
                                           PUT_projectsproject_idcollaboratorsusername.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'PUT_projectsproject_idcollaboratorsusername': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class DELETE_projectsproject_idcollaboratorsusername(BaseFunction):
    """Multiple permissions are required, or a different permission may be used."""
    name = "DELETE /projects/{project_id}/collaborators/{username}"
    url = "https://docs.github.com/en/rest/projects/collaborators#remove-user-as-a-collaborator"
    args_in_url = True
    method = DELETE

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="project_id", param_type=ParameterType.INTEGER, required=True),  # Project ID,
			Parameter(name="username", param_type=ParameterType.STRING, required=True),  # Username of the collaborator
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(DELETE_projectsproject_idcollaboratorsusername.method, 
                                           DELETE_projectsproject_idcollaboratorsusername.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'DELETE_projectsproject_idcollaboratorsusername': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class GET_projectsproject_idcollaboratorsusernamepermission(BaseFunction):
    """Multiple permissions are required, or a different permission may be used."""
    name = "GET /projects/{project_id}/collaborators/{username}/permission"
    url = "https://docs.github.com/en/rest/projects/collaborators#get-project-permission-for-a-user"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="project_id", param_type=ParameterType.INTEGER, required=True),  # Project ID,
			Parameter(name="username", param_type=ParameterType.STRING, required=True),  # Username
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(GET_projectsproject_idcollaboratorsusernamepermission.method, 
                                           GET_projectsproject_idcollaboratorsusernamepermission.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'GET_projectsproject_idcollaboratorsusernamepermission': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class POST_orgsorgprojects(BaseFunction):
    """Multiple permissions are required, or a different permission may be used."""
    name = "POST /orgs/{org}/projects"
    url = "https://docs.github.com/en/rest/projects/projects#create-an-organization-project"
    args_in_url = True
    method = INSERT

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="org", param_type=ParameterType.STRING, required=True),  # Organization name
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(POST_orgsorgprojects.method, 
                                           POST_orgsorgprojects.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'POST_orgsorgprojects': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class PATCH_projectsproject_id(BaseFunction):
    """Multiple permissions are required, or a different permission may be used."""
    name = "PATCH /projects/{project_id}"
    url = "https://docs.github.com/en/rest/projects/projects#update-a-project"
    args_in_url = True
    method = UPDATE

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="project_id", param_type=ParameterType.INTEGER, required=True),  # Project ID
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(PATCH_projectsproject_id.method, 
                                           PATCH_projectsproject_id.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'PATCH_projectsproject_id': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class DELETE_projectsproject_id(BaseFunction):
    """Multiple permissions are required, or a different permission may be used."""
    name = "DELETE /projects/{project_id}"
    url = "https://docs.github.com/en/rest/projects/projects#delete-a-project"
    args_in_url = True
    method = DELETE

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="project_id", param_type=ParameterType.INTEGER, required=True),  # Project ID
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(DELETE_projectsproject_id.method, 
                                           DELETE_projectsproject_id.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'DELETE_projectsproject_id': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class POST_projectsproject_idcolumns(BaseFunction):
    """Multiple permissions are required, or a different permission may be used."""
    name = "POST /projects/{project_id}/columns"
    url = "https://docs.github.com/en/rest/projects/columns#create-a-project-column"
    args_in_url = True
    method = INSERT

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="project_id", param_type=ParameterType.INTEGER, required=True),  # Project ID
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(POST_projectsproject_idcolumns.method, 
                                           POST_projectsproject_idcolumns.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'POST_projectsproject_idcolumns': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class GET_orgsorgprojects(BaseFunction):
    """"""
    name = "GET /orgs/{org}/projects"
    url = "https://docs.github.com/en/rest/projects/projects#list-organization-projects"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="org", param_type=ParameterType.STRING, required=True),  # Organization name
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(GET_orgsorgprojects.method, 
                                           GET_orgsorgprojects.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'GET_orgsorgprojects': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class GET_projectscolumnscardscard_id(BaseFunction):
    """Multiple permissions are required, or a different permission may be used."""
    name = "GET /projects/columns/cards/{card_id}"
    url = "https://docs.github.com/en/rest/projects/cards#get-a-project-card"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="card_id", param_type=ParameterType.INTEGER, required=True),  # Card ID
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(GET_projectscolumnscardscard_id.method, 
                                           GET_projectscolumnscardscard_id.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'GET_projectscolumnscardscard_id': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class GET_projectscolumnscolumn_id(BaseFunction):
    """Multiple permissions are required, or a different permission may be used."""
    name = "GET /projects/columns/{column_id}"
    url = "https://docs.github.com/en/rest/projects/columns#get-a-project-column"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="column_id", param_type=ParameterType.INTEGER, required=True),  # Column ID
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(GET_projectscolumnscolumn_id.method, 
                                           GET_projectscolumnscolumn_id.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'GET_projectscolumnscolumn_id': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class GET_projectscolumnscolumn_idcards(BaseFunction):
    """Multiple permissions are required, or a different permission may be used."""
    name = "GET /projects/columns/{column_id}/cards"
    url = "https://docs.github.com/en/rest/projects/cards#list-project-cards"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="column_id", param_type=ParameterType.INTEGER, required=True),  # Column ID
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(GET_projectscolumnscolumn_idcards.method, 
                                           GET_projectscolumnscolumn_idcards.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'GET_projectscolumnscolumn_idcards': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class GET_projectsproject_id(BaseFunction):
    """Multiple permissions are required, or a different permission may be used."""
    name = "GET /projects/{project_id}"
    url = "https://docs.github.com/en/rest/projects/projects#get-a-project"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="project_id", param_type=ParameterType.INTEGER, required=True),  # Project ID
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(GET_projectsproject_id.method, 
                                           GET_projectsproject_id.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'GET_projectsproject_id': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class GET_projectsproject_idcolumns(BaseFunction):
    """Multiple permissions are required, or a different permission may be used."""
    name = "GET /projects/{project_id}/columns"
    url = "https://docs.github.com/en/rest/projects/columns#list-project-columns"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="project_id", param_type=ParameterType.INTEGER, required=True),  # Project ID
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(GET_projectsproject_idcolumns.method, 
                                           GET_projectsproject_idcolumns.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'GET_projectsproject_idcolumns': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class POST_orgsorgactionssecretssecret_name(BaseFunction):
    """"""
    name = "POST /orgs/{org}/actions/secrets/{secret_name}"
    url = "https://docs.github.com/en/rest/actions/secrets#create-or-update-an-organization-secret"
    args_in_url = True
    method = INSERT

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="org", param_type=ParameterType.STRING, required=True),  # Organization name,
			Parameter(name="secret_name", param_type=ParameterType.STRING, required=True),  # Secret name
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(POST_orgsorgactionssecretssecret_name.method, 
                                           POST_orgsorgactionssecretssecret_name.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'POST_orgsorgactionssecretssecret_name': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class DELETE_orgsorgactionssecretssecret_name(BaseFunction):
    """"""
    name = "DELETE /orgs/{org}/actions/secrets/{secret_name}"
    url = "https://docs.github.com/en/rest/actions/secrets#delete-an-organization-secret"
    args_in_url = True
    method = DELETE

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="org", param_type=ParameterType.STRING, required=True),  # Organization name,
			Parameter(name="secret_name", param_type=ParameterType.STRING, required=True),  # Secret name
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(DELETE_orgsorgactionssecretssecret_name.method, 
                                           DELETE_orgsorgactionssecretssecret_name.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'DELETE_orgsorgactionssecretssecret_name': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class PUT_orgsorgactionssecretssecret_namerepositories(BaseFunction):
    """"""
    name = "PUT /orgs/{org}/actions/secrets/{secret_name}/repositories"
    url = "https://docs.github.com/en/rest/actions/secrets#set-selected-repositories-for-an-organization-secret"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="org", param_type=ParameterType.STRING, required=True),  # Organization name,
			Parameter(name="secret_name", param_type=ParameterType.STRING, required=True),  # Secret name,
			Parameter(name="repositories", param_type=OutputParameterType.OBJECT, required=True),  # Object containing list of repositories
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(PUT_orgsorgactionssecretssecret_namerepositories.method, 
                                           PUT_orgsorgactionssecretssecret_namerepositories.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'PUT_orgsorgactionssecretssecret_namerepositories': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class PUT_orgsorgactionssecretssecret_namerepositoriesrepository_id(BaseFunction):
    """Multiple permissions are required, or a different permission may be used."""
    name = "PUT /orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}"
    url = "https://docs.github.com/en/rest/actions/secrets#add-selected-repository-to-an-organization-secret"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="org", param_type=ParameterType.STRING, required=True),  # Organization name,
			Parameter(name="secret_name", param_type=ParameterType.STRING, required=True),  # Secret name,
			Parameter(name="repository_id", param_type=ParameterType.INTEGER, required=True),  # Repository ID
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(PUT_orgsorgactionssecretssecret_namerepositoriesrepository_id.method, 
                                           PUT_orgsorgactionssecretssecret_namerepositoriesrepository_id.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'PUT_orgsorgactionssecretssecret_namerepositoriesrepository_id': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class DELETE_orgsorgactionssecretssecret_namerepositoriesrepository_id(BaseFunction):
    """Multiple permissions are required, or a different permission may be used."""
    name = "DELETE /orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}"
    url = "https://docs.github.com/en/rest/actions/secrets#remove-selected-repository-from-an-organization-secret"
    args_in_url = True
    method = DELETE

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="org", param_type=ParameterType.STRING, required=True),  # Organization name,
			Parameter(name="secret_name", param_type=ParameterType.STRING, required=True),  # Secret name,
			Parameter(name="repository_id", param_type=ParameterType.INTEGER, required=True),  # Repository ID
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(DELETE_orgsorgactionssecretssecret_namerepositoriesrepository_id.method, 
                                           DELETE_orgsorgactionssecretssecret_namerepositoriesrepository_id.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'DELETE_orgsorgactionssecretssecret_namerepositoriesrepository_id': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class GET_orgsorgactionssecrets(BaseFunction):
    """"""
    name = "GET /orgs/{org}/actions/secrets"
    url = "https://docs.github.com/en/rest/actions/secrets#list-organization-secrets"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="org", param_type=ParameterType.STRING, required=True),  # Organization name
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(GET_orgsorgactionssecrets.method, 
                                           GET_orgsorgactionssecrets.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'GET_orgsorgactionssecrets': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class GET_orgsorgactionssecretspublickey(BaseFunction):
    """"""
    name = "GET /orgs/{org}/actions/secrets/public-key"
    url = "https://docs.github.com/en/rest/actions/secrets#get-an-organization-public-key"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="org", param_type=ParameterType.STRING, required=True),  # Organization name
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(GET_orgsorgactionssecretspublickey.method, 
                                           GET_orgsorgactionssecretspublickey.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'GET_orgsorgactionssecretspublickey': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class GET_orgsorgactionssecretssecret_name(BaseFunction):
    """"""
    name = "GET /orgs/{org}/actions/secrets/{secret_name}"
    url = "https://docs.github.com/en/rest/actions/secrets#get-an-organization-secret"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="org", param_type=ParameterType.STRING, required=True),  # Organization name,
			Parameter(name="secret_name", param_type=ParameterType.STRING, required=True),  # Secret name
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(GET_orgsorgactionssecretssecret_name.method, 
                                           GET_orgsorgactionssecretssecret_name.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'GET_orgsorgactionssecretssecret_name': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class GET_orgsorgactionssecretssecret_namerepositories(BaseFunction):
    """"""
    name = "GET /orgs/{org}/actions/secrets/{secret_name}/repositories"
    url = "https://docs.github.com/en/rest/actions/secrets#list-selected-repositories-for-an-organization-secret"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="org", param_type=ParameterType.STRING, required=True),  # Organization name,
			Parameter(name="secret_name", param_type=ParameterType.STRING, required=True),  # Secret name
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(GET_orgsorgactionssecretssecret_namerepositories.method, 
                                           GET_orgsorgactionssecretssecret_namerepositories.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'GET_orgsorgactionssecretssecret_namerepositories': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class POST_orgsorgactionsrunnersgeneratejitconfig(BaseFunction):
    """"""
    name = "POST /orgs/{org}/actions/runners/generate-jitconfig"
    url = "https://docs.github.com/en/rest/actions/self-hosted-runners#create-configuration-for-a-just-in-time-runner-for-an-organization"
    args_in_url = True
    method = INSERT

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="org", param_type=ParameterType.STRING, required=True),  # Organization name
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(POST_orgsorgactionsrunnersgeneratejitconfig.method, 
                                           POST_orgsorgactionsrunnersgeneratejitconfig.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'POST_orgsorgactionsrunnersgeneratejitconfig': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class POST_orgsorgactionsrunnersregistrationtoken(BaseFunction):
    """"""
    name = "POST /orgs/{org}/actions/runners/registration-token"
    url = "https://docs.github.com/en/rest/actions/self-hosted-runners#create-a-registration-token-for-an-organization"
    args_in_url = True
    method = INSERT

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="org", param_type=ParameterType.STRING, required=True),  # Organization name
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(POST_orgsorgactionsrunnersregistrationtoken.method, 
                                           POST_orgsorgactionsrunnersregistrationtoken.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'POST_orgsorgactionsrunnersregistrationtoken': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class POST_orgsorgactionsrunnersremovetoken(BaseFunction):
    """"""
    name = "POST /orgs/{org}/actions/runners/remove-token"
    url = "https://docs.github.com/en/rest/actions/self-hosted-runners#create-a-remove-token-for-an-organization"
    args_in_url = True
    method = INSERT

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="org", param_type=ParameterType.STRING, required=True),  # Organization name
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(POST_orgsorgactionsrunnersremovetoken.method, 
                                           POST_orgsorgactionsrunnersremovetoken.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'POST_orgsorgactionsrunnersremovetoken': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class DELETE_orgsorgactionsrunnersrunner_id(BaseFunction):
    """"""
    name = "DELETE /orgs/{org}/actions/runners/{runner_id}"
    url = "https://docs.github.com/en/rest/actions/self-hosted-runners#delete-a-self-hosted-runner-from-an-organization"
    args_in_url = True
    method = DELETE

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="org", param_type=ParameterType.STRING, required=True),  # Organization name,
			Parameter(name="runner_id", param_type=ParameterType.INTEGER, required=True),  # Runner ID
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(DELETE_orgsorgactionsrunnersrunner_id.method, 
                                           DELETE_orgsorgactionsrunnersrunner_id.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'DELETE_orgsorgactionsrunnersrunner_id': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class POST_orgsorgactionsrunnersrunner_idlabels(BaseFunction):
    """"""
    name = "POST /orgs/{org}/actions/runners/{runner_id}/labels"
    url = "https://docs.github.com/en/rest/actions/self-hosted-runners#add-custom-labels-to-a-self-hosted-runner-for-an-organization"
    args_in_url = True
    method = INSERT

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="org", param_type=ParameterType.STRING, required=True),  # Organization name,
			Parameter(name="runner_id", param_type=ParameterType.INTEGER, required=True),  # Runner ID,
			Parameter(name="labels", param_type=OutputParameterType.OBJECT, required=True),  # Object containing labels
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(POST_orgsorgactionsrunnersrunner_idlabels.method, 
                                           POST_orgsorgactionsrunnersrunner_idlabels.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'POST_orgsorgactionsrunnersrunner_idlabels': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class PUT_orgsorgactionsrunnersrunner_idlabels(BaseFunction):
    """"""
    name = "PUT /orgs/{org}/actions/runners/{runner_id}/labels"
    url = "https://docs.github.com/en/rest/actions/self-hosted-runners#set-custom-labels-for-a-self-hosted-runner-for-an-organization"
    args_in_url = True
    method = UPDATE

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="org", param_type=ParameterType.STRING, required=True),  # Organization name,
			Parameter(name="runner_id", param_type=ParameterType.INTEGER, required=True),  # Runner ID,
			Parameter(name="labels", param_type=OutputParameterType.OBJECT, required=True),  # Object containing labels
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(PUT_orgsorgactionsrunnersrunner_idlabels.method, 
                                           PUT_orgsorgactionsrunnersrunner_idlabels.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'PUT_orgsorgactionsrunnersrunner_idlabels': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class DELETE_orgsorgactionsrunnersrunner_idlabelsname(BaseFunction):
    """"""
    name = "DELETE /orgs/{org}/actions/runners/{runner_id}/labels/{name}"
    url = "https://docs.github.com/en/rest/actions/self-hosted-runners#remove-a-custom-label-from-a-self-hosted-runner-for-an-organization"
    args_in_url = True
    method = DELETE

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="org", param_type=ParameterType.STRING, required=True),  # Organization name,
			Parameter(name="runner_id", param_type=ParameterType.INTEGER, required=True),  # Runner ID,
			Parameter(name="name", param_type=ParameterType.STRING, required=True),  # Label name
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(DELETE_orgsorgactionsrunnersrunner_idlabelsname.method, 
                                           DELETE_orgsorgactionsrunnersrunner_idlabelsname.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'DELETE_orgsorgactionsrunnersrunner_idlabelsname': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class GET_orgsorgactionsrunnergroups(BaseFunction):
    """"""
    name = "GET /orgs/{org}/actions/runner-groups"
    url = "https://docs.github.com/en/rest/actions/self-hosted-runner-groups#list-self-hosted-runner-groups-for-an-organization"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="org", param_type=ParameterType.STRING, required=True),  # Organization name
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(GET_orgsorgactionsrunnergroups.method, 
                                           GET_orgsorgactionsrunnergroups.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'GET_orgsorgactionsrunnergroups': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class GET_orgsorgactionsrunnergroupsrunner_group_id(BaseFunction):
    """"""
    name = "GET /orgs/{org}/actions/runner-groups/{runner_group_id}"
    url = "https://docs.github.com/en/rest/actions/self-hosted-runner-groups#get-a-self-hosted-runner-group-for-an-organization"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="org", param_type=ParameterType.STRING, required=True),  # Organization name,
			Parameter(name="runner_group_id", param_type=ParameterType.INTEGER, required=True),  # Runner group ID
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(GET_orgsorgactionsrunnergroupsrunner_group_id.method, 
                                           GET_orgsorgactionsrunnergroupsrunner_group_id.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'GET_orgsorgactionsrunnergroupsrunner_group_id': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class GET_orgsorgactionsrunnergroupsrunner_group_idhostedrunners(BaseFunction):
    """"""
    name = "GET /orgs/{org}/actions/runner-groups/{runner_group_id}/hosted-runners"
    url = "https://docs.github.com/en/rest/actions/self-hosted-runner-groups#list-github-hosted-runners-in-a-group-for-an-organization"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="org", param_type=ParameterType.STRING, required=True),  # Organization name,
			Parameter(name="runner_group_id", param_type=ParameterType.INTEGER, required=True),  # Runner group ID
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(GET_orgsorgactionsrunnergroupsrunner_group_idhostedrunners.method, 
                                           GET_orgsorgactionsrunnergroupsrunner_group_idhostedrunners.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'GET_orgsorgactionsrunnergroupsrunner_group_idhostedrunners': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class GET_orgsorgactionsrunnergroupsrunner_group_idrepositories(BaseFunction):
    """"""
    name = "GET /orgs/{org}/actions/runner-groups/{runner_group_id}/repositories"
    url = "https://docs.github.com/en/rest/actions/self-hosted-runner-groups#list-repository-access-to-a-self-hosted-runner-group-in-an-organization"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="org", param_type=ParameterType.STRING, required=True),  # Organization name,
			Parameter(name="runner_group_id", param_type=ParameterType.INTEGER, required=True),  # Runner group ID
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(GET_orgsorgactionsrunnergroupsrunner_group_idrepositories.method, 
                                           GET_orgsorgactionsrunnergroupsrunner_group_idrepositories.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'GET_orgsorgactionsrunnergroupsrunner_group_idrepositories': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class GET_orgsorgactionsrunnergroupsrunner_group_idrunners(BaseFunction):
    """"""
    name = "GET /orgs/{org}/actions/runner-groups/{runner_group_id}/runners"
    url = "https://docs.github.com/en/rest/actions/self-hosted-runner-groups#list-self-hosted-runners-in-a-group-for-an-organization"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="org", param_type=ParameterType.STRING, required=True),  # Organization name,
			Parameter(name="runner_group_id", param_type=ParameterType.INTEGER, required=True),  # Runner group ID
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(GET_orgsorgactionsrunnergroupsrunner_group_idrunners.method, 
                                           GET_orgsorgactionsrunnergroupsrunner_group_idrunners.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'GET_orgsorgactionsrunnergroupsrunner_group_idrunners': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class GET_orgsorgactionsrunners(BaseFunction):
    """"""
    name = "GET /orgs/{org}/actions/runners"
    url = "https://docs.github.com/en/rest/actions/self-hosted-runners#list-self-hosted-runners-for-an-organization"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="org", param_type=ParameterType.STRING, required=True),  # Organization name
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(GET_orgsorgactionsrunners.method, 
                                           GET_orgsorgactionsrunners.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'GET_orgsorgactionsrunners': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class GET_orgsorgactionsrunnersdownloads(BaseFunction):
    """"""
    name = "GET /orgs/{org}/actions/runners/downloads"
    url = "https://docs.github.com/en/rest/actions/self-hosted-runners#list-runner-applications-for-an-organization"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="org", param_type=ParameterType.STRING, required=True),  # Organization name
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(GET_orgsorgactionsrunnersdownloads.method, 
                                           GET_orgsorgactionsrunnersdownloads.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'GET_orgsorgactionsrunnersdownloads': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class GET_orgsorgactionsrunnersrunner_id(BaseFunction):
    """"""
    name = "GET /orgs/{org}/actions/runners/{runner_id}"
    url = "https://docs.github.com/en/rest/actions/self-hosted-runners#get-a-self-hosted-runner-for-an-organization"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="org", param_type=ParameterType.STRING, required=True),  # Organization name,
			Parameter(name="runner_id", param_type=ParameterType.INTEGER, required=True),  # Runner ID
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(GET_orgsorgactionsrunnersrunner_id.method, 
                                           GET_orgsorgactionsrunnersrunner_id.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'GET_orgsorgactionsrunnersrunner_id': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class GET_orgsorgactionsrunnersrunner_idlabels(BaseFunction):
    """"""
    name = "GET /orgs/{org}/actions/runners/{runner_id}/labels"
    url = "https://docs.github.com/en/rest/actions/self-hosted-runners#list-labels-for-a-self-hosted-runner-for-an-organization"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="org", param_type=ParameterType.STRING, required=True),  # Organization name,
			Parameter(name="runner_id", param_type=ParameterType.INTEGER, required=True),  # Runner ID
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(GET_orgsorgactionsrunnersrunner_idlabels.method, 
                                           GET_orgsorgactionsrunnersrunner_idlabels.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'GET_orgsorgactionsrunnersrunner_idlabels': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class DELETE_orgsorgactionsrunnergroupsrunner_group_iddiscussionsdiscussion_numbercommentscomment_numberreactionsreaction_id(BaseFunction):
    """"""
    name = "DELETE /orgs/{org}/actions/runner-groups/{runner_group_id}/discussions/{discussion_number}/comments/{comment_number}/reactions/{reaction_id}"
    url = "https://docs.github.com/en/rest/reactions/reactions#delete-team-discussion-comment-reaction"
    args_in_url = True
    method = DELETE

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="org", param_type=ParameterType.STRING, required=True),  # Organization name,
			Parameter(name="runner_group_id", param_type=ParameterType.INTEGER, required=True),  # Runner group ID,
			Parameter(name="discussion_number", param_type=ParameterType.INTEGER, required=True),  # Discussion number,
			Parameter(name="comment_number", param_type=ParameterType.INTEGER, required=True),  # Comment number,
			Parameter(name="reaction_id", param_type=ParameterType.INTEGER, required=True),  # Reaction ID
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(DELETE_orgsorgactionsrunnergroupsrunner_group_iddiscussionsdiscussion_numbercommentscomment_numberreactionsreaction_id.method, 
                                           DELETE_orgsorgactionsrunnergroupsrunner_group_iddiscussionsdiscussion_numbercommentscomment_numberreactionsreaction_id.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'DELETE_orgsorgactionsrunnergroupsrunner_group_iddiscussionsdiscussion_numbercommentscomment_numberreactionsreaction_id': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class DELETE_orgsorgactionsrunnergroupsrunner_group_iddiscussionsdiscussion_numberreactionsreaction_id(BaseFunction):
    """"""
    name = "DELETE /orgs/{org}/actions/runner-groups/{runner_group_id}/discussions/{discussion_number}/reactions/{reaction_id}"
    url = "https://docs.github.com/en/rest/reactions/reactions#delete-team-discussion-reaction"
    args_in_url = True
    method = DELETE

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="org", param_type=ParameterType.STRING, required=True),  # Organization name,
			Parameter(name="runner_group_id", param_type=ParameterType.INTEGER, required=True),  # Runner group ID,
			Parameter(name="discussion_number", param_type=ParameterType.INTEGER, required=True),  # Discussion number,
			Parameter(name="reaction_id", param_type=ParameterType.INTEGER, required=True),  # Reaction ID
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(DELETE_orgsorgactionsrunnergroupsrunner_group_iddiscussionsdiscussion_numberreactionsreaction_id.method, 
                                           DELETE_orgsorgactionsrunnergroupsrunner_group_iddiscussionsdiscussion_numberreactionsreaction_id.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'DELETE_orgsorgactionsrunnergroupsrunner_group_iddiscussionsdiscussion_numberreactionsreaction_id': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class POST_orgsorgactionsvariables(BaseFunction):
    """"""
    name = "POST /orgs/{org}/actions/variables"
    url = "https://docs.github.com/en/rest/actions/variables#create-an-organization-variable"
    args_in_url = True
    method = INSERT

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="org", param_type=ParameterType.STRING, required=True),  # Organization name
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(POST_orgsorgactionsvariables.method, 
                                           POST_orgsorgactionsvariables.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'POST_orgsorgactionsvariables': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class PATCH_orgsorgactionsvariablesname(BaseFunction):
    """"""
    name = "PATCH /orgs/{org}/actions/variables/{name}"
    url = "https://docs.github.com/en/rest/actions/variables#update-an-organization-variable"
    args_in_url = True
    method = UPDATE

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="org", param_type=ParameterType.STRING, required=True),  # Organization name,
			Parameter(name="name", param_type=ParameterType.STRING, required=True),  # Variable name
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(PATCH_orgsorgactionsvariablesname.method, 
                                           PATCH_orgsorgactionsvariablesname.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'PATCH_orgsorgactionsvariablesname': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class DELETE_orgsorgactionsvariablesname(BaseFunction):
    """"""
    name = "DELETE /orgs/{org}/actions/variables/{name}"
    url = "https://docs.github.com/en/rest/actions/variables#delete-an-organization-variable"
    args_in_url = True
    method = DELETE

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="org", param_type=ParameterType.STRING, required=True),  # Organization name,
			Parameter(name="name", param_type=ParameterType.STRING, required=True),  # Variable name
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(DELETE_orgsorgactionsvariablesname.method, 
                                           DELETE_orgsorgactionsvariablesname.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'DELETE_orgsorgactionsvariablesname': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class PUT_orgsorgactionsvariablesnamerepositories(BaseFunction):
    """"""
    name = "PUT /orgs/{org}/actions/variables/{name}/repositories"
    url = "https://docs.github.com/en/rest/actions/variables#set-selected-repositories-for-an-organization-variable"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="org", param_type=ParameterType.STRING, required=True),  # Organization name,
			Parameter(name="name", param_type=ParameterType.STRING, required=True),  # Variable name,
			Parameter(name="repositories", param_type=OutputParameterType.OBJECT, required=True),  # Object containing list of repositories
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(PUT_orgsorgactionsvariablesnamerepositories.method, 
                                           PUT_orgsorgactionsvariablesnamerepositories.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'PUT_orgsorgactionsvariablesnamerepositories': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class PUT_orgsorgactionsvariablesnamerepositoriesrepository_id(BaseFunction):
    """Multiple permissions are required, or a different permission may be used."""
    name = "PUT /orgs/{org}/actions/variables/{name}/repositories/{repository_id}"
    url = "https://docs.github.com/en/rest/actions/variables#add-selected-repository-to-an-organization-variable"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="org", param_type=ParameterType.STRING, required=True),  # Organization name,
			Parameter(name="name", param_type=ParameterType.STRING, required=True),  # Variable name,
			Parameter(name="repository_id", param_type=ParameterType.INTEGER, required=True),  # Repository ID
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(PUT_orgsorgactionsvariablesnamerepositoriesrepository_id.method, 
                                           PUT_orgsorgactionsvariablesnamerepositoriesrepository_id.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'PUT_orgsorgactionsvariablesnamerepositoriesrepository_id': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class DELETE_orgsorgactionsvariablesnamerepositoriesrepository_id(BaseFunction):
    """Multiple permissions are required, or a different permission may be used."""
    name = "DELETE /orgs/{org}/actions/variables/{name}/repositories/{repository_id}"
    url = "https://docs.github.com/en/rest/actions/variables#remove-selected-repository-from-an-organization-variable"
    args_in_url = True
    method = DELETE

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="org", param_type=ParameterType.STRING, required=True),  # Organization name,
			Parameter(name="name", param_type=ParameterType.STRING, required=True),  # Variable name,
			Parameter(name="repository_id", param_type=ParameterType.INTEGER, required=True),  # Repository ID
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(DELETE_orgsorgactionsvariablesnamerepositoriesrepository_id.method, 
                                           DELETE_orgsorgactionsvariablesnamerepositoriesrepository_id.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'DELETE_orgsorgactionsvariablesnamerepositoriesrepository_id': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class GET_orgsorgactionsvariables(BaseFunction):
    """"""
    name = "GET /orgs/{org}/actions/variables"
    url = "https://docs.github.com/en/rest/actions/variables#list-organization-variables"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="org", param_type=ParameterType.STRING, required=True),  # Organization name
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(GET_orgsorgactionsvariables.method, 
                                           GET_orgsorgactionsvariables.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'GET_orgsorgactionsvariables': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class GET_orgsorgactionsvariablesname(BaseFunction):
    """"""
    name = "GET /orgs/{org}/actions/variables/{name}"
    url = "https://docs.github.com/en/rest/actions/variables#get-an-organization-variable"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="org", param_type=ParameterType.STRING, required=True),  # Organization name,
			Parameter(name="name", param_type=ParameterType.STRING, required=True),  # Variable name
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(GET_orgsorgactionsvariablesname.method, 
                                           GET_orgsorgactionsvariablesname.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'GET_orgsorgactionsvariablesname': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class GET_orgsorgactionsvariablesnamerepositories(BaseFunction):
    """"""
    name = "GET /orgs/{org}/actions/variables/{name}/repositories"
    url = "https://docs.github.com/en/rest/actions/variables#list-selected-repositories-for-an-organization-variable"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="org", param_type=ParameterType.STRING, required=True),  # Organization name,
			Parameter(name="name", param_type=ParameterType.STRING, required=True),  # Variable name
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(GET_orgsorgactionsvariablesnamerepositories.method, 
                                           GET_orgsorgactionsvariablesnamerepositories.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'GET_orgsorgactionsvariablesnamerepositories': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class POST_orgsorgactionssecretssecret_name(BaseFunction):
    """"""
    name = "POST /orgs/{org}/actions/secrets/{secret_name}"
    url = "https://docs.github.com/en/rest/actions/secrets#create-or-update-an-organization-secret"
    args_in_url = True
    method = INSERT

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="org", param_type=ParameterType.STRING, required=True),  # Organization name,
			Parameter(name="secret_name", param_type=ParameterType.STRING, required=True),  # Secret name
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(POST_orgsorgactionssecretssecret_name.method, 
                                           POST_orgsorgactionssecretssecret_name.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'POST_orgsorgactionssecretssecret_name': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class DELETE_orgsorgactionssecretssecret_name(BaseFunction):
    """"""
    name = "DELETE /orgs/{org}/actions/secrets/{secret_name}"
    url = "https://docs.github.com/en/rest/actions/secrets#delete-an-organization-secret"
    args_in_url = True
    method = DELETE

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="org", param_type=ParameterType.STRING, required=True),  # Organization name,
			Parameter(name="secret_name", param_type=ParameterType.STRING, required=True),  # Secret name
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(DELETE_orgsorgactionssecretssecret_name.method, 
                                           DELETE_orgsorgactionssecretssecret_name.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'DELETE_orgsorgactionssecretssecret_name': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class PUT_orgsorgactionssecretssecret_namerepositories(BaseFunction):
    """"""
    name = "PUT /orgs/{org}/actions/secrets/{secret_name}/repositories"
    url = "https://docs.github.com/en/rest/actions/secrets#set-selected-repositories-for-an-organization-secret"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="org", param_type=ParameterType.STRING, required=True),  # Organization name,
			Parameter(name="secret_name", param_type=ParameterType.STRING, required=True),  # Secret name,
			Parameter(name="repositories", param_type=OutputParameterType.OBJECT, required=True),  # Object containing list of repositories
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(PUT_orgsorgactionssecretssecret_namerepositories.method, 
                                           PUT_orgsorgactionssecretssecret_namerepositories.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'PUT_orgsorgactionssecretssecret_namerepositories': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class PUT_orgsorgactionssecretssecret_namerepositoriesrepository_id(BaseFunction):
    """Multiple permissions are required, or a different permission may be used."""
    name = "PUT /orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}"
    url = "https://docs.github.com/en/rest/actions/secrets#add-selected-repository-to-an-organization-secret"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="org", param_type=ParameterType.STRING, required=True),  # Organization name,
			Parameter(name="secret_name", param_type=ParameterType.STRING, required=True),  # Secret name,
			Parameter(name="repository_id", param_type=ParameterType.INTEGER, required=True),  # Repository ID
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(PUT_orgsorgactionssecretssecret_namerepositoriesrepository_id.method, 
                                           PUT_orgsorgactionssecretssecret_namerepositoriesrepository_id.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'PUT_orgsorgactionssecretssecret_namerepositoriesrepository_id': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class DELETE_orgsorgactionssecretssecret_namerepositoriesrepository_id(BaseFunction):
    """Multiple permissions are required, or a different permission may be used."""
    name = "DELETE /orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}"
    url = "https://docs.github.com/en/rest/actions/secrets#remove-selected-repository-from-an-organization-secret"
    args_in_url = True
    method = DELETE

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="org", param_type=ParameterType.STRING, required=True),  # Organization name,
			Parameter(name="secret_name", param_type=ParameterType.STRING, required=True),  # Secret name,
			Parameter(name="repository_id", param_type=ParameterType.INTEGER, required=True),  # Repository ID
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(DELETE_orgsorgactionssecretssecret_namerepositoriesrepository_id.method, 
                                           DELETE_orgsorgactionssecretssecret_namerepositoriesrepository_id.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'DELETE_orgsorgactionssecretssecret_namerepositoriesrepository_id': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class GET_orgsorgactionssecrets(BaseFunction):
    """"""
    name = "GET /orgs/{org}/actions/secrets"
    url = "https://docs.github.com/en/rest/actions/secrets#list-organization-secrets"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="org", param_type=ParameterType.STRING, required=True),  # Organization name
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(GET_orgsorgactionssecrets.method, 
                                           GET_orgsorgactionssecrets.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'GET_orgsorgactionssecrets': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class GET_orgsorgactionssecretspublickey(BaseFunction):
    """"""
    name = "GET /orgs/{org}/actions/secrets/public-key"
    url = "https://docs.github.com/en/rest/actions/secrets#get-an-organization-public-key"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="org", param_type=ParameterType.STRING, required=True),  # Organization name
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(GET_orgsorgactionssecretspublickey.method, 
                                           GET_orgsorgactionssecretspublickey.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'GET_orgsorgactionssecretspublickey': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class GET_orgsorgactionssecretssecret_name(BaseFunction):
    """"""
    name = "GET /orgs/{org}/actions/secrets/{secret_name}"
    url = "https://docs.github.com/en/rest/actions/secrets#get-an-organization-secret"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="org", param_type=ParameterType.STRING, required=True),  # Organization name,
			Parameter(name="secret_name", param_type=ParameterType.STRING, required=True),  # Secret name
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(GET_orgsorgactionssecretssecret_name.method, 
                                           GET_orgsorgactionssecretssecret_name.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'GET_orgsorgactionssecretssecret_name': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class GET_orgsorgactionssecretssecret_namerepositories(BaseFunction):
    """"""
    name = "GET /orgs/{org}/actions/secrets/{secret_name}/repositories"
    url = "https://docs.github.com/en/rest/actions/secrets#list-selected-repositories-for-an-organization-secret"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="org", param_type=ParameterType.STRING, required=True),  # Organization name,
			Parameter(name="secret_name", param_type=ParameterType.STRING, required=True),  # Secret name
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(GET_orgsorgactionssecretssecret_namerepositories.method, 
                                           GET_orgsorgactionssecretssecret_namerepositories.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'GET_orgsorgactionssecretssecret_namerepositories': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class POST_orgsorgactionsrunnersgeneratejitconfig(BaseFunction):
    """"""
    name = "POST /orgs/{org}/actions/runners/generate-jitconfig"
    url = "https://docs.github.com/en/rest/actions/self-hosted-runners#create-configuration-for-a-just-in-time-runner-for-an-organization"
    args_in_url = True
    method = INSERT

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="org", param_type=ParameterType.STRING, required=True),  # Organization name
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(POST_orgsorgactionsrunnersgeneratejitconfig.method, 
                                           POST_orgsorgactionsrunnersgeneratejitconfig.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'POST_orgsorgactionsrunnersgeneratejitconfig': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class POST_orgsorgactionsrunnersregistrationtoken(BaseFunction):
    """"""
    name = "POST /orgs/{org}/actions/runners/registration-token"
    url = "https://docs.github.com/en/rest/actions/self-hosted-runners#create-a-registration-token-for-an-organization"
    args_in_url = True
    method = INSERT

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="org", param_type=ParameterType.STRING, required=True),  # Organization name
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(POST_orgsorgactionsrunnersregistrationtoken.method, 
                                           POST_orgsorgactionsrunnersregistrationtoken.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'POST_orgsorgactionsrunnersregistrationtoken': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class POST_orgsorgactionsrunnersremovetoken(BaseFunction):
    """"""
    name = "POST /orgs/{org}/actions/runners/remove-token"
    url = "https://docs.github.com/en/rest/actions/self-hosted-runners#create-a-remove-token-for-an-organization"
    args_in_url = True
    method = INSERT

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="org", param_type=ParameterType.STRING, required=True),  # Organization name
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(POST_orgsorgactionsrunnersremovetoken.method, 
                                           POST_orgsorgactionsrunnersremovetoken.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'POST_orgsorgactionsrunnersremovetoken': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class DELETE_orgsorgactionsrunnersrunner_id(BaseFunction):
    """"""
    name = "DELETE /orgs/{org}/actions/runners/{runner_id}"
    url = "https://docs.github.com/en/rest/actions/self-hosted-runners#delete-a-self-hosted-runner-from-an-organization"
    args_in_url = True
    method = DELETE

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="org", param_type=ParameterType.STRING, required=True),  # Organization name,
			Parameter(name="runner_id", param_type=ParameterType.INTEGER, required=True),  # Runner ID
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(DELETE_orgsorgactionsrunnersrunner_id.method, 
                                           DELETE_orgsorgactionsrunnersrunner_id.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'DELETE_orgsorgactionsrunnersrunner_id': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class POST_orgsorgactionsrunnersrunner_idlabels(BaseFunction):
    """"""
    name = "POST /orgs/{org}/actions/runners/{runner_id}/labels"
    url = "https://docs.github.com/en/rest/actions/self-hosted-runners#add-custom-labels-to-a-self-hosted-runner-for-an-organization"
    args_in_url = True
    method = INSERT

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="org", param_type=ParameterType.STRING, required=True),  # Organization name,
			Parameter(name="runner_id", param_type=ParameterType.INTEGER, required=True),  # Runner ID,
			Parameter(name="labels", param_type=OutputParameterType.OBJECT, required=True),  # Object containing labels
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(POST_orgsorgactionsrunnersrunner_idlabels.method, 
                                           POST_orgsorgactionsrunnersrunner_idlabels.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'POST_orgsorgactionsrunnersrunner_idlabels': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class PUT_orgsorgactionsrunnersrunner_idlabels(BaseFunction):
    """"""
    name = "PUT /orgs/{org}/actions/runners/{runner_id}/labels"
    url = "https://docs.github.com/en/rest/actions/self-hosted-runners#set-custom-labels-for-a-self-hosted-runner-for-an-organization"
    args_in_url = True
    method = UPDATE

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="org", param_type=ParameterType.STRING, required=True),  # Organization name,
			Parameter(name="runner_id", param_type=ParameterType.INTEGER, required=True),  # Runner ID,
			Parameter(name="labels", param_type=OutputParameterType.OBJECT, required=True),  # Object containing labels
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(PUT_orgsorgactionsrunnersrunner_idlabels.method, 
                                           PUT_orgsorgactionsrunnersrunner_idlabels.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'PUT_orgsorgactionsrunnersrunner_idlabels': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class DELETE_orgsorgactionsrunnersrunner_idlabelsname(BaseFunction):
    """"""
    name = "DELETE /orgs/{org}/actions/runners/{runner_id}/labels/{name}"
    url = "https://docs.github.com/en/rest/actions/self-hosted-runners#remove-a-custom-label-from-a-self-hosted-runner-for-an-organization"
    args_in_url = True
    method = DELETE

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="org", param_type=ParameterType.STRING, required=True),  # Organization name,
			Parameter(name="runner_id", param_type=ParameterType.INTEGER, required=True),  # Runner ID,
			Parameter(name="name", param_type=ParameterType.STRING, required=True),  # Label name
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(DELETE_orgsorgactionsrunnersrunner_idlabelsname.method, 
                                           DELETE_orgsorgactionsrunnersrunner_idlabelsname.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'DELETE_orgsorgactionsrunnersrunner_idlabelsname': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class GET_orgsorgactionsrunnergroups(BaseFunction):
    """"""
    name = "GET /orgs/{org}/actions/runner-groups"
    url = "https://docs.github.com/en/rest/actions/self-hosted-runner-groups#list-self-hosted-runner-groups-for-an-organization"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="org", param_type=ParameterType.STRING, required=True),  # Organization name
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(GET_orgsorgactionsrunnergroups.method, 
                                           GET_orgsorgactionsrunnergroups.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'GET_orgsorgactionsrunnergroups': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class GET_orgsorgactionsrunnergroupsrunner_group_id(BaseFunction):
    """"""
    name = "GET /orgs/{org}/actions/runner-groups/{runner_group_id}"
    url = "https://docs.github.com/en/rest/actions/self-hosted-runner-groups#get-a-self-hosted-runner-group-for-an-organization"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="org", param_type=ParameterType.STRING, required=True),  # Organization name,
			Parameter(name="runner_group_id", param_type=ParameterType.INTEGER, required=True),  # Runner group ID
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(GET_orgsorgactionsrunnergroupsrunner_group_id.method, 
                                           GET_orgsorgactionsrunnergroupsrunner_group_id.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'GET_orgsorgactionsrunnergroupsrunner_group_id': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class GET_orgsorgactionsrunnergroupsrunner_group_idhostedrunners(BaseFunction):
    """"""
    name = "GET /orgs/{org}/actions/runner-groups/{runner_group_id}/hosted-runners"
    url = "https://docs.github.com/en/rest/actions/self-hosted-runner-groups#list-github-hosted-runners-in-a-group-for-an-organization"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="org", param_type=ParameterType.STRING, required=True),  # Organization name,
			Parameter(name="runner_group_id", param_type=ParameterType.INTEGER, required=True),  # Runner group ID
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(GET_orgsorgactionsrunnergroupsrunner_group_idhostedrunners.method, 
                                           GET_orgsorgactionsrunnergroupsrunner_group_idhostedrunners.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'GET_orgsorgactionsrunnergroupsrunner_group_idhostedrunners': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class GET_orgsorgactionsrunnergroupsrunner_group_idrepositories(BaseFunction):
    """"""
    name = "GET /orgs/{org}/actions/runner-groups/{runner_group_id}/repositories"
    url = "https://docs.github.com/en/rest/actions/self-hosted-runner-groups#list-repository-access-to-a-self-hosted-runner-group-in-an-organization"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="org", param_type=ParameterType.STRING, required=True),  # Organization name,
			Parameter(name="runner_group_id", param_type=ParameterType.INTEGER, required=True),  # Runner group ID
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(GET_orgsorgactionsrunnergroupsrunner_group_idrepositories.method, 
                                           GET_orgsorgactionsrunnergroupsrunner_group_idrepositories.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'GET_orgsorgactionsrunnergroupsrunner_group_idrepositories': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class GET_orgsorgactionsrunnergroupsrunner_group_idrunners(BaseFunction):
    """"""
    name = "GET /orgs/{org}/actions/runner-groups/{runner_group_id}/runners"
    url = "https://docs.github.com/en/rest/actions/self-hosted-runner-groups#list-self-hosted-runners-in-a-group-for-an-organization"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="org", param_type=ParameterType.STRING, required=True),  # Organization name,
			Parameter(name="runner_group_id", param_type=ParameterType.INTEGER, required=True),  # Runner group ID
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(GET_orgsorgactionsrunnergroupsrunner_group_idrunners.method, 
                                           GET_orgsorgactionsrunnergroupsrunner_group_idrunners.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'GET_orgsorgactionsrunnergroupsrunner_group_idrunners': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class GET_orgsorgactionsrunners(BaseFunction):
    """"""
    name = "GET /orgs/{org}/actions/runners"
    url = "https://docs.github.com/en/rest/actions/self-hosted-runners#list-self-hosted-runners-for-an-organization"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="org", param_type=ParameterType.STRING, required=True),  # Organization name
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(GET_orgsorgactionsrunners.method, 
                                           GET_orgsorgactionsrunners.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'GET_orgsorgactionsrunners': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class GET_orgsorgactionsrunnersdownloads(BaseFunction):
    """"""
    name = "GET /orgs/{org}/actions/runners/downloads"
    url = "https://docs.github.com/en/rest/actions/self-hosted-runners#list-runner-applications-for-an-organization"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="org", param_type=ParameterType.STRING, required=True),  # Organization name
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(GET_orgsorgactionsrunnersdownloads.method, 
                                           GET_orgsorgactionsrunnersdownloads.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'GET_orgsorgactionsrunnersdownloads': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class GET_orgsorgactionsrunnersrunner_id(BaseFunction):
    """"""
    name = "GET /orgs/{org}/actions/runners/{runner_id}"
    url = "https://docs.github.com/en/rest/actions/self-hosted-runners#get-a-self-hosted-runner-for-an-organization"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="org", param_type=ParameterType.STRING, required=True),  # Organization name,
			Parameter(name="runner_id", param_type=ParameterType.INTEGER, required=True),  # Runner ID
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(GET_orgsorgactionsrunnersrunner_id.method, 
                                           GET_orgsorgactionsrunnersrunner_id.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'GET_orgsorgactionsrunnersrunner_id': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class GET_orgsorgactionsrunnersrunner_idlabels(BaseFunction):
    """"""
    name = "GET /orgs/{org}/actions/runners/{runner_id}/labels"
    url = "https://docs.github.com/en/rest/actions/self-hosted-runners#list-labels-for-a-self-hosted-runner-for-an-organization"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="org", param_type=ParameterType.STRING, required=True),  # Organization name,
			Parameter(name="runner_id", param_type=ParameterType.INTEGER, required=True),  # Runner ID
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(GET_orgsorgactionsrunnersrunner_idlabels.method, 
                                           GET_orgsorgactionsrunnersrunner_idlabels.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'GET_orgsorgactionsrunnersrunner_idlabels': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class DELETE_orgsorgactionsrunnergroupsrunner_group_iddiscussionsdiscussion_numbercommentscomment_numberreactionsreaction_id(BaseFunction):
    """"""
    name = "DELETE /orgs/{org}/actions/runner-groups/{runner_group_id}/discussions/{discussion_number}/comments/{comment_number}/reactions/{reaction_id}"
    url = "https://docs.github.com/en/rest/reactions/reactions#delete-team-discussion-comment-reaction"
    args_in_url = True
    method = DELETE

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="org", param_type=ParameterType.STRING, required=True),  # Organization name,
			Parameter(name="runner_group_id", param_type=ParameterType.INTEGER, required=True),  # Runner group ID,
			Parameter(name="discussion_number", param_type=ParameterType.INTEGER, required=True),  # Discussion number,
			Parameter(name="comment_number", param_type=ParameterType.INTEGER, required=True),  # Comment number,
			Parameter(name="reaction_id", param_type=ParameterType.INTEGER, required=True),  # Reaction ID
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(DELETE_orgsorgactionsrunnergroupsrunner_group_iddiscussionsdiscussion_numbercommentscomment_numberreactionsreaction_id.method, 
                                           DELETE_orgsorgactionsrunnergroupsrunner_group_iddiscussionsdiscussion_numbercommentscomment_numberreactionsreaction_id.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'DELETE_orgsorgactionsrunnergroupsrunner_group_iddiscussionsdiscussion_numbercommentscomment_numberreactionsreaction_id': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class DELETE_orgsorgactionsrunnergroupsrunner_group_iddiscussionsdiscussion_numberreactionsreaction_id(BaseFunction):
    """"""
    name = "DELETE /orgs/{org}/actions/runner-groups/{runner_group_id}/discussions/{discussion_number}/reactions/{reaction_id}"
    url = "https://docs.github.com/en/rest/reactions/reactions#delete-team-discussion-reaction"
    args_in_url = True
    method = DELETE

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="org", param_type=ParameterType.STRING, required=True),  # Organization name,
			Parameter(name="runner_group_id", param_type=ParameterType.INTEGER, required=True),  # Runner group ID,
			Parameter(name="discussion_number", param_type=ParameterType.INTEGER, required=True),  # Discussion number,
			Parameter(name="reaction_id", param_type=ParameterType.INTEGER, required=True),  # Reaction ID
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(DELETE_orgsorgactionsrunnergroupsrunner_group_iddiscussionsdiscussion_numberreactionsreaction_id.method, 
                                           DELETE_orgsorgactionsrunnergroupsrunner_group_iddiscussionsdiscussion_numberreactionsreaction_id.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'DELETE_orgsorgactionsrunnergroupsrunner_group_iddiscussionsdiscussion_numberreactionsreaction_id': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class POST_orgsorgactionsvariables(BaseFunction):
    """"""
    name = "POST /orgs/{org}/actions/variables"
    url = "https://docs.github.com/en/rest/actions/variables#create-an-organization-variable"
    args_in_url = True
    method = INSERT

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="org", param_type=ParameterType.STRING, required=True),  # Organization name
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(POST_orgsorgactionsvariables.method, 
                                           POST_orgsorgactionsvariables.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'POST_orgsorgactionsvariables': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class PATCH_orgsorgactionsvariablesname(BaseFunction):
    """"""
    name = "PATCH /orgs/{org}/actions/variables/{name}"
    url = "https://docs.github.com/en/rest/actions/variables#update-an-organization-variable"
    args_in_url = True
    method = UPDATE

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="org", param_type=ParameterType.STRING, required=True),  # Organization name,
			Parameter(name="name", param_type=ParameterType.STRING, required=True),  # Variable name
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(PATCH_orgsorgactionsvariablesname.method, 
                                           PATCH_orgsorgactionsvariablesname.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'PATCH_orgsorgactionsvariablesname': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class DELETE_orgsorgactionsvariablesname(BaseFunction):
    """"""
    name = "DELETE /orgs/{org}/actions/variables/{name}"
    url = "https://docs.github.com/en/rest/actions/variables#delete-an-organization-variable"
    args_in_url = True
    method = DELETE

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="org", param_type=ParameterType.STRING, required=True),  # Organization name,
			Parameter(name="name", param_type=ParameterType.STRING, required=True),  # Variable name
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(DELETE_orgsorgactionsvariablesname.method, 
                                           DELETE_orgsorgactionsvariablesname.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'DELETE_orgsorgactionsvariablesname': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class PUT_orgsorgactionsvariablesnamerepositories(BaseFunction):
    """"""
    name = "PUT /orgs/{org}/actions/variables/{name}/repositories"
    url = "https://docs.github.com/en/rest/actions/variables#set-selected-repositories-for-an-organization-variable"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="org", param_type=ParameterType.STRING, required=True),  # Organization name,
			Parameter(name="name", param_type=ParameterType.STRING, required=True),  # Variable name,
			Parameter(name="repositories", param_type=OutputParameterType.OBJECT, required=True),  # Object containing list of repositories
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(PUT_orgsorgactionsvariablesnamerepositories.method, 
                                           PUT_orgsorgactionsvariablesnamerepositories.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'PUT_orgsorgactionsvariablesnamerepositories': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class PUT_orgsorgactionsvariablesnamerepositoriesrepository_id(BaseFunction):
    """Multiple permissions are required, or a different permission may be used."""
    name = "PUT /orgs/{org}/actions/variables/{name}/repositories/{repository_id}"
    url = "https://docs.github.com/en/rest/actions/variables#add-selected-repository-to-an-organization-variable"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="org", param_type=ParameterType.STRING, required=True),  # Organization name,
			Parameter(name="name", param_type=ParameterType.STRING, required=True),  # Variable name,
			Parameter(name="repository_id", param_type=ParameterType.INTEGER, required=True),  # Repository ID
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(PUT_orgsorgactionsvariablesnamerepositoriesrepository_id.method, 
                                           PUT_orgsorgactionsvariablesnamerepositoriesrepository_id.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'PUT_orgsorgactionsvariablesnamerepositoriesrepository_id': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class DELETE_orgsorgactionsvariablesnamerepositoriesrepository_id(BaseFunction):
    """Multiple permissions are required, or a different permission may be used."""
    name = "DELETE /orgs/{org}/actions/variables/{name}/repositories/{repository_id}"
    url = "https://docs.github.com/en/rest/actions/variables#remove-selected-repository-from-an-organization-variable"
    args_in_url = True
    method = DELETE

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="org", param_type=ParameterType.STRING, required=True),  # Organization name,
			Parameter(name="name", param_type=ParameterType.STRING, required=True),  # Variable name,
			Parameter(name="repository_id", param_type=ParameterType.INTEGER, required=True),  # Repository ID
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(DELETE_orgsorgactionsvariablesnamerepositoriesrepository_id.method, 
                                           DELETE_orgsorgactionsvariablesnamerepositoriesrepository_id.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'DELETE_orgsorgactionsvariablesnamerepositoriesrepository_id': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class GET_orgsorgactionsvariables(BaseFunction):
    """"""
    name = "GET /orgs/{org}/actions/variables"
    url = "https://docs.github.com/en/rest/actions/variables#list-organization-variables"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="org", param_type=ParameterType.STRING, required=True),  # Organization name
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(GET_orgsorgactionsvariables.method, 
                                           GET_orgsorgactionsvariables.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'GET_orgsorgactionsvariables': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class GET_orgsorgactionsvariablesname(BaseFunction):
    """"""
    name = "GET /orgs/{org}/actions/variables/{name}"
    url = "https://docs.github.com/en/rest/actions/variables#get-an-organization-variable"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="org", param_type=ParameterType.STRING, required=True),  # Organization name,
			Parameter(name="name", param_type=ParameterType.STRING, required=True),  # Variable name
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(GET_orgsorgactionsvariablesname.method, 
                                           GET_orgsorgactionsvariablesname.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'GET_orgsorgactionsvariablesname': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class GET_orgsorgactionsvariablesnamerepositories(BaseFunction):
    """"""
    name = "GET /orgs/{org}/actions/variables/{name}/repositories"
    url = "https://docs.github.com/en/rest/actions/variables#list-selected-repositories-for-an-organization-variable"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="org", param_type=ParameterType.STRING, required=True),  # Organization name,
			Parameter(name="name", param_type=ParameterType.STRING, required=True),  # Variable name
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(GET_orgsorgactionsvariablesnamerepositories.method, 
                                           GET_orgsorgactionsvariablesnamerepositories.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'GET_orgsorgactionsvariablesnamerepositories': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class POST_orgsorgactionssecretssecret_name(BaseFunction):
    """"""
    name = "POST /orgs/{org}/actions/secrets/{secret_name}"
    url = "https://docs.github.com/en/rest/actions/secrets#create-or-update-an-organization-secret"
    args_in_url = True
    method = INSERT

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="org", param_type=ParameterType.STRING, required=True),  # Organization name,
			Parameter(name="secret_name", param_type=ParameterType.STRING, required=True),  # Secret name
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(POST_orgsorgactionssecretssecret_name.method, 
                                           POST_orgsorgactionssecretssecret_name.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'POST_orgsorgactionssecretssecret_name': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class DELETE_orgsorgactionssecretssecret_name(BaseFunction):
    """"""
    name = "DELETE /orgs/{org}/actions/secrets/{secret_name}"
    url = "https://docs.github.com/en/rest/actions/secrets#delete-an-organization-secret"
    args_in_url = True
    method = DELETE

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="org", param_type=ParameterType.STRING, required=True),  # Organization name,
			Parameter(name="secret_name", param_type=ParameterType.STRING, required=True),  # Secret name
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(DELETE_orgsorgactionssecretssecret_name.method, 
                                           DELETE_orgsorgactionssecretssecret_name.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'DELETE_orgsorgactionssecretssecret_name': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class PUT_orgsorgactionssecretssecret_namerepositories(BaseFunction):
    """"""
    name = "PUT /orgs/{org}/actions/secrets/{secret_name}/repositories"
    url = "https://docs.github.com/en/rest/actions/secrets#set-selected-repositories-for-an-organization-secret"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="org", param_type=ParameterType.STRING, required=True),  # Organization name,
			Parameter(name="secret_name", param_type=ParameterType.STRING, required=True),  # Secret name,
			Parameter(name="repositories", param_type=OutputParameterType.OBJECT, required=True),  # Object containing list of repositories
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(PUT_orgsorgactionssecretssecret_namerepositories.method, 
                                           PUT_orgsorgactionssecretssecret_namerepositories.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'PUT_orgsorgactionssecretssecret_namerepositories': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class PUT_orgsorgactionssecretssecret_namerepositoriesrepository_id(BaseFunction):
    """Multiple permissions are required, or a different permission may be used."""
    name = "PUT /orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}"
    url = "https://docs.github.com/en/rest/actions/secrets#add-selected-repository-to-an-organization-secret"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="org", param_type=ParameterType.STRING, required=True),  # Organization name,
			Parameter(name="secret_name", param_type=ParameterType.STRING, required=True),  # Secret name,
			Parameter(name="repository_id", param_type=ParameterType.INTEGER, required=True),  # Repository ID
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(PUT_orgsorgactionssecretssecret_namerepositoriesrepository_id.method, 
                                           PUT_orgsorgactionssecretssecret_namerepositoriesrepository_id.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'PUT_orgsorgactionssecretssecret_namerepositoriesrepository_id': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class DELETE_orgsorgactionssecretssecret_namerepositoriesrepository_id(BaseFunction):
    """Multiple permissions are required, or a different permission may be used."""
    name = "DELETE /orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}"
    url = "https://docs.github.com/en/rest/actions/secrets#remove-selected-repository-from-an-organization-secret"
    args_in_url = True
    method = DELETE

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="org", param_type=ParameterType.STRING, required=True),  # Organization name,
			Parameter(name="secret_name", param_type=ParameterType.STRING, required=True),  # Secret name,
			Parameter(name="repository_id", param_type=ParameterType.INTEGER, required=True),  # Repository ID
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(DELETE_orgsorgactionssecretssecret_namerepositoriesrepository_id.method, 
                                           DELETE_orgsorgactionssecretssecret_namerepositoriesrepository_id.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'DELETE_orgsorgactionssecretssecret_namerepositoriesrepository_id': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class GET_orgsorgactionssecrets(BaseFunction):
    """"""
    name = "GET /orgs/{org}/actions/secrets"
    url = "https://docs.github.com/en/rest/actions/secrets#list-organization-secrets"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="org", param_type=ParameterType.STRING, required=True),  # Organization name
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(GET_orgsorgactionssecrets.method, 
                                           GET_orgsorgactionssecrets.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'GET_orgsorgactionssecrets': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class GET_orgsorgactionssecretspublickey(BaseFunction):
    """"""
    name = "GET /orgs/{org}/actions/secrets/public-key"
    url = "https://docs.github.com/en/rest/actions/secrets#get-an-organization-public-key"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="org", param_type=ParameterType.STRING, required=True),  # Organization name
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(GET_orgsorgactionssecretspublickey.method, 
                                           GET_orgsorgactionssecretspublickey.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'GET_orgsorgactionssecretspublickey': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class GET_orgsorgactionssecretssecret_name(BaseFunction):
    """"""
    name = "GET /orgs/{org}/actions/secrets/{secret_name}"
    url = "https://docs.github.com/en/rest/actions/secrets#get-an-organization-secret"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="org", param_type=ParameterType.STRING, required=True),  # Organization name,
			Parameter(name="secret_name", param_type=ParameterType.STRING, required=True),  # Secret name
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(GET_orgsorgactionssecretssecret_name.method, 
                                           GET_orgsorgactionssecretssecret_name.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'GET_orgsorgactionssecretssecret_name': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class GET_orgsorgactionssecretssecret_namerepositories(BaseFunction):
    """"""
    name = "GET /orgs/{org}/actions/secrets/{secret_name}/repositories"
    url = "https://docs.github.com/en/rest/actions/secrets#list-selected-repositories-for-an-organization-secret"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="org", param_type=ParameterType.STRING, required=True),  # Organization name,
			Parameter(name="secret_name", param_type=ParameterType.STRING, required=True),  # Secret name
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(GET_orgsorgactionssecretssecret_namerepositories.method, 
                                           GET_orgsorgactionssecretssecret_namerepositories.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'GET_orgsorgactionssecretssecret_namerepositories': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class POST_orgsorgactionsrunnersgeneratejitconfig(BaseFunction):
    """"""
    name = "POST /orgs/{org}/actions/runners/generate-jitconfig"
    url = "https://docs.github.com/en/rest/actions/self-hosted-runners#create-configuration-for-a-just-in-time-runner-for-an-organization"
    args_in_url = True
    method = INSERT

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="org", param_type=ParameterType.STRING, required=True),  # Organization name
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(POST_orgsorgactionsrunnersgeneratejitconfig.method, 
                                           POST_orgsorgactionsrunnersgeneratejitconfig.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'POST_orgsorgactionsrunnersgeneratejitconfig': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class POST_orgsorgactionsrunnersregistrationtoken(BaseFunction):
    """"""
    name = "POST /orgs/{org}/actions/runners/registration-token"
    url = "https://docs.github.com/en/rest/actions/self-hosted-runners#create-a-registration-token-for-an-organization"
    args_in_url = True
    method = INSERT

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="org", param_type=ParameterType.STRING, required=True),  # Organization name
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(POST_orgsorgactionsrunnersregistrationtoken.method, 
                                           POST_orgsorgactionsrunnersregistrationtoken.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'POST_orgsorgactionsrunnersregistrationtoken': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class POST_orgsorgactionsrunnersremovetoken(BaseFunction):
    """"""
    name = "POST /orgs/{org}/actions/runners/remove-token"
    url = "https://docs.github.com/en/rest/actions/self-hosted-runners#create-a-remove-token-for-an-organization"
    args_in_url = True
    method = INSERT

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="org", param_type=ParameterType.STRING, required=True),  # Organization name
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(POST_orgsorgactionsrunnersremovetoken.method, 
                                           POST_orgsorgactionsrunnersremovetoken.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'POST_orgsorgactionsrunnersremovetoken': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class DELETE_orgsorgactionsrunnersrunner_id(BaseFunction):
    """"""
    name = "DELETE /orgs/{org}/actions/runners/{runner_id}"
    url = "https://docs.github.com/en/rest/actions/self-hosted-runners#delete-a-self-hosted-runner-from-an-organization"
    args_in_url = True
    method = DELETE

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="org", param_type=ParameterType.STRING, required=True),  # Organization name,
			Parameter(name="runner_id", param_type=ParameterType.INTEGER, required=True),  # Runner ID
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(DELETE_orgsorgactionsrunnersrunner_id.method, 
                                           DELETE_orgsorgactionsrunnersrunner_id.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'DELETE_orgsorgactionsrunnersrunner_id': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class POST_orgsorgactionsrunnersrunner_idlabels(BaseFunction):
    """"""
    name = "POST /orgs/{org}/actions/runners/{runner_id}/labels"
    url = "https://docs.github.com/en/rest/actions/self-hosted-runners#add-custom-labels-to-a-self-hosted-runner-for-an-organization"
    args_in_url = True
    method = INSERT

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="org", param_type=ParameterType.STRING, required=True),  # Organization name,
			Parameter(name="runner_id", param_type=ParameterType.INTEGER, required=True),  # Runner ID,
			Parameter(name="labels", param_type=OutputParameterType.OBJECT, required=True),  # Object containing labels
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(POST_orgsorgactionsrunnersrunner_idlabels.method, 
                                           POST_orgsorgactionsrunnersrunner_idlabels.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'POST_orgsorgactionsrunnersrunner_idlabels': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class PUT_orgsorgactionsrunnersrunner_idlabels(BaseFunction):
    """"""
    name = "PUT /orgs/{org}/actions/runners/{runner_id}/labels"
    url = "https://docs.github.com/en/rest/actions/self-hosted-runners#set-custom-labels-for-a-self-hosted-runner-for-an-organization"
    args_in_url = True
    method = UPDATE

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="org", param_type=ParameterType.STRING, required=True),  # Organization name,
			Parameter(name="runner_id", param_type=ParameterType.INTEGER, required=True),  # Runner ID,
			Parameter(name="labels", param_type=OutputParameterType.OBJECT, required=True),  # Object containing labels
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(PUT_orgsorgactionsrunnersrunner_idlabels.method, 
                                           PUT_orgsorgactionsrunnersrunner_idlabels.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'PUT_orgsorgactionsrunnersrunner_idlabels': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class DELETE_orgsorgactionsrunnersrunner_idlabelsname(BaseFunction):
    """"""
    name = "DELETE /orgs/{org}/actions/runners/{runner_id}/labels/{name}"
    url = "https://docs.github.com/en/rest/actions/self-hosted-runners#remove-a-custom-label-from-a-self-hosted-runner-for-an-organization"
    args_in_url = True
    method = DELETE

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="org", param_type=ParameterType.STRING, required=True),  # Organization name,
			Parameter(name="runner_id", param_type=ParameterType.INTEGER, required=True),  # Runner ID,
			Parameter(name="name", param_type=ParameterType.STRING, required=True),  # Label name
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(DELETE_orgsorgactionsrunnersrunner_idlabelsname.method, 
                                           DELETE_orgsorgactionsrunnersrunner_idlabelsname.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'DELETE_orgsorgactionsrunnersrunner_idlabelsname': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class GET_orgsorgactionsrunnergroups(BaseFunction):
    """"""
    name = "GET /orgs/{org}/actions/runner-groups"
    url = "https://docs.github.com/en/rest/actions/self-hosted-runner-groups#list-self-hosted-runner-groups-for-an-organization"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="org", param_type=ParameterType.STRING, required=True),  # Organization name
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(GET_orgsorgactionsrunnergroups.method, 
                                           GET_orgsorgactionsrunnergroups.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'GET_orgsorgactionsrunnergroups': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class GET_orgsorgactionsrunnergroupsrunner_group_id(BaseFunction):
    """"""
    name = "GET /orgs/{org}/actions/runner-groups/{runner_group_id}"
    url = "https://docs.github.com/en/rest/actions/self-hosted-runner-groups#get-a-self-hosted-runner-group-for-an-organization"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="org", param_type=ParameterType.STRING, required=True),  # Organization name,
			Parameter(name="runner_group_id", param_type=ParameterType.INTEGER, required=True),  # Runner group ID
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(GET_orgsorgactionsrunnergroupsrunner_group_id.method, 
                                           GET_orgsorgactionsrunnergroupsrunner_group_id.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'GET_orgsorgactionsrunnergroupsrunner_group_id': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class GET_orgsorgactionsrunnergroupsrunner_group_idhostedrunners(BaseFunction):
    """"""
    name = "GET /orgs/{org}/actions/runner-groups/{runner_group_id}/hosted-runners"
    url = "https://docs.github.com/en/rest/actions/self-hosted-runner-groups#list-github-hosted-runners-in-a-group-for-an-organization"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="org", param_type=ParameterType.STRING, required=True),  # Organization name,
			Parameter(name="runner_group_id", param_type=ParameterType.INTEGER, required=True),  # Runner group ID
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(GET_orgsorgactionsrunnergroupsrunner_group_idhostedrunners.method, 
                                           GET_orgsorgactionsrunnergroupsrunner_group_idhostedrunners.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'GET_orgsorgactionsrunnergroupsrunner_group_idhostedrunners': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class GET_orgsorgactionsrunnergroupsrunner_group_idrepositories(BaseFunction):
    """"""
    name = "GET /orgs/{org}/actions/runner-groups/{runner_group_id}/repositories"
    url = "https://docs.github.com/en/rest/actions/self-hosted-runner-groups#list-repository-access-to-a-self-hosted-runner-group-in-an-organization"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="org", param_type=ParameterType.STRING, required=True),  # Organization name,
			Parameter(name="runner_group_id", param_type=ParameterType.INTEGER, required=True),  # Runner group ID
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(GET_orgsorgactionsrunnergroupsrunner_group_idrepositories.method, 
                                           GET_orgsorgactionsrunnergroupsrunner_group_idrepositories.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'GET_orgsorgactionsrunnergroupsrunner_group_idrepositories': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class GET_orgsorgactionsrunnergroupsrunner_group_idrunners(BaseFunction):
    """"""
    name = "GET /orgs/{org}/actions/runner-groups/{runner_group_id}/runners"
    url = "https://docs.github.com/en/rest/actions/self-hosted-runner-groups#list-self-hosted-runners-in-a-group-for-an-organization"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="org", param_type=ParameterType.STRING, required=True),  # Organization name,
			Parameter(name="runner_group_id", param_type=ParameterType.INTEGER, required=True),  # Runner group ID
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(GET_orgsorgactionsrunnergroupsrunner_group_idrunners.method, 
                                           GET_orgsorgactionsrunnergroupsrunner_group_idrunners.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'GET_orgsorgactionsrunnergroupsrunner_group_idrunners': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class GET_orgsorgactionsrunners(BaseFunction):
    """"""
    name = "GET /orgs/{org}/actions/runners"
    url = "https://docs.github.com/en/rest/actions/self-hosted-runners#list-self-hosted-runners-for-an-organization"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="org", param_type=ParameterType.STRING, required=True),  # Organization name
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(GET_orgsorgactionsrunners.method, 
                                           GET_orgsorgactionsrunners.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'GET_orgsorgactionsrunners': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class GET_orgsorgactionsrunnersdownloads(BaseFunction):
    """"""
    name = "GET /orgs/{org}/actions/runners/downloads"
    url = "https://docs.github.com/en/rest/actions/self-hosted-runners#list-runner-applications-for-an-organization"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="org", param_type=ParameterType.STRING, required=True),  # Organization name
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(GET_orgsorgactionsrunnersdownloads.method, 
                                           GET_orgsorgactionsrunnersdownloads.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'GET_orgsorgactionsrunnersdownloads': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class GET_orgsorgactionsrunnersrunner_id(BaseFunction):
    """"""
    name = "GET /orgs/{org}/actions/runners/{runner_id}"
    url = "https://docs.github.com/en/rest/actions/self-hosted-runners#get-a-self-hosted-runner-for-an-organization"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="org", param_type=ParameterType.STRING, required=True),  # Organization name,
			Parameter(name="runner_id", param_type=ParameterType.INTEGER, required=True),  # Runner ID
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(GET_orgsorgactionsrunnersrunner_id.method, 
                                           GET_orgsorgactionsrunnersrunner_id.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'GET_orgsorgactionsrunnersrunner_id': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class GET_orgsorgactionsrunnersrunner_idlabels(BaseFunction):
    """"""
    name = "GET /orgs/{org}/actions/runners/{runner_id}/labels"
    url = "https://docs.github.com/en/rest/actions/self-hosted-runners#list-labels-for-a-self-hosted-runner-for-an-organization"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="org", param_type=ParameterType.STRING, required=True),  # Organization name,
			Parameter(name="runner_id", param_type=ParameterType.INTEGER, required=True),  # Runner ID
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(GET_orgsorgactionsrunnersrunner_idlabels.method, 
                                           GET_orgsorgactionsrunnersrunner_idlabels.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'GET_orgsorgactionsrunnersrunner_idlabels': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class DELETE_orgsorgactionsrunnergroupsrunner_group_iddiscussionsdiscussion_numbercommentscomment_numberreactionsreaction_id(BaseFunction):
    """"""
    name = "DELETE /orgs/{org}/actions/runner-groups/{runner_group_id}/discussions/{discussion_number}/comments/{comment_number}/reactions/{reaction_id}"
    url = "https://docs.github.com/en/rest/reactions/reactions#delete-team-discussion-comment-reaction"
    args_in_url = True
    method = DELETE

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="org", param_type=ParameterType.STRING, required=True),  # Organization name,
			Parameter(name="runner_group_id", param_type=ParameterType.INTEGER, required=True),  # Runner group ID,
			Parameter(name="discussion_number", param_type=ParameterType.INTEGER, required=True),  # Discussion number,
			Parameter(name="comment_number", param_type=ParameterType.INTEGER, required=True),  # Comment number,
			Parameter(name="reaction_id", param_type=ParameterType.INTEGER, required=True),  # Reaction ID
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(DELETE_orgsorgactionsrunnergroupsrunner_group_iddiscussionsdiscussion_numbercommentscomment_numberreactionsreaction_id.method, 
                                           DELETE_orgsorgactionsrunnergroupsrunner_group_iddiscussionsdiscussion_numbercommentscomment_numberreactionsreaction_id.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'DELETE_orgsorgactionsrunnergroupsrunner_group_iddiscussionsdiscussion_numbercommentscomment_numberreactionsreaction_id': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class DELETE_orgsorgactionsrunnergroupsrunner_group_iddiscussionsdiscussion_numberreactionsreaction_id(BaseFunction):
    """"""
    name = "DELETE /orgs/{org}/actions/runner-groups/{runner_group_id}/discussions/{discussion_number}/reactions/{reaction_id}"
    url = "https://docs.github.com/en/rest/reactions/reactions#delete-team-discussion-reaction"
    args_in_url = True
    method = DELETE

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="org", param_type=ParameterType.STRING, required=True),  # Organization name,
			Parameter(name="runner_group_id", param_type=ParameterType.INTEGER, required=True),  # Runner group ID,
			Parameter(name="discussion_number", param_type=ParameterType.INTEGER, required=True),  # Discussion number,
			Parameter(name="reaction_id", param_type=ParameterType.INTEGER, required=True),  # Reaction ID
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(DELETE_orgsorgactionsrunnergroupsrunner_group_iddiscussionsdiscussion_numberreactionsreaction_id.method, 
                                           DELETE_orgsorgactionsrunnergroupsrunner_group_iddiscussionsdiscussion_numberreactionsreaction_id.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'DELETE_orgsorgactionsrunnergroupsrunner_group_iddiscussionsdiscussion_numberreactionsreaction_id': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class POST_orgsorgactionsvariables(BaseFunction):
    """"""
    name = "POST /orgs/{org}/actions/variables"
    url = "https://docs.github.com/en/rest/actions/variables#create-an-organization-variable"
    args_in_url = True
    method = INSERT

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="org", param_type=ParameterType.STRING, required=True),  # Organization name
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(POST_orgsorgactionsvariables.method, 
                                           POST_orgsorgactionsvariables.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'POST_orgsorgactionsvariables': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class PATCH_orgsorgactionsvariablesname(BaseFunction):
    """"""
    name = "PATCH /orgs/{org}/actions/variables/{name}"
    url = "https://docs.github.com/en/rest/actions/variables#update-an-organization-variable"
    args_in_url = True
    method = UPDATE

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="org", param_type=ParameterType.STRING, required=True),  # Organization name,
			Parameter(name="name", param_type=ParameterType.STRING, required=True),  # Variable name
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(PATCH_orgsorgactionsvariablesname.method, 
                                           PATCH_orgsorgactionsvariablesname.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'PATCH_orgsorgactionsvariablesname': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class DELETE_orgsorgactionsvariablesname(BaseFunction):
    """"""
    name = "DELETE /orgs/{org}/actions/variables/{name}"
    url = "https://docs.github.com/en/rest/actions/variables#delete-an-organization-variable"
    args_in_url = True
    method = DELETE

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="org", param_type=ParameterType.STRING, required=True),  # Organization name,
			Parameter(name="name", param_type=ParameterType.STRING, required=True),  # Variable name
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(DELETE_orgsorgactionsvariablesname.method, 
                                           DELETE_orgsorgactionsvariablesname.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'DELETE_orgsorgactionsvariablesname': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class PUT_orgsorgactionsvariablesnamerepositories(BaseFunction):
    """"""
    name = "PUT /orgs/{org}/actions/variables/{name}/repositories"
    url = "https://docs.github.com/en/rest/actions/variables#set-selected-repositories-for-an-organization-variable"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="org", param_type=ParameterType.STRING, required=True),  # Organization name,
			Parameter(name="name", param_type=ParameterType.STRING, required=True),  # Variable name,
			Parameter(name="repositories", param_type=OutputParameterType.OBJECT, required=True),  # Object containing list of repositories
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(PUT_orgsorgactionsvariablesnamerepositories.method, 
                                           PUT_orgsorgactionsvariablesnamerepositories.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'PUT_orgsorgactionsvariablesnamerepositories': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class PUT_orgsorgactionsvariablesnamerepositoriesrepository_id(BaseFunction):
    """Multiple permissions are required, or a different permission may be used."""
    name = "PUT /orgs/{org}/actions/variables/{name}/repositories/{repository_id}"
    url = "https://docs.github.com/en/rest/actions/variables#add-selected-repository-to-an-organization-variable"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="org", param_type=ParameterType.STRING, required=True),  # Organization name,
			Parameter(name="name", param_type=ParameterType.STRING, required=True),  # Variable name,
			Parameter(name="repository_id", param_type=ParameterType.INTEGER, required=True),  # Repository ID
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(PUT_orgsorgactionsvariablesnamerepositoriesrepository_id.method, 
                                           PUT_orgsorgactionsvariablesnamerepositoriesrepository_id.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'PUT_orgsorgactionsvariablesnamerepositoriesrepository_id': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class DELETE_orgsorgactionsvariablesnamerepositoriesrepository_id(BaseFunction):
    """Multiple permissions are required, or a different permission may be used."""
    name = "DELETE /orgs/{org}/actions/variables/{name}/repositories/{repository_id}"
    url = "https://docs.github.com/en/rest/actions/variables#remove-selected-repository-from-an-organization-variable"
    args_in_url = True
    method = DELETE

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="org", param_type=ParameterType.STRING, required=True),  # Organization name,
			Parameter(name="name", param_type=ParameterType.STRING, required=True),  # Variable name,
			Parameter(name="repository_id", param_type=ParameterType.INTEGER, required=True),  # Repository ID
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(DELETE_orgsorgactionsvariablesnamerepositoriesrepository_id.method, 
                                           DELETE_orgsorgactionsvariablesnamerepositoriesrepository_id.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'DELETE_orgsorgactionsvariablesnamerepositoriesrepository_id': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class GET_orgsorgactionsvariables(BaseFunction):
    """"""
    name = "GET /orgs/{org}/actions/variables"
    url = "https://docs.github.com/en/rest/actions/variables#list-organization-variables"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="org", param_type=ParameterType.STRING, required=True),  # Organization name
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(GET_orgsorgactionsvariables.method, 
                                           GET_orgsorgactionsvariables.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'GET_orgsorgactionsvariables': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class GET_orgsorgactionsvariablesname(BaseFunction):
    """"""
    name = "GET /orgs/{org}/actions/variables/{name}"
    url = "https://docs.github.com/en/rest/actions/variables#get-an-organization-variable"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="org", param_type=ParameterType.STRING, required=True),  # Organization name,
			Parameter(name="name", param_type=ParameterType.STRING, required=True),  # Variable name
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(GET_orgsorgactionsvariablesname.method, 
                                           GET_orgsorgactionsvariablesname.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'GET_orgsorgactionsvariablesname': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class GET_orgsorgactionsvariablesnamerepositories(BaseFunction):
    """"""
    name = "GET /orgs/{org}/actions/variables/{name}/repositories"
    url = "https://docs.github.com/en/rest/actions/variables#list-selected-repositories-for-an-organization-variable"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="org", param_type=ParameterType.STRING, required=True),  # Organization name,
			Parameter(name="name", param_type=ParameterType.STRING, required=True),  # Variable name
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(GET_orgsorgactionsvariablesnamerepositories.method, 
                                           GET_orgsorgactionsvariablesnamerepositories.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'GET_orgsorgactionsvariablesnamerepositories': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class POST_orgsorgactionssecretssecret_name(BaseFunction):
    """"""
    name = "POST /orgs/{org}/actions/secrets/{secret_name}"
    url = "https://docs.github.com/en/rest/actions/secrets#create-or-update-an-organization-secret"
    args_in_url = True
    method = INSERT

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="org", param_type=ParameterType.STRING, required=True),  # Organization name,
			Parameter(name="secret_name", param_type=ParameterType.STRING, required=True),  # Secret name
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(POST_orgsorgactionssecretssecret_name.method, 
                                           POST_orgsorgactionssecretssecret_name.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'POST_orgsorgactionssecretssecret_name': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class DELETE_orgsorgactionssecretssecret_name(BaseFunction):
    """"""
    name = "DELETE /orgs/{org}/actions/secrets/{secret_name}"
    url = "https://docs.github.com/en/rest/actions/secrets#delete-an-organization-secret"
    args_in_url = True
    method = DELETE

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="org", param_type=ParameterType.STRING, required=True),  # Organization name,
			Parameter(name="secret_name", param_type=ParameterType.STRING, required=True),  # Secret name
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(DELETE_orgsorgactionssecretssecret_name.method, 
                                           DELETE_orgsorgactionssecretssecret_name.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'DELETE_orgsorgactionssecretssecret_name': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class PUT_orgsorgactionssecretssecret_namerepositories(BaseFunction):
    """"""
    name = "PUT /orgs/{org}/actions/secrets/{secret_name}/repositories"
    url = "https://docs.github.com/en/rest/actions/secrets#set-selected-repositories-for-an-organization-secret"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="org", param_type=ParameterType.STRING, required=True),  # Organization name,
			Parameter(name="secret_name", param_type=ParameterType.STRING, required=True),  # Secret name,
			Parameter(name="repositories", param_type=OutputParameterType.OBJECT, required=True),  # Object containing list of repositories
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(PUT_orgsorgactionssecretssecret_namerepositories.method, 
                                           PUT_orgsorgactionssecretssecret_namerepositories.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'PUT_orgsorgactionssecretssecret_namerepositories': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class PUT_orgsorgactionssecretssecret_namerepositoriesrepository_id(BaseFunction):
    """Multiple permissions are required, or a different permission may be used."""
    name = "PUT /orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}"
    url = "https://docs.github.com/en/rest/actions/secrets#add-selected-repository-to-an-organization-secret"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="org", param_type=ParameterType.STRING, required=True),  # Organization name,
			Parameter(name="secret_name", param_type=ParameterType.STRING, required=True),  # Secret name,
			Parameter(name="repository_id", param_type=ParameterType.INTEGER, required=True),  # Repository ID
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(PUT_orgsorgactionssecretssecret_namerepositoriesrepository_id.method, 
                                           PUT_orgsorgactionssecretssecret_namerepositoriesrepository_id.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'PUT_orgsorgactionssecretssecret_namerepositoriesrepository_id': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class DELETE_orgsorgactionssecretssecret_namerepositoriesrepository_id(BaseFunction):
    """Multiple permissions are required, or a different permission may be used."""
    name = "DELETE /orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}"
    url = "https://docs.github.com/en/rest/actions/secrets#remove-selected-repository-from-an-organization-secret"
    args_in_url = True
    method = DELETE

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="org", param_type=ParameterType.STRING, required=True),  # Organization name,
			Parameter(name="secret_name", param_type=ParameterType.STRING, required=True),  # Secret name,
			Parameter(name="repository_id", param_type=ParameterType.INTEGER, required=True),  # Repository ID
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(DELETE_orgsorgactionssecretssecret_namerepositoriesrepository_id.method, 
                                           DELETE_orgsorgactionssecretssecret_namerepositoriesrepository_id.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'DELETE_orgsorgactionssecretssecret_namerepositoriesrepository_id': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class GET_orgsorgactionssecrets(BaseFunction):
    """"""
    name = "GET /orgs/{org}/actions/secrets"
    url = "https://docs.github.com/en/rest/actions/secrets#list-organization-secrets"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="org", param_type=ParameterType.STRING, required=True),  # Organization name
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(GET_orgsorgactionssecrets.method, 
                                           GET_orgsorgactionssecrets.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'GET_orgsorgactionssecrets': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class GET_orgsorgactionssecretspublickey(BaseFunction):
    """"""
    name = "GET /orgs/{org}/actions/secrets/public-key"
    url = "https://docs.github.com/en/rest/actions/secrets#get-an-organization-public-key"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="org", param_type=ParameterType.STRING, required=True),  # Organization name
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(GET_orgsorgactionssecretspublickey.method, 
                                           GET_orgsorgactionssecretspublickey.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'GET_orgsorgactionssecretspublickey': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class GET_orgsorgactionssecretssecret_name(BaseFunction):
    """"""
    name = "GET /orgs/{org}/actions/secrets/{secret_name}"
    url = "https://docs.github.com/en/rest/actions/secrets#get-an-organization-secret"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="org", param_type=ParameterType.STRING, required=True),  # Organization name,
			Parameter(name="secret_name", param_type=ParameterType.STRING, required=True),  # Secret name
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(GET_orgsorgactionssecretssecret_name.method, 
                                           GET_orgsorgactionssecretssecret_name.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'GET_orgsorgactionssecretssecret_name': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class GET_orgsorgactionssecretssecret_namerepositories(BaseFunction):
    """"""
    name = "GET /orgs/{org}/actions/secrets/{secret_name}/repositories"
    url = "https://docs.github.com/en/rest/actions/secrets#list-selected-repositories-for-an-organization-secret"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="org", param_type=ParameterType.STRING, required=True),  # Organization name,
			Parameter(name="secret_name", param_type=ParameterType.STRING, required=True),  # Secret name
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(GET_orgsorgactionssecretssecret_namerepositories.method, 
                                           GET_orgsorgactionssecretssecret_namerepositories.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'GET_orgsorgactionssecretssecret_namerepositories': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Check_if_Dependabot_security_updates_are_enabled_for_a_repository(BaseFunction):
    """Checks if Dependabot security updates are enabled for a specific repository."""
    name = "Check if Dependabot security updates are enabled for a repository"
    url = "https://api.github.com/repos/{owner}/{repo}/automated-security-fixes"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="owner", param_type=ParameterType.STRING, required=True),  # Repository owner,
			Parameter(name="repo", param_type=ParameterType.STRING, required=True),  # Repository name
        ]

    def get_output_schema(self):
        return [
            OutputParameter(name="status", param_type=OutputParameterType.STRING, is_array=False),  # Indicates if automated security fixes are enabled
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Check_if_Dependabot_security_updates_are_enabled_for_a_repository.method, 
                                           Check_if_Dependabot_security_updates_are_enabled_for_a_repository.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Check_if_Dependabot_security_updates_are_enabled_for_a_repository': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Get_branch_protection_settings(BaseFunction):
    """Retrieves the branch protection settings for a specific branch."""
    name = "Get branch protection settings"
    url = "https://api.github.com/repos/{owner}/{repo}/branches/{branch}/protection"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="owner", param_type=ParameterType.STRING, required=True),  # Repository owner,
			Parameter(name="repo", param_type=ParameterType.STRING, required=True),  # Repository name,
			Parameter(name="branch", param_type=ParameterType.STRING, required=True),  # Branch name
        ]

    def get_output_schema(self):
        return [
            OutputParameter(name="protection", param_type=OutputParameterType.OBJECT, is_array=False),  # Protection settings for the branch
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Get_branch_protection_settings.method, 
                                           Get_branch_protection_settings.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_branch_protection_settings': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Check_if_admins_are_enforced_on_branch_protection(BaseFunction):
    """Checks if admin enforcement is enabled on branch protection."""
    name = "Check if admins are enforced on branch protection"
    url = "https://api.github.com/repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="owner", param_type=ParameterType.STRING, required=True),  # Repository owner,
			Parameter(name="repo", param_type=ParameterType.STRING, required=True),  # Repository name,
			Parameter(name="branch", param_type=ParameterType.STRING, required=True),  # Branch name
        ]

    def get_output_schema(self):
        return [
            OutputParameter(name="enforce_admins", param_type=OutputParameterType.OBJECT, is_array=False),  # Admin enforcement settings
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Check_if_admins_are_enforced_on_branch_protection.method, 
                                           Check_if_admins_are_enforced_on_branch_protection.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Check_if_admins_are_enforced_on_branch_protection': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Get_pull_request_review_requirements(BaseFunction):
    """Retrieves the required pull request review settings for a branch."""
    name = "Get pull request review requirements"
    url = "https://api.github.com/repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="owner", param_type=ParameterType.STRING, required=True),  # Repository owner,
			Parameter(name="repo", param_type=ParameterType.STRING, required=True),  # Repository name,
			Parameter(name="branch", param_type=ParameterType.STRING, required=True),  # Branch name
        ]

    def get_output_schema(self):
        return [
            OutputParameter(name="required_pull_request_reviews", param_type=OutputParameterType.OBJECT, is_array=False),  # Pull request review requirements
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Get_pull_request_review_requirements.method, 
                                           Get_pull_request_review_requirements.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_pull_request_review_requirements': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Get_commit_signature_verification_requirement(BaseFunction):
    """Checks if commit signature verification is required on a branch."""
    name = "Get commit signature verification requirement"
    url = "https://api.github.com/repos/{owner}/{repo}/branches/{branch}/protection/required_signatures"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="owner", param_type=ParameterType.STRING, required=True),  # Repository owner,
			Parameter(name="repo", param_type=ParameterType.STRING, required=True),  # Repository name,
			Parameter(name="branch", param_type=ParameterType.STRING, required=True),  # Branch name
        ]

    def get_output_schema(self):
        return [
            OutputParameter(name="required_signatures", param_type=OutputParameterType.OBJECT, is_array=False),  # Signature verification requirements
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Get_commit_signature_verification_requirement.method, 
                                           Get_commit_signature_verification_requirement.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_commit_signature_verification_requirement': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Get_status_checks_requirements(BaseFunction):
    """Retrieves the status check requirements for a branch."""
    name = "Get status checks requirements"
    url = "https://api.github.com/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="owner", param_type=ParameterType.STRING, required=True),  # Repository owner,
			Parameter(name="repo", param_type=ParameterType.STRING, required=True),  # Repository name,
			Parameter(name="branch", param_type=ParameterType.STRING, required=True),  # Branch name
        ]

    def get_output_schema(self):
        return [
            OutputParameter(name="required_status_checks", param_type=OutputParameterType.OBJECT, is_array=False),  # Status check requirements
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Get_status_checks_requirements.method, 
                                           Get_status_checks_requirements.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_status_checks_requirements': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Get_all_status_check_contexts(BaseFunction):
    """Lists all status check contexts that are part of the required status checks for a branch."""
    name = "Get all status check contexts"
    url = "https://api.github.com/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="owner", param_type=ParameterType.STRING, required=True),  # Repository owner,
			Parameter(name="repo", param_type=ParameterType.STRING, required=True),  # Repository name,
			Parameter(name="branch", param_type=ParameterType.STRING, required=True),  # Branch name
        ]

    def get_output_schema(self):
        return [
            OutputParameter(name="contexts", param_type=OutputParameterType.STRING, is_array=True),  # List of status check contexts
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Get_all_status_check_contexts.method, 
                                           Get_all_status_check_contexts.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_all_status_check_contexts': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Get_access_restrictions(BaseFunction):
    """Retrieves the access restrictions for a branch."""
    name = "Get access restrictions"
    url = "https://api.github.com/repos/{owner}/{repo}/branches/{branch}/protection/restrictions"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="owner", param_type=ParameterType.STRING, required=True),  # Repository owner,
			Parameter(name="repo", param_type=ParameterType.STRING, required=True),  # Repository name,
			Parameter(name="branch", param_type=ParameterType.STRING, required=True),  # Branch name
        ]

    def get_output_schema(self):
        return [
            OutputParameter(name="restrictions", param_type=OutputParameterType.OBJECT, is_array=False),  # Access restrictions for the branch
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Get_access_restrictions.method, 
                                           Get_access_restrictions.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_access_restrictions': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Get_apps_with_branch_access_restrictions(BaseFunction):
    """Lists all apps with access restrictions on a branch."""
    name = "Get apps with branch access restrictions"
    url = "https://api.github.com/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="owner", param_type=ParameterType.STRING, required=True),  # Repository owner,
			Parameter(name="repo", param_type=ParameterType.STRING, required=True),  # Repository name,
			Parameter(name="branch", param_type=ParameterType.STRING, required=True),  # Branch name
        ]

    def get_output_schema(self):
        return [
            OutputParameter(name="apps", param_type=OutputParameterType.STRING, is_array=True),  # List of apps with access restrictions
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Get_apps_with_branch_access_restrictions.method, 
                                           Get_apps_with_branch_access_restrictions.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_apps_with_branch_access_restrictions': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Get_teams_with_branch_access_restrictions(BaseFunction):
    """Lists all teams with access restrictions on a branch."""
    name = "Get teams with branch access restrictions"
    url = "https://api.github.com/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="owner", param_type=ParameterType.STRING, required=True),  # Repository owner,
			Parameter(name="repo", param_type=ParameterType.STRING, required=True),  # Repository name,
			Parameter(name="branch", param_type=ParameterType.STRING, required=True),  # Branch name
        ]

    def get_output_schema(self):
        return [
            OutputParameter(name="teams", param_type=OutputParameterType.STRING, is_array=True),  # List of teams with access restrictions
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Get_teams_with_branch_access_restrictions.method, 
                                           Get_teams_with_branch_access_restrictions.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_teams_with_branch_access_restrictions': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Get_users_with_branch_access_restrictions(BaseFunction):
    """Lists all users with access restrictions on a branch."""
    name = "Get users with branch access restrictions"
    url = "https://api.github.com/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="owner", param_type=ParameterType.STRING, required=True),  # Repository owner,
			Parameter(name="repo", param_type=ParameterType.STRING, required=True),  # Repository name,
			Parameter(name="branch", param_type=ParameterType.STRING, required=True),  # Branch name
        ]

    def get_output_schema(self):
        return [
            OutputParameter(name="users", param_type=OutputParameterType.STRING, is_array=True),  # List of users with access restrictions
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Get_users_with_branch_access_restrictions.method, 
                                           Get_users_with_branch_access_restrictions.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_users_with_branch_access_restrictions': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class GET_reposownerrepoissuesissue_numbersub_issues(BaseFunction):
    """Retrieve list of sub-issues for a specific issue."""
    name = "GET /repos/{owner}/{repo}/issues/{issue\_number}/sub\_issues"
    url = "/repos/{owner}/{repo}/issues/{issue\_number}/sub\_issues"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="owner", param_type=ParameterType.STRING, required=True),  # Repository owner.,
			Parameter(name="repo", param_type=ParameterType.STRING, required=True),  # Repository name.,
			Parameter(name="issue\_number", param_type=ParameterType.INTEGER, required=True),  # Issue number.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(name="sub_issues", param_type=OutputParameterType.OBJECT, is_array=True),  # List of sub-issues related to the issue.
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(GET_reposownerrepoissuesissue_numbersub_issues.method, 
                                           GET_reposownerrepoissuesissue_numbersub_issues.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'GET_reposownerrepoissuesissue_numbersub_issues': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class GET_reposownerrepoissuesissue_numbertimeline(BaseFunction):
    """List timeline events for a specific issue."""
    name = "GET /repos/{owner}/{repo}/issues/{issue\_number}/timeline"
    url = "/repos/{owner}/{repo}/issues/{issue\_number}/timeline"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="owner", param_type=ParameterType.STRING, required=True),  # Repository owner.,
			Parameter(name="repo", param_type=ParameterType.STRING, required=True),  # Repository name.,
			Parameter(name="issue\_number", param_type=ParameterType.INTEGER, required=True),  # Issue number.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(name="timeline_events", param_type=OutputParameterType.OBJECT, is_array=True),  # List of timeline events for the issue.
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(GET_reposownerrepoissuesissue_numbertimeline.method, 
                                           GET_reposownerrepoissuesissue_numbertimeline.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'GET_reposownerrepoissuesissue_numbertimeline': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class GET_reposownerrepolabels(BaseFunction):
    """List labels for a repository."""
    name = "GET /repos/{owner}/{repo}/labels"
    url = "/repos/{owner}/{repo}/labels"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="owner", param_type=ParameterType.STRING, required=True),  # Repository owner.,
			Parameter(name="repo", param_type=ParameterType.STRING, required=True),  # Repository name.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(name="labels", param_type=OutputParameterType.OBJECT, is_array=True),  # List of labels for the repository.
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(GET_reposownerrepolabels.method, 
                                           GET_reposownerrepolabels.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'GET_reposownerrepolabels': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class GET_reposownerrepolabelsname(BaseFunction):
    """Get a specific label for a repository."""
    name = "GET /repos/{owner}/{repo}/labels/{name}"
    url = "/repos/{owner}/{repo}/labels/{name}"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="owner", param_type=ParameterType.STRING, required=True),  # Repository owner.,
			Parameter(name="repo", param_type=ParameterType.STRING, required=True),  # Repository name.,
			Parameter(name="name", param_type=ParameterType.STRING, required=True),  # Name of the label.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(name="label", param_type=OutputParameterType.OBJECT, is_array=False),  # Details of the label.
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(GET_reposownerrepolabelsname.method, 
                                           GET_reposownerrepolabelsname.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'GET_reposownerrepolabelsname': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class GET_reposownerrepomilestones(BaseFunction):
    """List milestones for a repository."""
    name = "GET /repos/{owner}/{repo}/milestones"
    url = "/repos/{owner}/{repo}/milestones"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="owner", param_type=ParameterType.STRING, required=True),  # Repository owner.,
			Parameter(name="repo", param_type=ParameterType.STRING, required=True),  # Repository name.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(name="milestones", param_type=OutputParameterType.OBJECT, is_array=True),  # List of milestones.
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(GET_reposownerrepomilestones.method, 
                                           GET_reposownerrepomilestones.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'GET_reposownerrepomilestones': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class GET_reposownerrepomilestonesmilestone_number(BaseFunction):
    """Get a specific milestone for a repository."""
    name = "GET /repos/{owner}/{repo}/milestones/{milestone\_number}"
    url = "/repos/{owner}/{repo}/milestones/{milestone\_number}"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="owner", param_type=ParameterType.STRING, required=True),  # Repository owner.,
			Parameter(name="repo", param_type=ParameterType.STRING, required=True),  # Repository name.,
			Parameter(name="milestone\_number", param_type=ParameterType.INTEGER, required=True),  # Milestone number.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(name="milestone", param_type=OutputParameterType.OBJECT, is_array=False),  # Details of the milestone.
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(GET_reposownerrepomilestonesmilestone_number.method, 
                                           GET_reposownerrepomilestonesmilestone_number.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'GET_reposownerrepomilestonesmilestone_number': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class GET_reposownerrepomilestonesmilestone_numberlabels(BaseFunction):
    """List labels for a specific milestone."""
    name = "GET /repos/{owner}/{repo}/milestones/{milestone\_number}/labels"
    url = "/repos/{owner}/{repo}/milestones/{milestone\_number}/labels"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="owner", param_type=ParameterType.STRING, required=True),  # Repository owner.,
			Parameter(name="repo", param_type=ParameterType.STRING, required=True),  # Repository name.,
			Parameter(name="milestone\_number", param_type=ParameterType.INTEGER, required=True),  # Milestone number.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(name="labels", param_type=OutputParameterType.OBJECT, is_array=True),  # Labels associated with the milestone.
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(GET_reposownerrepomilestonesmilestone_numberlabels.method, 
                                           GET_reposownerrepomilestonesmilestone_numberlabels.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'GET_reposownerrepomilestonesmilestone_numberlabels': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class PUT_orgsorgactionspermissionsrepositoriesrepository_id(BaseFunction):
    """Enable a repository for GitHub Actions in an organization."""
    name = "PUT /orgs/{org}/actions/permissions/repositories/{repository\_id}"
    url = "/orgs/{org}/actions/permissions/repositories/{repository\_id}"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="org", param_type=ParameterType.STRING, required=True),  # Organization name.,
			Parameter(name="repository\_id", param_type=ParameterType.INTEGER, required=True),  # Repository ID.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(name="status", param_type=OutputParameterType.STRING, is_array=False),  # Status of the permission change.
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(PUT_orgsorgactionspermissionsrepositoriesrepository_id.method, 
                                           PUT_orgsorgactionspermissionsrepositoriesrepository_id.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'PUT_orgsorgactionspermissionsrepositoriesrepository_id': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class DELETE_orgsorgactionspermissionsrepositoriesrepository_id(BaseFunction):
    """Disable a repository for GitHub Actions in an organization."""
    name = "DELETE /orgs/{org}/actions/permissions/repositories/{repository\_id}"
    url = "/orgs/{org}/actions/permissions/repositories/{repository\_id}"
    args_in_url = True
    method = DELETE

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="org", param_type=ParameterType.STRING, required=True),  # Organization name.,
			Parameter(name="repository\_id", param_type=ParameterType.INTEGER, required=True),  # Repository ID.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(name="status", param_type=OutputParameterType.STRING, is_array=False),  # Status of the permission removal.
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(DELETE_orgsorgactionspermissionsrepositoriesrepository_id.method, 
                                           DELETE_orgsorgactionspermissionsrepositoriesrepository_id.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'DELETE_orgsorgactionspermissionsrepositoriesrepository_id': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class PUT_orgsorgactionsrunnergroupsrunner_group_idrepositoriesrepository_id(BaseFunction):
    """Add repository access to a self-hosted runner group in an organization."""
    name = "PUT /orgs/{org}/actions/runner-groups/{runner\_group\_id}/repositories/{repository\_id}"
    url = "/orgs/{org}/actions/runner-groups/{runner\_group\_id}/repositories/{repository\_id}"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="org", param_type=ParameterType.STRING, required=True),  # Organization name.,
			Parameter(name="runner\_group\_id", param_type=ParameterType.INTEGER, required=True),  # Runner group ID.,
			Parameter(name="repository\_id", param_type=ParameterType.INTEGER, required=True),  # Repository ID.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(name="status", param_type=OutputParameterType.STRING, is_array=False),  # Status of the operation.
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(PUT_orgsorgactionsrunnergroupsrunner_group_idrepositoriesrepository_id.method, 
                                           PUT_orgsorgactionsrunnergroupsrunner_group_idrepositoriesrepository_id.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'PUT_orgsorgactionsrunnergroupsrunner_group_idrepositoriesrepository_id': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class DELETE_orgsorgactionsrunnergroupsrunner_group_idrepositoriesrepository_id(BaseFunction):
    """Remove repository access from a self-hosted runner group in an organization."""
    name = "DELETE /orgs/{org}/actions/runner-groups/{runner\_group\_id}/repositories/{repository\_id}"
    url = "/orgs/{org}/actions/runner-groups/{runner\_group\_id}/repositories/{repository\_id}"
    args_in_url = True
    method = DELETE

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="org", param_type=ParameterType.STRING, required=True),  # Organization name.,
			Parameter(name="runner\_group\_id", param_type=ParameterType.INTEGER, required=True),  # Runner group ID.,
			Parameter(name="repository\_id", param_type=ParameterType.INTEGER, required=True),  # Repository ID.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(name="status", param_type=OutputParameterType.STRING, is_array=False),  # Status of the operation.
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(DELETE_orgsorgactionsrunnergroupsrunner_group_idrepositoriesrepository_id.method, 
                                           DELETE_orgsorgactionsrunnergroupsrunner_group_idrepositoriesrepository_id.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'DELETE_orgsorgactionsrunnergroupsrunner_group_idrepositoriesrepository_id': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class PUT_orgsorgactionssecretssecret_namerepositoriesrepository_id(BaseFunction):
    """Add repository to an organization secret."""
    name = "PUT /orgs/{org}/actions/secrets/{secret\_name}/repositories/{repository\_id}"
    url = "/orgs/{org}/actions/secrets/{secret\_name}/repositories/{repository\_id}"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="org", param_type=ParameterType.STRING, required=True),  # Organization name.,
			Parameter(name="secret\_name", param_type=ParameterType.STRING, required=True),  # Secret name.,
			Parameter(name="repository\_id", param_type=ParameterType.INTEGER, required=True),  # Repository ID.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(name="status", param_type=OutputParameterType.STRING, is_array=False),  # Status of the operation.
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(PUT_orgsorgactionssecretssecret_namerepositoriesrepository_id.method, 
                                           PUT_orgsorgactionssecretssecret_namerepositoriesrepository_id.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'PUT_orgsorgactionssecretssecret_namerepositoriesrepository_id': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class DELETE_orgsorgactionssecretssecret_namerepositoriesrepository_id(BaseFunction):
    """Remove repository from an organization secret."""
    name = "DELETE /orgs/{org}/actions/secrets/{secret\_name}/repositories/{repository\_id}"
    url = "/orgs/{org}/actions/secrets/{secret\_name}/repositories/{repository\_id}"
    args_in_url = True
    method = DELETE

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="org", param_type=ParameterType.STRING, required=True),  # Organization name.,
			Parameter(name="secret\_name", param_type=ParameterType.STRING, required=True),  # Secret name.,
			Parameter(name="repository\_id", param_type=ParameterType.INTEGER, required=True),  # Repository ID.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(name="status", param_type=OutputParameterType.STRING, is_array=False),  # Status of the operation.
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(DELETE_orgsorgactionssecretssecret_namerepositoriesrepository_id.method, 
                                           DELETE_orgsorgactionssecretssecret_namerepositoriesrepository_id.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'DELETE_orgsorgactionssecretssecret_namerepositoriesrepository_id': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class PUT_orgsorgactionsvariablesnamerepositoriesrepository_id(BaseFunction):
    """Add organization variable to a repository."""
    name = "PUT /orgs/{org}/actions/variables/{name}/repositories/{repository\_id}"
    url = "/orgs/{org}/actions/variables/{name}/repositories/{repository\_id}"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="org", param_type=ParameterType.STRING, required=True),  # Organization name.,
			Parameter(name="name", param_type=ParameterType.STRING, required=True),  # Variable name.,
			Parameter(name="repository\_id", param_type=ParameterType.INTEGER, required=True),  # Repository ID.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(name="status", param_type=OutputParameterType.STRING, is_array=False),  # Status of the operation.
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(PUT_orgsorgactionsvariablesnamerepositoriesrepository_id.method, 
                                           PUT_orgsorgactionsvariablesnamerepositoriesrepository_id.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'PUT_orgsorgactionsvariablesnamerepositoriesrepository_id': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class DELETE_orgsorgactionsvariablesnamerepositoriesrepository_id(BaseFunction):
    """Remove organization variable from a repository."""
    name = "DELETE /orgs/{org}/actions/variables/{name}/repositories/{repository\_id}"
    url = "/orgs/{org}/actions/variables/{name}/repositories/{repository\_id}"
    args_in_url = True
    method = DELETE

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="org", param_type=ParameterType.STRING, required=True),  # Organization name.,
			Parameter(name="name", param_type=ParameterType.STRING, required=True),  # Variable name.,
			Parameter(name="repository\_id", param_type=ParameterType.INTEGER, required=True),  # Repository ID.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(name="status", param_type=OutputParameterType.STRING, is_array=False),  # Status of the operation.
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(DELETE_orgsorgactionsvariablesnamerepositoriesrepository_id.method, 
                                           DELETE_orgsorgactionsvariablesnamerepositoriesrepository_id.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'DELETE_orgsorgactionsvariablesnamerepositoriesrepository_id': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class PUT_orgsorgcodespacessecretssecret_namerepositoriesrepository_id(BaseFunction):
    """Add repository to a codespace secret."""
    name = "PUT /orgs/{org}/codespaces/secrets/{secret\_name}/repositories/{repository\_id}"
    url = "/orgs/{org}/codespaces/secrets/{secret\_name}/repositories/{repository\_id}"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="org", param_type=ParameterType.STRING, required=True),  # Organization name.,
			Parameter(name="secret\_name", param_type=ParameterType.STRING, required=True),  # Secret name.,
			Parameter(name="repository\_id", param_type=ParameterType.INTEGER, required=True),  # Repository ID.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(name="status", param_type=OutputParameterType.STRING, is_array=False),  # Status of the operation.
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(PUT_orgsorgcodespacessecretssecret_namerepositoriesrepository_id.method, 
                                           PUT_orgsorgcodespacessecretssecret_namerepositoriesrepository_id.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'PUT_orgsorgcodespacessecretssecret_namerepositoriesrepository_id': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class DELETE_orgsorgcodespacessecretssecret_namerepositoriesrepository_id(BaseFunction):
    """Remove repository from a codespace secret."""
    name = "DELETE /orgs/{org}/codespaces/secrets/{secret\_name}/repositories/{repository\_id}"
    url = "/orgs/{org}/codespaces/secrets/{secret\_name}/repositories/{repository\_id}"
    args_in_url = True
    method = DELETE

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="org", param_type=ParameterType.STRING, required=True),  # Organization name.,
			Parameter(name="secret\_name", param_type=ParameterType.STRING, required=True),  # Secret name.,
			Parameter(name="repository\_id", param_type=ParameterType.INTEGER, required=True),  # Repository ID.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(name="status", param_type=OutputParameterType.STRING, is_array=False),  # Status of the operation.
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(DELETE_orgsorgcodespacessecretssecret_namerepositoriesrepository_id.method, 
                                           DELETE_orgsorgcodespacessecretssecret_namerepositoriesrepository_id.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'DELETE_orgsorgcodespacessecretssecret_namerepositoriesrepository_id': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class PUT_orgsorgdependabotsecretssecret_namerepositoriesrepository_id(BaseFunction):
    """Add repository to Dependabot secret."""
    name = "PUT /orgs/{org}/dependabot/secrets/{secret\_name}/repositories/{repository\_id}"
    url = "/orgs/{org}/dependabot/secrets/{secret\_name}/repositories/{repository\_id}"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="org", param_type=ParameterType.STRING, required=True),  # Organization name.,
			Parameter(name="secret\_name", param_type=ParameterType.STRING, required=True),  # Secret name.,
			Parameter(name="repository\_id", param_type=ParameterType.INTEGER, required=True),  # Repository ID.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(name="status", param_type=OutputParameterType.STRING, is_array=False),  # Status of the operation.
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(PUT_orgsorgdependabotsecretssecret_namerepositoriesrepository_id.method, 
                                           PUT_orgsorgdependabotsecretssecret_namerepositoriesrepository_id.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'PUT_orgsorgdependabotsecretssecret_namerepositoriesrepository_id': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class DELETE_orgsorgdependabotsecretssecret_namerepositoriesrepository_id(BaseFunction):
    """Remove repository from Dependabot secret."""
    name = "DELETE /orgs/{org}/dependabot/secrets/{secret\_name}/repositories/{repository\_id}"
    url = "/orgs/{org}/dependabot/secrets/{secret\_name}/repositories/{repository\_id}"
    args_in_url = True
    method = DELETE

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="org", param_type=ParameterType.STRING, required=True),  # Organization name.,
			Parameter(name="secret\_name", param_type=ParameterType.STRING, required=True),  # Secret name.,
			Parameter(name="repository\_id", param_type=ParameterType.INTEGER, required=True),  # Repository ID.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(name="status", param_type=OutputParameterType.STRING, is_array=False),  # Status of the operation.
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(DELETE_orgsorgdependabotsecretssecret_namerepositoriesrepository_id.method, 
                                           DELETE_orgsorgdependabotsecretssecret_namerepositoriesrepository_id.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'DELETE_orgsorgdependabotsecretssecret_namerepositoriesrepository_id': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class GET_orgsorgrepos(BaseFunction):
    """List repositories for an organization."""
    name = "GET /orgs/{org}/repos"
    url = "/orgs/{org}/repos"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="org", param_type=ParameterType.STRING, required=True),  # Organization name.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(name="repositories", param_type=OutputParameterType.OBJECT, is_array=True),  # List of repositories in the organization.
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(GET_orgsorgrepos.method, 
                                           GET_orgsorgrepos.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'GET_orgsorgrepos': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class GET_reposownerrepo(BaseFunction):
    """Get a repository."""
    name = "GET /repos/{owner}/{repo}"
    url = "/repos/{owner}/{repo}"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="owner", param_type=ParameterType.STRING, required=True),  # Repository owner.,
			Parameter(name="repo", param_type=ParameterType.STRING, required=True),  # Repository name.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(name="repository", param_type=OutputParameterType.OBJECT, is_array=False),  # Repository details.
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(GET_reposownerrepo.method, 
                                           GET_reposownerrepo.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'GET_reposownerrepo': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class GET_reposownerrepocollaborators(BaseFunction):
    """List repository collaborators."""
    name = "GET /repos/{owner}/{repo}/collaborators"
    url = "/repos/{owner}/{repo}/collaborators"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="owner", param_type=ParameterType.STRING, required=True),  # Repository owner.,
			Parameter(name="repo", param_type=ParameterType.STRING, required=True),  # Repository name.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(name="collaborators", param_type=OutputParameterType.OBJECT, is_array=True),  # List of repository collaborators.
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(GET_reposownerrepocollaborators.method, 
                                           GET_reposownerrepocollaborators.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'GET_reposownerrepocollaborators': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class GET_reposownerrepocollaboratorsusername(BaseFunction):
    """Check if a user is a collaborator on a repository."""
    name = "GET /repos/{owner}/{repo}/collaborators/{username}"
    url = "/repos/{owner}/{repo}/collaborators/{username}"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="owner", param_type=ParameterType.STRING, required=True),  # Repository owner.,
			Parameter(name="repo", param_type=ParameterType.STRING, required=True),  # Repository name.,
			Parameter(name="username", param_type=ParameterType.STRING, required=True),  # Username of the collaborator.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(name="collaborator", param_type=OutputParameterType.OBJECT, is_array=False),  # Details of the collaborator.
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(GET_reposownerrepocollaboratorsusername.method, 
                                           GET_reposownerrepocollaboratorsusername.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'GET_reposownerrepocollaboratorsusername': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class GET_reposownerrepocollaboratorsusernamepermission(BaseFunction):
    """Get a user's permission level for a repository."""
    name = "GET /repos/{owner}/{repo}/collaborators/{username}/permission"
    url = "/repos/{owner}/{repo}/collaborators/{username}/permission"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="owner", param_type=ParameterType.STRING, required=True),  # Repository owner.,
			Parameter(name="repo", param_type=ParameterType.STRING, required=True),  # Repository name.,
			Parameter(name="username", param_type=ParameterType.STRING, required=True),  # Username of the collaborator.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(name="permission", param_type=OutputParameterType.STRING, is_array=False),  # Permission level for the user.
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(GET_reposownerrepocollaboratorsusernamepermission.method, 
                                           GET_reposownerrepocollaboratorsusernamepermission.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'GET_reposownerrepocollaboratorsusernamepermission': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class GET_reposownerrepocomments(BaseFunction):
    """List commit comments for a repository."""
    name = "GET /repos/{owner}/{repo}/comments"
    url = "/repos/{owner}/{repo}/comments"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="owner", param_type=ParameterType.STRING, required=True),  # Repository owner.,
			Parameter(name="repo", param_type=ParameterType.STRING, required=True),  # Repository name.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(name="comments", param_type=OutputParameterType.OBJECT, is_array=True),  # List of commit comments.
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(GET_reposownerrepocomments.method, 
                                           GET_reposownerrepocomments.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'GET_reposownerrepocomments': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class GET_reposownerrepocommentscomment_id(BaseFunction):
    """Get a specific commit comment."""
    name = "GET /repos/{owner}/{repo}/comments/{comment\_id}"
    url = "/repos/{owner}/{repo}/comments/{comment\_id}"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="owner", param_type=ParameterType.STRING, required=True),  # Repository owner.,
			Parameter(name="repo", param_type=ParameterType.STRING, required=True),  # Repository name.,
			Parameter(name="comment\_id", param_type=ParameterType.INTEGER, required=True),  # Comment ID.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(name="comment", param_type=OutputParameterType.OBJECT, is_array=False),  # Details of the commit comment.
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(GET_reposownerrepocommentscomment_id.method, 
                                           GET_reposownerrepocommentscomment_id.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'GET_reposownerrepocommentscomment_id': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class GET_reposownerrepocommentscomment_idreactions(BaseFunction):
    """List reactions for a commit comment."""
    name = "GET /repos/{owner}/{repo}/comments/{comment\_id}/reactions"
    url = "/repos/{owner}/{repo}/comments/{comment\_id}/reactions"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="owner", param_type=ParameterType.STRING, required=True),  # Repository owner.,
			Parameter(name="repo", param_type=ParameterType.STRING, required=True),  # Repository name.,
			Parameter(name="comment\_id", param_type=ParameterType.INTEGER, required=True),  # Comment ID.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(name="reactions", param_type=OutputParameterType.OBJECT, is_array=True),  # List of reactions for a commit comment.
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(GET_reposownerrepocommentscomment_idreactions.method, 
                                           GET_reposownerrepocommentscomment_idreactions.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'GET_reposownerrepocommentscomment_idreactions': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class GET_reposownerrepocommitscommit_shacomments(BaseFunction):
    """List comments on a commit."""
    name = "GET /repos/{owner}/{repo}/commits/{commit\_sha}/comments"
    url = "/repos/{owner}/{repo}/commits/{commit\_sha}/comments"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="owner", param_type=ParameterType.STRING, required=True),  # Repository owner.,
			Parameter(name="repo", param_type=ParameterType.STRING, required=True),  # Repository name.,
			Parameter(name="commit\_sha", param_type=ParameterType.STRING, required=True),  # Commit SHA.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(name="comments", param_type=OutputParameterType.OBJECT, is_array=True),  # List of commit comments on a specific commit.
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(GET_reposownerrepocommitscommit_shacomments.method, 
                                           GET_reposownerrepocommitscommit_shacomments.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'GET_reposownerrepocommitscommit_shacomments': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class GET_reposownerrepocontributors(BaseFunction):
    """List contributors to a repository."""
    name = "GET /repos/{owner}/{repo}/contributors"
    url = "/repos/{owner}/{repo}/contributors"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="owner", param_type=ParameterType.STRING, required=True),  # Repository owner.,
			Parameter(name="repo", param_type=ParameterType.STRING, required=True),  # Repository name.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(name="contributors", param_type=OutputParameterType.OBJECT, is_array=True),  # List of contributors.
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(GET_reposownerrepocontributors.method, 
                                           GET_reposownerrepocontributors.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'GET_reposownerrepocontributors': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class GET_reposownerrepoevents(BaseFunction):
    """List repository events."""
    name = "GET /repos/{owner}/{repo}/events"
    url = "/repos/{owner}/{repo}/events"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="owner", param_type=ParameterType.STRING, required=True),  # Repository owner.,
			Parameter(name="repo", param_type=ParameterType.STRING, required=True),  # Repository name.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(name="events", param_type=OutputParameterType.OBJECT, is_array=True),  # Repository events.
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(GET_reposownerrepoevents.method, 
                                           GET_reposownerrepoevents.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'GET_reposownerrepoevents': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class GET_reposownerrepoforks(BaseFunction):
    """List forks of a repository."""
    name = "GET /repos/{owner}/{repo}/forks"
    url = "/repos/{owner}/{repo}/forks"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="owner", param_type=ParameterType.STRING, required=True),  # Repository owner.,
			Parameter(name="repo", param_type=ParameterType.STRING, required=True),  # Repository name.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(name="forks", param_type=OutputParameterType.OBJECT, is_array=True),  # List of forks.
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(GET_reposownerrepoforks.method, 
                                           GET_reposownerrepoforks.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'GET_reposownerrepoforks': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class GET_reposownerrepolanguages(BaseFunction):
    """List languages used in a repository."""
    name = "GET /repos/{owner}/{repo}/languages"
    url = "/repos/{owner}/{repo}/languages"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="owner", param_type=ParameterType.STRING, required=True),  # Repository owner.,
			Parameter(name="repo", param_type=ParameterType.STRING, required=True),  # Repository name.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(name="languages", param_type=OutputParameterType.OBJECT, is_array=False),  # Languages used in the repository.
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(GET_reposownerrepolanguages.method, 
                                           GET_reposownerrepolanguages.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'GET_reposownerrepolanguages': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class GET_reposownerrepolicense(BaseFunction):
    """Get license information for a repository."""
    name = "GET /repos/{owner}/{repo}/license"
    url = "/repos/{owner}/{repo}/license"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="owner", param_type=ParameterType.STRING, required=True),  # Repository owner.,
			Parameter(name="repo", param_type=ParameterType.STRING, required=True),  # Repository name.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(name="license", param_type=OutputParameterType.OBJECT, is_array=False),  # License information for the repository.
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(GET_reposownerrepolicense.method, 
                                           GET_reposownerrepolicense.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'GET_reposownerrepolicense': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class GET_reposownerrepoprivatevulnerabilityreporting(BaseFunction):
    """Check if private vulnerability reporting is enabled for a repository."""
    name = "GET /repos/{owner}/{repo}/private-vulnerability-reporting"
    url = "/repos/{owner}/{repo}/private-vulnerability-reporting"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="owner", param_type=ParameterType.STRING, required=True),  # Repository owner.,
			Parameter(name="repo", param_type=ParameterType.STRING, required=True),  # Repository name.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(name="reporting_status", param_type=OutputParameterType.STRING, is_array=False),  # Status of private vulnerability reporting.
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(GET_reposownerrepoprivatevulnerabilityreporting.method, 
                                           GET_reposownerrepoprivatevulnerabilityreporting.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'GET_reposownerrepoprivatevulnerabilityreporting': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class GET_reposownerrepopropertiesvalues(BaseFunction):
    """Get all custom property values for a repository."""
    name = "GET /repos/{owner}/{repo}/properties/values"
    url = "/repos/{owner}/{repo}/properties/values"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="owner", param_type=ParameterType.STRING, required=True),  # Repository owner.,
			Parameter(name="repo", param_type=ParameterType.STRING, required=True),  # Repository name.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(name="property_values", param_type=OutputParameterType.OBJECT, is_array=True),  # All custom property values for the repository.
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(GET_reposownerrepopropertiesvalues.method, 
                                           GET_reposownerrepopropertiesvalues.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'GET_reposownerrepopropertiesvalues': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class GET_reposownerreporulesbranchesbranch(BaseFunction):
    """Get rules for a branch."""
    name = "GET /repos/{owner}/{repo}/rules/branches/{branch}"
    url = "/repos/{owner}/{repo}/rules/branches/{branch}"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="owner", param_type=ParameterType.STRING, required=True),  # Repository owner.,
			Parameter(name="repo", param_type=ParameterType.STRING, required=True),  # Repository name.,
			Parameter(name="branch", param_type=ParameterType.STRING, required=True),  # Branch name.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(name="branch_rules", param_type=OutputParameterType.OBJECT, is_array=True),  # Rules for the branch.
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(GET_reposownerreporulesbranchesbranch.method, 
                                           GET_reposownerreporulesbranchesbranch.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'GET_reposownerreporulesbranchesbranch': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class GET_reposownerreporulesets(BaseFunction):
    """Get all rulesets for a repository."""
    name = "GET /repos/{owner}/{repo}/rulesets"
    url = "/repos/{owner}/{repo}/rulesets"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="owner", param_type=ParameterType.STRING, required=True),  # Repository owner.,
			Parameter(name="repo", param_type=ParameterType.STRING, required=True),  # Repository name.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(name="rulesets", param_type=OutputParameterType.OBJECT, is_array=True),  # List of rulesets.
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(GET_reposownerreporulesets.method, 
                                           GET_reposownerreporulesets.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'GET_reposownerreporulesets': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class GET_reposownerreporulesetsruleset_id(BaseFunction):
    """Get a specific ruleset for a repository."""
    name = "GET /repos/{owner}/{repo}/rulesets/{ruleset\_id}"
    url = "/repos/{owner}/{repo}/rulesets/{ruleset\_id}"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="owner", param_type=ParameterType.STRING, required=True),  # Repository owner.,
			Parameter(name="repo", param_type=ParameterType.STRING, required=True),  # Repository name.,
			Parameter(name="ruleset\_id", param_type=ParameterType.INTEGER, required=True),  # Ruleset ID.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(name="ruleset", param_type=OutputParameterType.OBJECT, is_array=False),  # Details of the ruleset.
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(GET_reposownerreporulesetsruleset_id.method, 
                                           GET_reposownerreporulesetsruleset_id.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'GET_reposownerreporulesetsruleset_id': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class GET_reposownerrepostargazers(BaseFunction):
    """List stargazers for a repository."""
    name = "GET /repos/{owner}/{repo}/stargazers"
    url = "/repos/{owner}/{repo}/stargazers"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="owner", param_type=ParameterType.STRING, required=True),  # Repository owner.,
			Parameter(name="repo", param_type=ParameterType.STRING, required=True),  # Repository name.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(name="stargazers", param_type=OutputParameterType.OBJECT, is_array=True),  # List of stargazers.
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(GET_reposownerrepostargazers.method, 
                                           GET_reposownerrepostargazers.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'GET_reposownerrepostargazers': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class GET_reposownerrepostatscode_frequency(BaseFunction):
    """Get weekly code frequency statistics for a repository."""
    name = "GET /repos/{owner}/{repo}/stats/code\_frequency"
    url = "/repos/{owner}/{repo}/stats/code\_frequency"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="owner", param_type=ParameterType.STRING, required=True),  # Repository owner.,
			Parameter(name="repo", param_type=ParameterType.STRING, required=True),  # Repository name.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(name="code_frequency_stats", param_type=OutputParameterType.OBJECT, is_array=True),  # Weekly code frequency statistics.
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(GET_reposownerrepostatscode_frequency.method, 
                                           GET_reposownerrepostatscode_frequency.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'GET_reposownerrepostatscode_frequency': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class GET_reposownerrepostatscommit_activity(BaseFunction):
    """Get last year's commit activity for a repository."""
    name = "GET /repos/{owner}/{repo}/stats/commit\_activity"
    url = "/repos/{owner}/{repo}/stats/commit\_activity"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="owner", param_type=ParameterType.STRING, required=True),  # Repository owner.,
			Parameter(name="repo", param_type=ParameterType.STRING, required=True),  # Repository name.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(name="commit_activity", param_type=OutputParameterType.OBJECT, is_array=True),  # Commit activity data.
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(GET_reposownerrepostatscommit_activity.method, 
                                           GET_reposownerrepostatscommit_activity.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'GET_reposownerrepostatscommit_activity': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class GET_reposownerrepostatscontributors(BaseFunction):
    """Get contributor commit activity for a repository."""
    name = "GET /repos/{owner}/{repo}/stats/contributors"
    url = "/repos/{owner}/{repo}/stats/contributors"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="owner", param_type=ParameterType.STRING, required=True),  # Repository owner.,
			Parameter(name="repo", param_type=ParameterType.STRING, required=True),  # Repository name.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(name="contributors", param_type=OutputParameterType.OBJECT, is_array=True),  # List of contributors and their activity.
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(GET_reposownerrepostatscontributors.method, 
                                           GET_reposownerrepostatscontributors.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'GET_reposownerrepostatscontributors': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class GET_reposownerrepostatsparticipation(BaseFunction):
    """Get weekly commit count for a repository."""
    name = "GET /repos/{owner}/{repo}/stats/participation"
    url = "/repos/{owner}/{repo}/stats/participation"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="owner", param_type=ParameterType.STRING, required=True),  # Repository owner.,
			Parameter(name="repo", param_type=ParameterType.STRING, required=True),  # Repository name.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(name="participation", param_type=OutputParameterType.OBJECT, is_array=True),  # Weekly participation data.
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(GET_reposownerrepostatsparticipation.method, 
                                           GET_reposownerrepostatsparticipation.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'GET_reposownerrepostatsparticipation': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class GET_reposownerrepostatspunch_card(BaseFunction):
    """Get hourly commit count for each day in a repository."""
    name = "GET /repos/{owner}/{repo}/stats/punch\_card"
    url = "/repos/{owner}/{repo}/stats/punch\_card"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="owner", param_type=ParameterType.STRING, required=True),  # Repository owner.,
			Parameter(name="repo", param_type=ParameterType.STRING, required=True),  # Repository name.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(name="punch_card", param_type=OutputParameterType.OBJECT, is_array=True),  # Hourly commit counts for each day.
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(GET_reposownerrepostatspunch_card.method, 
                                           GET_reposownerrepostatspunch_card.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'GET_reposownerrepostatspunch_card': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class GET_reposownerreposubscribers(BaseFunction):
    """List watchers of a repository."""
    name = "GET /repos/{owner}/{repo}/subscribers"
    url = "/repos/{owner}/{repo}/subscribers"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="owner", param_type=ParameterType.STRING, required=True),  # Repository owner.,
			Parameter(name="repo", param_type=ParameterType.STRING, required=True),  # Repository name.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(name="subscribers", param_type=OutputParameterType.OBJECT, is_array=True),  # List of watchers.
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(GET_reposownerreposubscribers.method, 
                                           GET_reposownerreposubscribers.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'GET_reposownerreposubscribers': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class GET_reposownerrepotags(BaseFunction):
    """List tags for a repository."""
    name = "GET /repos/{owner}/{repo}/tags"
    url = "/repos/{owner}/{repo}/tags"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="owner", param_type=ParameterType.STRING, required=True),  # Repository owner.,
			Parameter(name="repo", param_type=ParameterType.STRING, required=True),  # Repository name.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(name="tags", param_type=OutputParameterType.OBJECT, is_array=True),  # List of tags.
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(GET_reposownerrepotags.method, 
                                           GET_reposownerrepotags.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'GET_reposownerrepotags': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class GET_reposownerrepotopics(BaseFunction):
    """Get all topics of a repository."""
    name = "GET /repos/{owner}/{repo}/topics"
    url = "/repos/{owner}/{repo}/topics"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="owner", param_type=ParameterType.STRING, required=True),  # Repository owner.,
			Parameter(name="repo", param_type=ParameterType.STRING, required=True),  # Repository name.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(name="topics", param_type=OutputParameterType.STRING, is_array=True),  # List of repository topics.
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(GET_reposownerrepotopics.method, 
                                           GET_reposownerrepotopics.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'GET_reposownerrepotopics': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class GET_repositories(BaseFunction):
    """List public repositories."""
    name = "GET /repositories"
    url = "/repositories"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            OutputParameter(name="repositories", param_type=OutputParameterType.OBJECT, is_array=True),  # List of public repositories.
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(GET_repositories.method, 
                                           GET_repositories.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'GET_repositories': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class GET_searchlabels(BaseFunction):
    """Search for labels."""
    name = "GET /search/labels"
    url = "/search/labels"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="query", param_type=ParameterType.STRING, required=True),  # Search query for labels.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(name="labels", param_type=OutputParameterType.OBJECT, is_array=True),  # List of labels matching the search.
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(GET_searchlabels.method, 
                                           GET_searchlabels.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'GET_searchlabels': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class PUT_usercodespacessecretssecret_namerepositoriesrepository_id(BaseFunction):
    """Add a repository to a user's codespace secrets."""
    name = "PUT /user/codespaces/secrets/{secret\_name}/repositories/{repository\_id}"
    url = "/user/codespaces/secrets/{secret\_name}/repositories/{repository\_id}"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="secret\_name", param_type=ParameterType.STRING, required=True),  # Secret name.,
			Parameter(name="repository\_id", param_type=ParameterType.INTEGER, required=True),  # Repository ID.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(name="status", param_type=OutputParameterType.STRING, is_array=False),  # Status of the operation.
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(PUT_usercodespacessecretssecret_namerepositoriesrepository_id.method, 
                                           PUT_usercodespacessecretssecret_namerepositoriesrepository_id.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'PUT_usercodespacessecretssecret_namerepositoriesrepository_id': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class DELETE_usercodespacessecretssecret_namerepositoriesrepository_id(BaseFunction):
    """Remove a repository from a user's codespace secrets."""
    name = "DELETE /user/codespaces/secrets/{secret\_name}/repositories/{repository\_id}"
    url = "/user/codespaces/secrets/{secret\_name}/repositories/{repository\_id}"
    args_in_url = True
    method = DELETE

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="secret\_name", param_type=ParameterType.STRING, required=True),  # Secret name.,
			Parameter(name="repository\_id", param_type=ParameterType.INTEGER, required=True),  # Repository ID.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(name="status", param_type=OutputParameterType.STRING, is_array=False),  # Status of the operation.
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(DELETE_usercodespacessecretssecret_namerepositoriesrepository_id.method, 
                                           DELETE_usercodespacessecretssecret_namerepositoriesrepository_id.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'DELETE_usercodespacessecretssecret_namerepositoriesrepository_id': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class GET_userinstallationsinstallation_idrepositories(BaseFunction):
    """List repositories accessible to an installation."""
    name = "GET /user/installations/{installation\_id}/repositories"
    url = "/user/installations/{installation\_id}/repositories"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="installation\_id", param_type=ParameterType.INTEGER, required=True),  # Installation ID.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(name="repositories", param_type=OutputParameterType.OBJECT, is_array=True),  # List of repositories accessible to the installation.
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(GET_userinstallationsinstallation_idrepositories.method, 
                                           GET_userinstallationsinstallation_idrepositories.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'GET_userinstallationsinstallation_idrepositories': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class GET_userrepos(BaseFunction):
    """List repositories for the authenticated user."""
    name = "GET /user/repos"
    url = "/user/repos"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            OutputParameter(name="repositories", param_type=OutputParameterType.OBJECT, is_array=True),  # List of repositories for the authenticated user.
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(GET_userrepos.method, 
                                           GET_userrepos.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'GET_userrepos': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class GET_userstarredownerrepo(BaseFunction):
    """Check if a repository is starred by the authenticated user."""
    name = "GET /user/starred/{owner}/{repo}"
    url = "/user/starred/{owner}/{repo}"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="owner", param_type=ParameterType.STRING, required=True),  # Repository owner.,
			Parameter(name="repo", param_type=ParameterType.STRING, required=True),  # Repository name.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(name="starred", param_type=OutputParameterType.BOOLEAN, is_array=False),  # Whether the repository is starred by the user.
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(GET_userstarredownerrepo.method, 
                                           GET_userstarredownerrepo.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'GET_userstarredownerrepo': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class PUT_userstarredownerrepo(BaseFunction):
    """Star a repository for the authenticated user."""
    name = "PUT /user/starred/{owner}/{repo}"
    url = "/user/starred/{owner}/{repo}"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="owner", param_type=ParameterType.STRING, required=True),  # Repository owner.,
			Parameter(name="repo", param_type=ParameterType.STRING, required=True),  # Repository name.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(name="status", param_type=OutputParameterType.STRING, is_array=False),  # Status of the star operation.
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(PUT_userstarredownerrepo.method, 
                                           PUT_userstarredownerrepo.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'PUT_userstarredownerrepo': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class DELETE_userstarredownerrepo(BaseFunction):
    """Unstar a repository for the authenticated user."""
    name = "DELETE /user/starred/{owner}/{repo}"
    url = "/user/starred/{owner}/{repo}"
    args_in_url = True
    method = DELETE

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="owner", param_type=ParameterType.STRING, required=True),  # Repository owner.,
			Parameter(name="repo", param_type=ParameterType.STRING, required=True),  # Repository name.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(name="status", param_type=OutputParameterType.STRING, is_array=False),  # Status of the unstar operation.
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(DELETE_userstarredownerrepo.method, 
                                           DELETE_userstarredownerrepo.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'DELETE_userstarredownerrepo': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class GET_usersusernamerepos(BaseFunction):
    """List repositories for a user."""
    name = "GET /users/{username}/repos"
    url = "/users/{username}/repos"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="username", param_type=ParameterType.STRING, required=True),  # Username.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(name="repositories", param_type=OutputParameterType.OBJECT, is_array=True),  # List of user repositories.
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(GET_usersusernamerepos.method, 
                                           GET_usersusernamerepos.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'GET_usersusernamerepos': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class POST_reposownerrepopages(BaseFunction):
    """Get information about a GitHub Pages site."""
    name = "POST /repos/{owner}/{repo}/pages"
    url = "/repos/{owner}/{repo}/pages"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="owner", param_type=ParameterType.STRING, required=True),  # Repository owner.,
			Parameter(name="repo", param_type=ParameterType.STRING, required=True),  # Repository name.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(name="pages", param_type=OutputParameterType.OBJECT, is_array=False),  # Details of the GitHub Pages site.
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(POST_reposownerrepopages.method, 
                                           POST_reposownerrepopages.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'POST_reposownerrepopages': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class PUT_reposownerrepopages(BaseFunction):
    """Configure or update a GitHub Pages site."""
    name = "PUT /repos/{owner}/{repo}/pages"
    url = "/repos/{owner}/{repo}/pages"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="owner", param_type=ParameterType.STRING, required=True),  # Repository owner.,
			Parameter(name="repo", param_type=ParameterType.STRING, required=True),  # Repository name.,
			Parameter(name="source", param_type=OutputParameterType.OBJECT, required=True),  # Source configuration for GitHub Pages.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(name="status", param_type=OutputParameterType.STRING, is_array=False),  # Status of the update.
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(PUT_reposownerrepopages.method, 
                                           PUT_reposownerrepopages.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'PUT_reposownerrepopages': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class DELETE_reposownerrepopages(BaseFunction):
    """Delete a GitHub Pages site."""
    name = "DELETE /repos/{owner}/{repo}/pages"
    url = "/repos/{owner}/{repo}/pages"
    args_in_url = True
    method = DELETE

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="owner", param_type=ParameterType.STRING, required=True),  # Repository owner.,
			Parameter(name="repo", param_type=ParameterType.STRING, required=True),  # Repository name.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(name="status", param_type=OutputParameterType.STRING, is_array=False),  # Status of the delete operation.
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(DELETE_reposownerrepopages.method, 
                                           DELETE_reposownerrepopages.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'DELETE_reposownerrepopages': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class POST_reposownerrepopagesbuilds(BaseFunction):
    """List GitHub Pages builds for a repository."""
    name = "POST /repos/{owner}/{repo}/pages/builds"
    url = "/repos/{owner}/{repo}/pages/builds"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="owner", param_type=ParameterType.STRING, required=True),  # Repository owner.,
			Parameter(name="repo", param_type=ParameterType.STRING, required=True),  # Repository name.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(name="builds", param_type=OutputParameterType.OBJECT, is_array=True),  # List of build objects.
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(POST_reposownerrepopagesbuilds.method, 
                                           POST_reposownerrepopagesbuilds.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'POST_reposownerrepopagesbuilds': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class POST_reposownerrepopagesdeployments(BaseFunction):
    """Create a GitHub Pages deployment."""
    name = "POST /repos/{owner}/{repo}/pages/deployments"
    url = "/repos/{owner}/{repo}/pages/deployments"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="owner", param_type=ParameterType.STRING, required=True),  # Repository owner.,
			Parameter(name="repo", param_type=ParameterType.STRING, required=True),  # Repository name.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(name="deployments", param_type=OutputParameterType.OBJECT, is_array=True),  # List of deployment objects.
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(POST_reposownerrepopagesdeployments.method, 
                                           POST_reposownerrepopagesdeployments.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'POST_reposownerrepopagesdeployments': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class POST_reposownerrepopagesdeploymentspages_deployment_idcancel(BaseFunction):
    """Cancel a GitHub Pages deployment."""
    name = "POST /repos/{owner}/{repo}/pages/deployments/{pages\_deployment\_id}/cancel"
    url = "/repos/{owner}/{repo}/pages/deployments/{pages\_deployment\_id}/cancel"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="owner", param_type=ParameterType.STRING, required=True),  # Repository owner.,
			Parameter(name="repo", param_type=ParameterType.STRING, required=True),  # Repository name.,
			Parameter(name="pages\_deployment\_id", param_type=ParameterType.INTEGER, required=True),  # Deployment ID.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(name="status", param_type=OutputParameterType.STRING, is_array=False),  # Cancellation status.
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(POST_reposownerrepopagesdeploymentspages_deployment_idcancel.method, 
                                           POST_reposownerrepopagesdeploymentspages_deployment_idcancel.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'POST_reposownerrepopagesdeploymentspages_deployment_idcancel': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class GET_reposownerrepopageshealth(BaseFunction):
    """Get DNS health check status for GitHub Pages."""
    name = "GET /repos/{owner}/{repo}/pages/health"
    url = "/repos/{owner}/{repo}/pages/health"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="owner", param_type=ParameterType.STRING, required=True),  # Repository owner.,
			Parameter(name="repo", param_type=ParameterType.STRING, required=True),  # Repository name.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(name="health_status", param_type=OutputParameterType.STRING, is_array=False),  # DNS health check status.
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(GET_reposownerrepopageshealth.method, 
                                           GET_reposownerrepopageshealth.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'GET_reposownerrepopageshealth': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class GET_reposownerrepopages(BaseFunction):
    """Get GitHub Pages site details."""
    name = "GET /repos/{owner}/{repo}/pages"
    url = "/repos/{owner}/{repo}/pages"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="owner", param_type=ParameterType.STRING, required=True),  # Repository owner.,
			Parameter(name="repo", param_type=ParameterType.STRING, required=True),  # Repository name.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(name="pages", param_type=OutputParameterType.OBJECT, is_array=False),  # GitHub Pages site details.
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(GET_reposownerrepopages.method, 
                                           GET_reposownerrepopages.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'GET_reposownerrepopages': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class GET_reposownerrepopagesbuilds(BaseFunction):
    """List GitHub Pages builds."""
    name = "GET /repos/{owner}/{repo}/pages/builds"
    url = "/repos/{owner}/{repo}/pages/builds"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="owner", param_type=ParameterType.STRING, required=True),  # Repository owner.,
			Parameter(name="repo", param_type=ParameterType.STRING, required=True),  # Repository name.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(name="builds", param_type=OutputParameterType.OBJECT, is_array=True),  # List of build objects.
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(GET_reposownerrepopagesbuilds.method, 
                                           GET_reposownerrepopagesbuilds.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'GET_reposownerrepopagesbuilds': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class GET_reposownerrepopagesbuildslatest(BaseFunction):
    """Get latest GitHub Pages build."""
    name = "GET /repos/{owner}/{repo}/pages/builds/latest"
    url = "/repos/{owner}/{repo}/pages/builds/latest"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="owner", param_type=ParameterType.STRING, required=True),  # Repository owner.,
			Parameter(name="repo", param_type=ParameterType.STRING, required=True),  # Repository name.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(name="latest_build", param_type=OutputParameterType.OBJECT, is_array=False),  # Latest build details.
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(GET_reposownerrepopagesbuildslatest.method, 
                                           GET_reposownerrepopagesbuildslatest.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'GET_reposownerrepopagesbuildslatest': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class GET_reposownerrepopagesbuildsbuild_id(BaseFunction):
    """Get details of a specific build."""
    name = "GET /repos/{owner}/{repo}/pages/builds/{build\_id}"
    url = "/repos/{owner}/{repo}/pages/builds/{build\_id}"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="owner", param_type=ParameterType.STRING, required=True),  # Repository owner.,
			Parameter(name="repo", param_type=ParameterType.STRING, required=True),  # Repository name.,
			Parameter(name="build\_id", param_type=ParameterType.INTEGER, required=True),  # Build ID.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(name="build", param_type=OutputParameterType.OBJECT, is_array=False),  # Build details.
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(GET_reposownerrepopagesbuildsbuild_id.method, 
                                           GET_reposownerrepopagesbuildsbuild_id.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'GET_reposownerrepopagesbuildsbuild_id': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class GET_reposownerrepopagesdeploymentspages_deployment_id(BaseFunction):
    """Get deployment status of a GitHub Pages deployment."""
    name = "GET /repos/{owner}/{repo}/pages/deployments/{pages\_deployment\_id}"
    url = "/repos/{owner}/{repo}/pages/deployments/{pages\_deployment\_id}"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="owner", param_type=ParameterType.STRING, required=True),  # Repository owner.,
			Parameter(name="repo", param_type=ParameterType.STRING, required=True),  # Repository name.,
			Parameter(name="pages\_deployment\_id", param_type=ParameterType.INTEGER, required=True),  # Deployment ID.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(name="deployment", param_type=OutputParameterType.OBJECT, is_array=False),  # Deployment details.
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(GET_reposownerrepopagesdeploymentspages_deployment_id.method, 
                                           GET_reposownerrepopagesdeploymentspages_deployment_id.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'GET_reposownerrepopagesdeploymentspages_deployment_id': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class PATCH_reposownerrepopagespage_id(BaseFunction):
    """Update a GitHub Pages site."""
    name = "PATCH /repos/{owner}/{repo}/pages/{page\_id}"
    url = "/repos/{owner}/{repo}/pages/{page\_id}"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="owner", param_type=ParameterType.STRING, required=True),  # Repository owner.,
			Parameter(name="repo", param_type=ParameterType.STRING, required=True),  # Repository name.,
			Parameter(name="page\_id", param_type=ParameterType.INTEGER, required=True),  # Page ID.,
			Parameter(name="configuration", param_type=OutputParameterType.OBJECT, required=True),  # Configuration for the GitHub Pages page.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(name="status", param_type=OutputParameterType.STRING, is_array=False),  # Update status.
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(PATCH_reposownerrepopagespage_id.method, 
                                           PATCH_reposownerrepopagespage_id.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'PATCH_reposownerrepopagespage_id': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class GET_reposownerrepopagespage_id(BaseFunction):
    """Get details of a GitHub Pages site."""
    name = "GET /repos/{owner}/{repo}/pages/{page\_id}"
    url = "/repos/{owner}/{repo}/pages/{page\_id}"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="owner", param_type=ParameterType.STRING, required=True),  # Repository owner.,
			Parameter(name="repo", param_type=ParameterType.STRING, required=True),  # Repository name.,
			Parameter(name="page\_id", param_type=ParameterType.INTEGER, required=True),  # Page ID.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(name="page", param_type=OutputParameterType.OBJECT, is_array=False),  # Details of the GitHub Pages page.
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(GET_reposownerrepopagespage_id.method, 
                                           GET_reposownerrepopagespage_id.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'GET_reposownerrepopagespage_id': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Block_a_user(BaseFunction):
    """Endpoint to block a user by username."""
    name = "Block a user"
    url = "/user/blocks/{username}"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="username", param_type=ParameterType.STRING, required=True),  # The username of the user to block.
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Block_a_user.method, 
                                           Block_a_user.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Block_a_user': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Unblock_a_user(BaseFunction):
    """Endpoint to unblock a user by username."""
    name = "Unblock a user"
    url = "/user/blocks/{username}"
    args_in_url = True
    method = DELETE

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="username", param_type=ParameterType.STRING, required=True),  # The username of the user to unblock.
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Unblock_a_user.method, 
                                           Unblock_a_user.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Unblock_a_user': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class List_users_blocked_by_the_authenticated_user(BaseFunction):
    """Retrieve the list of users blocked by the authenticated user."""
    name = "List users blocked by the authenticated user"
    url = "/user/blocks"
    args_in_url = False
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            OutputParameter(name="users", param_type=OutputParameterType.STRING, is_array=True),  # A list of usernames blocked by the authenticated user.
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(List_users_blocked_by_the_authenticated_user.method, 
                                           List_users_blocked_by_the_authenticated_user.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'List_users_blocked_by_the_authenticated_user': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Check_if_a_user_is_blocked_by_the_authenticated_user(BaseFunction):
    """Check if a specific user is blocked by the authenticated user."""
    name = "Check if a user is blocked by the authenticated user"
    url = "/user/blocks/{username}"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="username", param_type=ParameterType.STRING, required=True),  # The username to check for block status.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(name="blocked", param_type=OutputParameterType.BOOLEAN, is_array=False),  # True if the user is blocked, otherwise false.
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Check_if_a_user_is_blocked_by_the_authenticated_user.method, 
                                           Check_if_a_user_is_blocked_by_the_authenticated_user.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Check_if_a_user_is_blocked_by_the_authenticated_user': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Create_or_update_a_secret_for_the_authenticated_user(BaseFunction):
    """Create or update a secret for the authenticated user."""
    name = "Create or update a secret for the authenticated user"
    url = "/user/codespaces/secrets/{secret_name}"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="secret_name", param_type=ParameterType.STRING, required=True),  # The name of the secret.,
			Parameter(name="secret_value", param_type=ParameterType.STRING, required=True),  # The value of the secret.
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Create_or_update_a_secret_for_the_authenticated_user.method, 
                                           Create_or_update_a_secret_for_the_authenticated_user.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Create_or_update_a_secret_for_the_authenticated_user': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Delete_a_secret_for_the_authenticated_user(BaseFunction):
    """Delete a secret for the authenticated user."""
    name = "Delete a secret for the authenticated user"
    url = "/user/codespaces/secrets/{secret_name}"
    args_in_url = True
    method = DELETE

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="secret_name", param_type=ParameterType.STRING, required=True),  # The name of the secret to delete.
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Delete_a_secret_for_the_authenticated_user.method, 
                                           Delete_a_secret_for_the_authenticated_user.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Delete_a_secret_for_the_authenticated_user': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Set_selected_repositories_for_a_user_secret(BaseFunction):
    """Set repositories associated with a user secret."""
    name = "Set selected repositories for a user secret"
    url = "/user/codespaces/secrets/{secret_name}/repositories"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="secret_name", param_type=ParameterType.STRING, required=True),  # The name of the secret.,
			Parameter(name="repositories", param_type=OutputParameterType.OBJECT, required=True),  # A list of repositories.
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Set_selected_repositories_for_a_user_secret.method, 
                                           Set_selected_repositories_for_a_user_secret.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Set_selected_repositories_for_a_user_secret': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Add_a_selected_repository_to_a_user_secret(BaseFunction):
    """Add a repository to a user secret."""
    name = "Add a selected repository to a user secret"
    url = "/user/codespaces/secrets/{secret_name}/repositories/{repository_id}"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="secret_name", param_type=ParameterType.STRING, required=True),  # The name of the secret.,
			Parameter(name="repository_id", param_type=ParameterType.INTEGER, required=True),  # The ID of the repository.
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Add_a_selected_repository_to_a_user_secret.method, 
                                           Add_a_selected_repository_to_a_user_secret.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Add_a_selected_repository_to_a_user_secret': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Remove_a_selected_repository_from_a_user_secret(BaseFunction):
    """Remove a repository from a user secret."""
    name = "Remove a selected repository from a user secret"
    url = "/user/codespaces/secrets/{secret_name}/repositories/{repository_id}"
    args_in_url = True
    method = DELETE

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="secret_name", param_type=ParameterType.STRING, required=True),  # The name of the secret.,
			Parameter(name="repository_id", param_type=ParameterType.INTEGER, required=True),  # The ID of the repository.
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Remove_a_selected_repository_from_a_user_secret.method, 
                                           Remove_a_selected_repository_from_a_user_secret.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Remove_a_selected_repository_from_a_user_secret': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class List_secrets_for_the_authenticated_user(BaseFunction):
    """Retrieve all secrets for the authenticated user."""
    name = "List secrets for the authenticated user"
    url = "/user/codespaces/secrets"
    args_in_url = False
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            OutputParameter(name="secrets", param_type=OutputParameterType.STRING, is_array=True),  # List of secrets.
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(List_secrets_for_the_authenticated_user.method, 
                                           List_secrets_for_the_authenticated_user.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'List_secrets_for_the_authenticated_user': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Get_public_key_for_the_authenticated_user(BaseFunction):
    """Retrieve the public key for encrypting secrets."""
    name = "Get public key for the authenticated user"
    url = "/user/codespaces/secrets/public-key"
    args_in_url = False
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            OutputParameter(name="key", param_type=OutputParameterType.STRING, is_array=False),  # Public key.
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Get_public_key_for_the_authenticated_user.method, 
                                           Get_public_key_for_the_authenticated_user.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_public_key_for_the_authenticated_user': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Get_a_secret_for_the_authenticated_user(BaseFunction):
    """Retrieve a specific secret for the authenticated user."""
    name = "Get a secret for the authenticated user"
    url = "/user/codespaces/secrets/{secret_name}"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="secret_name", param_type=ParameterType.STRING, required=True),  # Name of the secret.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(name="secret", param_type=OutputParameterType.STRING, is_array=False),  # The secret's value.
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Get_a_secret_for_the_authenticated_user.method, 
                                           Get_a_secret_for_the_authenticated_user.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_a_secret_for_the_authenticated_user': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class List_selected_repositories_for_a_user_secret(BaseFunction):
    """List repositories associated with a user secret."""
    name = "List selected repositories for a user secret"
    url = "/user/codespaces/secrets/{secret_name}/repositories"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="secret_name", param_type=ParameterType.STRING, required=True),  # Name of the secret.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(name="repositories", param_type=OutputParameterType.INTEGER, is_array=True),  # List of repository IDs.
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(List_selected_repositories_for_a_user_secret.method, 
                                           List_selected_repositories_for_a_user_secret.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'List_selected_repositories_for_a_user_secret': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Permissions_required_for_finegrained_personal_access_tokens(BaseFunction):
    """API documentation detailing the permissions needed for various API endpoints when using fine-grained personal access tokens."""
    name = "Permissions required for fine-grained personal access tokens"
    url = "https://docs.github.com/en/rest/authentication/permissions-required-for-fine-grained-personal-access-tokens-#0"
    args_in_url = False
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Permissions_required_for_finegrained_personal_access_tokens.method, 
                                           Permissions_required_for_finegrained_personal_access_tokens.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Permissions_required_for_finegrained_personal_access_tokens': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Create_an_attestation(BaseFunction):
    """Endpoint to create an attestation in a repository."""
    name = "Create an attestation"
    url = "https://api.github.com/repos/{owner}/{repo}/attestations"
    args_in_url = True
    method = INSERT

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="owner", param_type=ParameterType.STRING, required=True),  # Repository owner username or organization name.,
			Parameter(name="repo", param_type=ParameterType.STRING, required=True),  # Repository name.,
			Parameter(name="Subject digest", param_type=ParameterType.STRING, required=True),  # Digest of the attestation subject.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(name="status", param_type=OutputParameterType.STRING, is_array=False),  # Status message of the operation.
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Create_an_attestation.method, 
                                           Create_an_attestation.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Create_an_attestation': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Get_attestation(BaseFunction):
    """Endpoint to retrieve an attestation for a given subject digest."""
    name = "Get attestation"
    url = "https://api.github.com/repos/{owner}/{repo}/attestations/{subject_digest}"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="owner", param_type=ParameterType.STRING, required=True),  # Repository owner username or organization name.,
			Parameter(name="repo", param_type=ParameterType.STRING, required=True),  # Repository name.,
			Parameter(name="subject_digest", param_type=ParameterType.STRING, required=True),  # Digest of the subject to retrieve the attestation for.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(name="attestation", param_type=OutputParameterType.OBJECT, is_array=False),  # Details of the attestation.
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Get_attestation.method, 
                                           Get_attestation.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_attestation': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class List_repository_security_advisories_for_an_organization(BaseFunction):
    """"""
    name = "List repository security advisories for an organization"
    url = "https://api.github.com/orgs/{org}/security-advisories"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(List_repository_security_advisories_for_an_organization.method, 
                                           List_repository_security_advisories_for_an_organization.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'List_repository_security_advisories_for_an_organization': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Create_a_repository_security_advisory(BaseFunction):
    """"""
    name = "Create a repository security advisory"
    url = "https://api.github.com/repos/{owner}/{repo}/security-advisories"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Create_a_repository_security_advisory.method, 
                                           Create_a_repository_security_advisory.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Create_a_repository_security_advisory': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Privately_report_a_security_vulnerability(BaseFunction):
    """"""
    name = "Privately report a security vulnerability"
    url = "https://api.github.com/repos/{owner}/{repo}/security-advisories/reports"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Privately_report_a_security_vulnerability.method, 
                                           Privately_report_a_security_vulnerability.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Privately_report_a_security_vulnerability': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Update_a_repository_security_advisory(BaseFunction):
    """"""
    name = "Update a repository security advisory"
    url = "https://api.github.com/repos/{owner}/{repo}/security-advisories/{ghsa_id}"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Update_a_repository_security_advisory.method, 
                                           Update_a_repository_security_advisory.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Update_a_repository_security_advisory': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Request_a_CVE_for_a_repository_security_advisory(BaseFunction):
    """"""
    name = "Request a CVE for a repository security advisory"
    url = "https://api.github.com/repos/{owner}/{repo}/security-advisories/{ghsa_id}/cve"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Request_a_CVE_for_a_repository_security_advisory.method, 
                                           Request_a_CVE_for_a_repository_security_advisory.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Request_a_CVE_for_a_repository_security_advisory': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class List_repository_security_advisories(BaseFunction):
    """"""
    name = "List repository security advisories"
    url = "https://api.github.com/repos/{owner}/{repo}/security-advisories"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(List_repository_security_advisories.method, 
                                           List_repository_security_advisories.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'List_repository_security_advisories': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Get_a_repository_security_advisory(BaseFunction):
    """"""
    name = "Get a repository security advisory"
    url = "https://api.github.com/repos/{owner}/{repo}/security-advisories/{ghsa_id}"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Get_a_repository_security_advisory.method, 
                                           Get_a_repository_security_advisory.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_a_repository_security_advisory': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Create_a_temporary_private_fork_of_a_security_advisory(BaseFunction):
    """Multiple permissions are required, or a different permission may be used. For more information, see the documentation."""
    name = "Create a temporary private fork of a security advisory"
    url = "https://api.github.com/repos/{owner}/{repo}/security-advisories/{ghsa_id}/forks"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Create_a_temporary_private_fork_of_a_security_advisory.method, 
                                           Create_a_temporary_private_fork_of_a_security_advisory.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Create_a_temporary_private_fork_of_a_security_advisory': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Update_a_secret_scanning_alert(BaseFunction):
    """"""
    name = "Update a secret scanning alert"
    url = "https://api.github.com/repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Update_a_secret_scanning_alert.method, 
                                           Update_a_secret_scanning_alert.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Update_a_secret_scanning_alert': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class List_secret_scanning_alerts_for_an_organization(BaseFunction):
    """"""
    name = "List secret scanning alerts for an organization"
    url = "https://api.github.com/orgs/{org}/secret-scanning/alerts"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(List_secret_scanning_alerts_for_an_organization.method, 
                                           List_secret_scanning_alerts_for_an_organization.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'List_secret_scanning_alerts_for_an_organization': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class List_secret_scanning_alerts_for_a_repository(BaseFunction):
    """"""
    name = "List secret scanning alerts for a repository"
    url = "https://api.github.com/repos/{owner}/{repo}/secret-scanning/alerts"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(List_secret_scanning_alerts_for_a_repository.method, 
                                           List_secret_scanning_alerts_for_a_repository.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'List_secret_scanning_alerts_for_a_repository': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Get_a_secret_scanning_alert(BaseFunction):
    """"""
    name = "Get a secret scanning alert"
    url = "https://api.github.com/repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Get_a_secret_scanning_alert.method, 
                                           Get_a_secret_scanning_alert.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_a_secret_scanning_alert': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class List_locations_for_a_secret_scanning_alert(BaseFunction):
    """"""
    name = "List locations for a secret scanning alert"
    url = "https://api.github.com/repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}/locations"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(List_locations_for_a_secret_scanning_alert.method, 
                                           List_locations_for_a_secret_scanning_alert.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'List_locations_for_a_secret_scanning_alert': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Get_secret_scanning_scan_history_for_a_repository(BaseFunction):
    """"""
    name = "Get secret scanning scan history for a repository"
    url = "https://api.github.com/repos/{owner}/{repo}/secret-scanning/scan-history"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Get_secret_scanning_scan_history_for_a_repository.method, 
                                           Get_secret_scanning_scan_history_for_a_repository.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_secret_scanning_scan_history_for_a_repository': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Create_or_update_a_repository_secret(BaseFunction):
    """"""
    name = "Create or update a repository secret"
    url = "https://api.github.com/repos/{owner}/{repo}/actions/secrets/{secret_name}"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Create_or_update_a_repository_secret.method, 
                                           Create_or_update_a_repository_secret.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Create_or_update_a_repository_secret': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Delete_a_repository_secret(BaseFunction):
    """"""
    name = "Delete a repository secret"
    url = "https://api.github.com/repos/{owner}/{repo}/actions/secrets/{secret_name}"
    args_in_url = True
    method = DELETE

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Delete_a_repository_secret.method, 
                                           Delete_a_repository_secret.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Delete_a_repository_secret': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class List_organization_secrets(BaseFunction):
    """"""
    name = "List organization secrets"
    url = "https://api.github.com/repos/{owner}/{repo}/actions/organization-secrets"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(List_organization_secrets.method, 
                                           List_organization_secrets.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'List_organization_secrets': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class List_repository_secrets(BaseFunction):
    """"""
    name = "List repository secrets"
    url = "https://api.github.com/repos/{owner}/{repo}/actions/secrets"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(List_repository_secrets.method, 
                                           List_repository_secrets.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'List_repository_secrets': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Get_a_repository_public_key(BaseFunction):
    """"""
    name = "Get a repository public key"
    url = "https://api.github.com/repos/{owner}/{repo}/actions/secrets/public-key"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Get_a_repository_public_key.method, 
                                           Get_a_repository_public_key.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_a_repository_public_key': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Get_a_repository_secret(BaseFunction):
    """"""
    name = "Get a repository secret"
    url = "https://api.github.com/repos/{owner}/{repo}/actions/secrets/{secret_name}"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Get_a_repository_secret.method, 
                                           Get_a_repository_secret.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_a_repository_secret': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Create_or_update_a_repository_variable(BaseFunction):
    """"""
    name = "Create or update a repository variable"
    url = "https://api.github.com/repos/{owner}/{repo}/actions/variables"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Create_or_update_a_repository_variable.method, 
                                           Create_or_update_a_repository_variable.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Create_or_update_a_repository_variable': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Update_a_repository_variable(BaseFunction):
    """"""
    name = "Update a repository variable"
    url = "https://api.github.com/repos/{owner}/{repo}/actions/variables/{name}"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Update_a_repository_variable.method, 
                                           Update_a_repository_variable.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Update_a_repository_variable': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Delete_a_repository_variable(BaseFunction):
    """"""
    name = "Delete a repository variable"
    url = "https://api.github.com/repos/{owner}/{repo}/actions/variables/{name}"
    args_in_url = True
    method = DELETE

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Delete_a_repository_variable.method, 
                                           Delete_a_repository_variable.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Delete_a_repository_variable': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class List_organizationlevel_variables(BaseFunction):
    """"""
    name = "List organization-level variables"
    url = "https://api.github.com/repos/{owner}/{repo}/actions/organization-variables"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(List_organizationlevel_variables.method, 
                                           List_organizationlevel_variables.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'List_organizationlevel_variables': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class List_repository_variables(BaseFunction):
    """"""
    name = "List repository variables"
    url = "https://api.github.com/repos/{owner}/{repo}/actions/variables"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(List_repository_variables.method, 
                                           List_repository_variables.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'List_repository_variables': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Get_a_repository_variable(BaseFunction):
    """"""
    name = "Get a repository variable"
    url = "https://api.github.com/repos/{owner}/{repo}/actions/variables/{name}"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Get_a_repository_variable.method, 
                                           Get_a_repository_variable.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_a_repository_variable': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Create_a_repository_webhook(BaseFunction):
    """"""
    name = "Create a repository webhook"
    url = "https://api.github.com/repos/{owner}/{repo}/hooks"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Create_a_repository_webhook.method, 
                                           Create_a_repository_webhook.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Create_a_repository_webhook': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Update_a_repository_webhook(BaseFunction):
    """"""
    name = "Update a repository webhook"
    url = "https://api.github.com/repos/{owner}/{repo}/hooks/{hook_id}"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Update_a_repository_webhook.method, 
                                           Update_a_repository_webhook.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Update_a_repository_webhook': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Delete_a_repository_webhook(BaseFunction):
    """"""
    name = "Delete a repository webhook"
    url = "https://api.github.com/repos/{owner}/{repo}/hooks/{hook_id}"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Delete_a_repository_webhook.method, 
                                           Delete_a_repository_webhook.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Delete_a_repository_webhook': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Update_a_webhook_configuration_for_a_repository(BaseFunction):
    """"""
    name = "Update a webhook configuration for a repository"
    url = "https://api.github.com/repos/{owner}/{repo}/hooks/{hook_id}/config"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Update_a_webhook_configuration_for_a_repository.method, 
                                           Update_a_webhook_configuration_for_a_repository.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Update_a_webhook_configuration_for_a_repository': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Redeliver_a_delivery_for_a_repository_webhook(BaseFunction):
    """"""
    name = "Redeliver a delivery for a repository webhook"
    url = "https://api.github.com/repos/{owner}/{repo}/hooks/{hook_id}/deliveries/{delivery_id}/attempts"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Redeliver_a_delivery_for_a_repository_webhook.method, 
                                           Redeliver_a_delivery_for_a_repository_webhook.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Redeliver_a_delivery_for_a_repository_webhook': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class List_repository_webhooks(BaseFunction):
    """"""
    name = "List repository webhooks"
    url = "https://api.github.com/repos/{owner}/{repo}/hooks"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(List_repository_webhooks.method, 
                                           List_repository_webhooks.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'List_repository_webhooks': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Get_a_repository_webhook(BaseFunction):
    """"""
    name = "Get a repository webhook"
    url = "https://api.github.com/repos/{owner}/{repo}/hooks/{hook_id}"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Get_a_repository_webhook.method, 
                                           Get_a_repository_webhook.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_a_repository_webhook': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Get_a_webhook_configuration_for_a_repository(BaseFunction):
    """"""
    name = "Get a webhook configuration for a repository"
    url = "https://api.github.com/repos/{owner}/{repo}/hooks/{hook_id}/config"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Get_a_webhook_configuration_for_a_repository.method, 
                                           Get_a_webhook_configuration_for_a_repository.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_a_webhook_configuration_for_a_repository': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class List_deliveries_for_a_repository_webhook(BaseFunction):
    """"""
    name = "List deliveries for a repository webhook"
    url = "https://api.github.com/repos/{owner}/{repo}/hooks/{hook_id}/deliveries"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(List_deliveries_for_a_repository_webhook.method, 
                                           List_deliveries_for_a_repository_webhook.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'List_deliveries_for_a_repository_webhook': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Get_a_delivery_for_a_repository_webhook(BaseFunction):
    """"""
    name = "Get a delivery for a repository webhook"
    url = "https://api.github.com/repos/{owner}/{repo}/hooks/{hook_id}/deliveries/{delivery_id}"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Get_a_delivery_for_a_repository_webhook.method, 
                                           Get_a_delivery_for_a_repository_webhook.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_a_delivery_for_a_repository_webhook': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Ping_a_repository_webhook(BaseFunction):
    """"""
    name = "Ping a repository webhook"
    url = "https://api.github.com/repos/{owner}/{repo}/hooks/{hook_id}/pings"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Ping_a_repository_webhook.method, 
                                           Ping_a_repository_webhook.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Ping_a_repository_webhook': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Test_the_push_repository_webhook(BaseFunction):
    """"""
    name = "Test the push repository webhook"
    url = "https://api.github.com/repos/{owner}/{repo}/hooks/{hook_id}/tests"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Test_the_push_repository_webhook.method, 
                                           Test_the_push_repository_webhook.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Test_the_push_repository_webhook': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Create_or_update_a_file_content_in_a_repository(BaseFunction):
    """Multiple permissions are required, or a different permission may be used. For more information, see the documentation."""
    name = "Create or update a file content in a repository"
    url = "https://api.github.com/repos/{owner}/{repo}/contents/{path}"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Create_or_update_a_file_content_in_a_repository.method, 
                                           Create_or_update_a_file_content_in_a_repository.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Create_or_update_a_file_content_in_a_repository': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Delete_a_file_in_a_repository(BaseFunction):
    """Multiple permissions are required, or a different permission may be used. For more information, see the documentation."""
    name = "Delete a file in a repository"
    url = "https://api.github.com/repos/{owner}/{repo}/contents/{path}"
    args_in_url = True
    method = DELETE

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Delete_a_file_in_a_repository.method, 
                                           Delete_a_file_in_a_repository.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Delete_a_file_in_a_repository': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Create_a_reference_in_git(BaseFunction):
    """Multiple permissions are required, or a different permission may be used. For more information, see the documentation."""
    name = "Create a reference in git"
    url = "https://api.github.com/repos/{owner}/{repo}/git/refs"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Create_a_reference_in_git.method, 
                                           Create_a_reference_in_git.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Create_a_reference_in_git': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Update_a_reference_in_git(BaseFunction):
    """Multiple permissions are required, or a different permission may be used. For more information, see the documentation."""
    name = "Update a reference in git"
    url = "https://api.github.com/repos/{owner}/{repo}/git/refs/{ref}"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Update_a_reference_in_git.method, 
                                           Update_a_reference_in_git.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Update_a_reference_in_git': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Create_a_release(BaseFunction):
    """Multiple permissions are required, or a different permission may be used. For more information, see the documentation."""
    name = "Create a release"
    url = "https://api.github.com/repos/{owner}/{repo}/releases"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Create_a_release.method, 
                                           Create_a_release.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Create_a_release': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Block_a_user(BaseFunction):
    """"""
    name = "Block a user"
    url = "https://api.github.com/user/blocks/{username}"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Block_a_user.method, 
                                           Block_a_user.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Block_a_user': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Unblock_a_user(BaseFunction):
    """"""
    name = "Unblock a user"
    url = "https://api.github.com/user/blocks/{username}"
    args_in_url = True
    method = DELETE

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Unblock_a_user.method, 
                                           Unblock_a_user.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Unblock_a_user': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class List_users_blocked_by_the_authenticated_user(BaseFunction):
    """"""
    name = "List users blocked by the authenticated user"
    url = "https://api.github.com/user/blocks"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(List_users_blocked_by_the_authenticated_user.method, 
                                           List_users_blocked_by_the_authenticated_user.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'List_users_blocked_by_the_authenticated_user': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Check_if_a_user_is_blocked_by_the_authenticated_user(BaseFunction):
    """"""
    name = "Check if a user is blocked by the authenticated user"
    url = "https://api.github.com/user/blocks/{username}"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Check_if_a_user_is_blocked_by_the_authenticated_user.method, 
                                           Check_if_a_user_is_blocked_by_the_authenticated_user.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Check_if_a_user_is_blocked_by_the_authenticated_user': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Create_or_update_a_user_secret(BaseFunction):
    """"""
    name = "Create or update a user secret"
    url = "https://api.github.com/user/codespaces/secrets/{secret_name}"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Create_or_update_a_user_secret.method, 
                                           Create_or_update_a_user_secret.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Create_or_update_a_user_secret': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Delete_a_user_secret(BaseFunction):
    """"""
    name = "Delete a user secret"
    url = "https://api.github.com/user/codespaces/secrets/{secret_name}"
    args_in_url = True
    method = DELETE

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Delete_a_user_secret.method, 
                                           Delete_a_user_secret.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Delete_a_user_secret': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Set_repositories_for_a_user_secret(BaseFunction):
    """"""
    name = "Set repositories for a user secret"
    url = "https://api.github.com/user/codespaces/secrets/{secret_name}/repositories"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Set_repositories_for_a_user_secret.method, 
                                           Set_repositories_for_a_user_secret.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Set_repositories_for_a_user_secret': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Add_a_repository_to_a_user_secret(BaseFunction):
    """Multiple permissions are required, or a different permission may be used. For more information, see the documentation."""
    name = "Add a repository to a user secret"
    url = "https://api.github.com/user/codespaces/secrets/{secret_name}/repositories/{repository_id}"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Add_a_repository_to_a_user_secret.method, 
                                           Add_a_repository_to_a_user_secret.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Add_a_repository_to_a_user_secret': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Remove_a_repository_from_a_user_secret(BaseFunction):
    """Multiple permissions are required, or a different permission may be used. For more information, see the documentation."""
    name = "Remove a repository from a user secret"
    url = "https://api.github.com/user/codespaces/secrets/{secret_name}/repositories/{repository_id}"
    args_in_url = True
    method = DELETE

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Remove_a_repository_from_a_user_secret.method, 
                                           Remove_a_repository_from_a_user_secret.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Remove_a_repository_from_a_user_secret': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class List_secrets_for_the_authenticated_user(BaseFunction):
    """"""
    name = "List secrets for the authenticated user"
    url = "https://api.github.com/user/codespaces/secrets"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(List_secrets_for_the_authenticated_user.method, 
                                           List_secrets_for_the_authenticated_user.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'List_secrets_for_the_authenticated_user': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Get_a_public_key_for_the_authenticated_user(BaseFunction):
    """"""
    name = "Get a public key for the authenticated user"
    url = "https://api.github.com/user/codespaces/secrets/public-key"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Get_a_public_key_for_the_authenticated_user.method, 
                                           Get_a_public_key_for_the_authenticated_user.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_a_public_key_for_the_authenticated_user': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Get_a_secret_for_the_authenticated_user(BaseFunction):
    """"""
    name = "Get a secret for the authenticated user"
    url = "https://api.github.com/user/codespaces/secrets/{secret_name}"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Get_a_secret_for_the_authenticated_user.method, 
                                           Get_a_secret_for_the_authenticated_user.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_a_secret_for_the_authenticated_user': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class List_selected_repositories_for_a_user_secret(BaseFunction):
    """"""
    name = "List selected repositories for a user secret"
    url = "https://api.github.com/user/codespaces/secrets/{secret_name}/repositories"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(List_selected_repositories_for_a_user_secret.method, 
                                           List_selected_repositories_for_a_user_secret.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'List_selected_repositories_for_a_user_secret': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Update_primary_email_visibility(BaseFunction):
    """"""
    name = "Update primary email visibility"
    url = "https://api.github.com/user/email/visibility"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Update_primary_email_visibility.method, 
                                           Update_primary_email_visibility.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Update_primary_email_visibility': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Add_an_email_address(BaseFunction):
    """"""
    name = "Add an email address"
    url = "https://api.github.com/user/emails"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Add_an_email_address.method, 
                                           Add_an_email_address.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Add_an_email_address': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Delete_an_email_address(BaseFunction):
    """"""
    name = "Delete an email address"
    url = "https://api.github.com/user/emails"
    args_in_url = True
    method = DELETE

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Delete_an_email_address.method, 
                                           Delete_an_email_address.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Delete_an_email_address': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class List_email_addresses_for_the_authenticated_user(BaseFunction):
    """"""
    name = "List email addresses for the authenticated user"
    url = "https://api.github.com/user/emails"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(List_email_addresses_for_the_authenticated_user.method, 
                                           List_email_addresses_for_the_authenticated_user.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'List_email_addresses_for_the_authenticated_user': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class List_public_email_addresses_for_the_authenticated_user(BaseFunction):
    """"""
    name = "List public email addresses for the authenticated user"
    url = "https://api.github.com/user/public_emails"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(List_public_email_addresses_for_the_authenticated_user.method, 
                                           List_public_email_addresses_for_the_authenticated_user.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'List_public_email_addresses_for_the_authenticated_user': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Follow_a_user(BaseFunction):
    """"""
    name = "Follow a user"
    url = "https://api.github.com/user/following/{username}"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Follow_a_user.method, 
                                           Follow_a_user.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Follow_a_user': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Unfollow_a_user(BaseFunction):
    """"""
    name = "Unfollow a user"
    url = "https://api.github.com/user/following/{username}"
    args_in_url = True
    method = DELETE

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Unfollow_a_user.method, 
                                           Unfollow_a_user.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Unfollow_a_user': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class List_followers_of_the_authenticated_user(BaseFunction):
    """"""
    name = "List followers of the authenticated user"
    url = "https://api.github.com/user/followers"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(List_followers_of_the_authenticated_user.method, 
                                           List_followers_of_the_authenticated_user.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'List_followers_of_the_authenticated_user': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class List_who_the_authenticated_user_is_following(BaseFunction):
    """"""
    name = "List who the authenticated user is following"
    url = "https://api.github.com/user/following"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(List_who_the_authenticated_user_is_following.method, 
                                           List_who_the_authenticated_user_is_following.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'List_who_the_authenticated_user_is_following': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Check_if_a_person_is_followed_by_the_authenticated_user(BaseFunction):
    """"""
    name = "Check if a person is followed by the authenticated user"
    url = "https://api.github.com/user/following/{username}"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Check_if_a_person_is_followed_by_the_authenticated_user.method, 
                                           Check_if_a_person_is_followed_by_the_authenticated_user.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Check_if_a_person_is_followed_by_the_authenticated_user': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Create_a_GPG_key_for_the_authenticated_user(BaseFunction):
    """"""
    name = "Create a GPG key for the authenticated user"
    url = "https://api.github.com/user/gpg_keys"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Create_a_GPG_key_for_the_authenticated_user.method, 
                                           Create_a_GPG_key_for_the_authenticated_user.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Create_a_GPG_key_for_the_authenticated_user': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Delete_a_GPG_key_for_the_authenticated_user(BaseFunction):
    """"""
    name = "Delete a GPG key for the authenticated user"
    url = "https://api.github.com/user/gpg_keys/{gpg_key_id}"
    args_in_url = True
    method = DELETE

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Delete_a_GPG_key_for_the_authenticated_user.method, 
                                           Delete_a_GPG_key_for_the_authenticated_user.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Delete_a_GPG_key_for_the_authenticated_user': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class List_GPG_keys_for_the_authenticated_user(BaseFunction):
    """"""
    name = "List GPG keys for the authenticated user"
    url = "https://api.github.com/user/gpg_keys"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(List_GPG_keys_for_the_authenticated_user.method, 
                                           List_GPG_keys_for_the_authenticated_user.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'List_GPG_keys_for_the_authenticated_user': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Get_a_GPG_key_for_the_authenticated_user(BaseFunction):
    """"""
    name = "Get a GPG key for the authenticated user"
    url = "https://api.github.com/user/gpg_keys/{gpg_key_id}"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Get_a_GPG_key_for_the_authenticated_user.method, 
                                           Get_a_GPG_key_for_the_authenticated_user.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_a_GPG_key_for_the_authenticated_user': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Create_a_gist(BaseFunction):
    """"""
    name = "Create a gist"
    url = "https://api.github.com/gists"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Create_a_gist.method, 
                                           Create_a_gist.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Create_a_gist': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Update_a_gist(BaseFunction):
    """"""
    name = "Update a gist"
    url = "https://api.github.com/gists/{gist_id}"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Update_a_gist.method, 
                                           Update_a_gist.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Update_a_gist': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Delete_a_gist(BaseFunction):
    """"""
    name = "Delete a gist"
    url = "https://api.github.com/gists/{gist_id}"
    args_in_url = True
    method = DELETE

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Delete_a_gist.method, 
                                           Delete_a_gist.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Delete_a_gist': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Create_a_gist_comment(BaseFunction):
    """"""
    name = "Create a gist comment"
    url = "https://api.github.com/gists/{gist_id}/comments"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Create_a_gist_comment.method, 
                                           Create_a_gist_comment.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Create_a_gist_comment': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Update_a_gist_comment(BaseFunction):
    """"""
    name = "Update a gist comment"
    url = "https://api.github.com/gists/{gist_id}/comments/{comment_id}"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Update_a_gist_comment.method, 
                                           Update_a_gist_comment.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Update_a_gist_comment': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Delete_a_gist_comment(BaseFunction):
    """"""
    name = "Delete a gist comment"
    url = "https://api.github.com/gists/{gist_id}/comments/{comment_id}"
    args_in_url = True
    method = DELETE

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Delete_a_gist_comment.method, 
                                           Delete_a_gist_comment.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Delete_a_gist_comment': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Fork_a_gist(BaseFunction):
    """"""
    name = "Fork a gist"
    url = "https://api.github.com/gists/{gist_id}/forks"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Fork_a_gist.method, 
                                           Fork_a_gist.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Fork_a_gist': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Star_a_gist(BaseFunction):
    """"""
    name = "Star a gist"
    url = "https://api.github.com/gists/{gist_id}/star"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Star_a_gist.method, 
                                           Star_a_gist.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Star_a_gist': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Unstar_a_gist(BaseFunction):
    """"""
    name = "Unstar a gist"
    url = "https://api.github.com/gists/{gist_id}/star"
    args_in_url = True
    method = DELETE

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Unstar_a_gist.method, 
                                           Unstar_a_gist.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Unstar_a_gist': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Create_a_public_SSH_key_for_the_authenticated_user(BaseFunction):
    """"""
    name = "Create a public SSH key for the authenticated user"
    url = "https://api.github.com/user/keys"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Create_a_public_SSH_key_for_the_authenticated_user.method, 
                                           Create_a_public_SSH_key_for_the_authenticated_user.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Create_a_public_SSH_key_for_the_authenticated_user': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Delete_a_public_SSH_key_for_the_authenticated_user(BaseFunction):
    """"""
    name = "Delete a public SSH key for the authenticated user"
    url = "https://api.github.com/user/keys/{key_id}"
    args_in_url = True
    method = DELETE

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Delete_a_public_SSH_key_for_the_authenticated_user.method, 
                                           Delete_a_public_SSH_key_for_the_authenticated_user.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Delete_a_public_SSH_key_for_the_authenticated_user': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class List_public_SSH_keys_for_the_authenticated_user(BaseFunction):
    """"""
    name = "List public SSH keys for the authenticated user"
    url = "https://api.github.com/user/keys"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(List_public_SSH_keys_for_the_authenticated_user.method, 
                                           List_public_SSH_keys_for_the_authenticated_user.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'List_public_SSH_keys_for_the_authenticated_user': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Get_a_public_SSH_key_for_the_authenticated_user(BaseFunction):
    """"""
    name = "Get a public SSH key for the authenticated user"
    url = "https://api.github.com/user/keys/{key_id}"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Get_a_public_SSH_key_for_the_authenticated_user.method, 
                                           Get_a_public_SSH_key_for_the_authenticated_user.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_a_public_SSH_key_for_the_authenticated_user': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class List_public_keys_for_a_user(BaseFunction):
    """"""
    name = "List public keys for a user"
    url = "https://api.github.com/users/{username}/keys"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(List_public_keys_for_a_user.method, 
                                           List_public_keys_for_a_user.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'List_public_keys_for_a_user': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Set_interaction_limits(BaseFunction):
    """"""
    name = "Set interaction limits"
    url = "https://api.github.com/user/interaction-limits"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Set_interaction_limits.method, 
                                           Set_interaction_limits.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Set_interaction_limits': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Remove_interaction_limits(BaseFunction):
    """"""
    name = "Remove interaction limits"
    url = "https://api.github.com/user/interaction-limits"
    args_in_url = True
    method = DELETE

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Remove_interaction_limits.method, 
                                           Remove_interaction_limits.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Remove_interaction_limits': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Get_interaction_limits(BaseFunction):
    """"""
    name = "Get interaction limits"
    url = "https://api.github.com/user/interaction-limits"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Get_interaction_limits.method, 
                                           Get_interaction_limits.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_interaction_limits': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Get_billing_report_for_GitHub_Actions_for_a_user(BaseFunction):
    """"""
    name = "Get billing report for GitHub Actions for a user"
    url = "https://api.github.com/users/{username}/settings/billing/actions"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Get_billing_report_for_GitHub_Actions_for_a_user.method, 
                                           Get_billing_report_for_GitHub_Actions_for_a_user.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_billing_report_for_GitHub_Actions_for_a_user': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Get_billing_report_for_GitHub_Packages_for_a_user(BaseFunction):
    """"""
    name = "Get billing report for GitHub Packages for a user"
    url = "https://api.github.com/users/{username}/settings/billing/packages"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Get_billing_report_for_GitHub_Packages_for_a_user.method, 
                                           Get_billing_report_for_GitHub_Packages_for_a_user.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_billing_report_for_GitHub_Packages_for_a_user': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Get_shared_storage_billing_for_a_user(BaseFunction):
    """"""
    name = "Get shared storage billing for a user"
    url = "https://api.github.com/users/{username}/settings/billing/shared-storage"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Get_shared_storage_billing_for_a_user.method, 
                                           Get_shared_storage_billing_for_a_user.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_shared_storage_billing_for_a_user': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Get_billing_usage_report_for_a_user(BaseFunction):
    """"""
    name = "Get billing usage report for a user"
    url = "https://api.github.com/users/{username}/settings/billing/usage"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Get_billing_usage_report_for_a_user.method, 
                                           Get_billing_usage_report_for_a_user.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_billing_usage_report_for_a_user': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Update_authenticated_users_profile(BaseFunction):
    """"""
    name = "Update authenticated user's profile"
    url = "https://api.github.com/user"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Update_authenticated_users_profile.method, 
                                           Update_authenticated_users_profile.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Update_authenticated_users_profile': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Add_social_account_for_authenticated_user(BaseFunction):
    """"""
    name = "Add social account for authenticated user"
    url = "https://api.github.com/user/social_accounts"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Add_social_account_for_authenticated_user.method, 
                                           Add_social_account_for_authenticated_user.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Add_social_account_for_authenticated_user': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Delete_social_accounts_for_authenticated_user(BaseFunction):
    """"""
    name = "Delete social accounts for authenticated user"
    url = "https://api.github.com/user/social_accounts"
    args_in_url = True
    method = DELETE

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Delete_social_accounts_for_authenticated_user.method, 
                                           Delete_social_accounts_for_authenticated_user.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Delete_social_accounts_for_authenticated_user': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Create_a_GPG_key_for_the_user(BaseFunction):
    """"""
    name = "Create a GPG key for the user"
    url = "https://api.github.com/user/gpg_keys"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Create_a_GPG_key_for_the_user.method, 
                                           Create_a_GPG_key_for_the_user.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Create_a_GPG_key_for_the_user': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Delete_a_GPG_key_for_the_user(BaseFunction):
    """"""
    name = "Delete a GPG key for the user"
    url = "https://api.github.com/user/gpg_keys/{gpg_key_id}"
    args_in_url = True
    method = DELETE

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Delete_a_GPG_key_for_the_user.method, 
                                           Delete_a_GPG_key_for_the_user.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Delete_a_GPG_key_for_the_user': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class List_GPG_keys_for_the_user(BaseFunction):
    """"""
    name = "List GPG keys for the user"
    url = "https://api.github.com/user/gpg_keys"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(List_GPG_keys_for_the_user.method, 
                                           List_GPG_keys_for_the_user.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'List_GPG_keys_for_the_user': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Get_a_GPG_key_for_the_user(BaseFunction):
    """"""
    name = "Get a GPG key for the user"
    url = "https://api.github.com/user/gpg_keys/{gpg_key_id}"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Get_a_GPG_key_for_the_user.method, 
                                           Get_a_GPG_key_for_the_user.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_a_GPG_key_for_the_user': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Create_a_gist(BaseFunction):
    """"""
    name = "Create a gist"
    url = "https://api.github.com/gists"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Create_a_gist.method, 
                                           Create_a_gist.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Create_a_gist': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Update_a_gist(BaseFunction):
    """"""
    name = "Update a gist"
    url = "https://api.github.com/gists/{gist_id}"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Update_a_gist.method, 
                                           Update_a_gist.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Update_a_gist': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Delete_a_gist(BaseFunction):
    """"""
    name = "Delete a gist"
    url = "https://api.github.com/gists/{gist_id}"
    args_in_url = True
    method = DELETE

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Delete_a_gist.method, 
                                           Delete_a_gist.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Delete_a_gist': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Create_a_gist_comment(BaseFunction):
    """"""
    name = "Create a gist comment"
    url = "https://api.github.com/gists/{gist_id}/comments"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Create_a_gist_comment.method, 
                                           Create_a_gist_comment.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Create_a_gist_comment': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Update_a_gist_comment(BaseFunction):
    """"""
    name = "Update a gist comment"
    url = "https://api.github.com/gists/{gist_id}/comments/{comment_id}"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Update_a_gist_comment.method, 
                                           Update_a_gist_comment.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Update_a_gist_comment': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Delete_a_gist_comment(BaseFunction):
    """"""
    name = "Delete a gist comment"
    url = "https://api.github.com/gists/{gist_id}/comments/{comment_id}"
    args_in_url = True
    method = DELETE

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Delete_a_gist_comment.method, 
                                           Delete_a_gist_comment.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Delete_a_gist_comment': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Fork_a_gist(BaseFunction):
    """"""
    name = "Fork a gist"
    url = "https://api.github.com/gists/{gist_id}/forks"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Fork_a_gist.method, 
                                           Fork_a_gist.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Fork_a_gist': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Star_a_gist(BaseFunction):
    """"""
    name = "Star a gist"
    url = "https://api.github.com/gists/{gist_id}/star"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Star_a_gist.method, 
                                           Star_a_gist.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Star_a_gist': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Unstar_a_gist(BaseFunction):
    """"""
    name = "Unstar a gist"
    url = "https://api.github.com/gists/{gist_id}/star"
    args_in_url = True
    method = DELETE

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Unstar_a_gist.method, 
                                           Unstar_a_gist.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Unstar_a_gist': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Create_a_public_SSH_key(BaseFunction):
    """"""
    name = "Create a public SSH key"
    url = "https://api.github.com/user/keys"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Create_a_public_SSH_key.method, 
                                           Create_a_public_SSH_key.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Create_a_public_SSH_key': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Delete_a_public_SSH_key(BaseFunction):
    """"""
    name = "Delete a public SSH key"
    url = "https://api.github.com/user/keys/{key_id}"
    args_in_url = True
    method = DELETE

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Delete_a_public_SSH_key.method, 
                                           Delete_a_public_SSH_key.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Delete_a_public_SSH_key': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class List_public_SSH_keys(BaseFunction):
    """"""
    name = "List public SSH keys"
    url = "https://api.github.com/user/keys"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(List_public_SSH_keys.method, 
                                           List_public_SSH_keys.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'List_public_SSH_keys': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Get_a_public_SSH_key(BaseFunction):
    """"""
    name = "Get a public SSH key"
    url = "https://api.github.com/user/keys/{key_id}"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Get_a_public_SSH_key.method, 
                                           Get_a_public_SSH_key.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_a_public_SSH_key': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class List_public_keys_for_a_user(BaseFunction):
    """"""
    name = "List public keys for a user"
    url = "https://api.github.com/users/{username}/keys"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(List_public_keys_for_a_user.method, 
                                           List_public_keys_for_a_user.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'List_public_keys_for_a_user': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Set_interaction_limits(BaseFunction):
    """"""
    name = "Set interaction limits"
    url = "https://api.github.com/user/interaction-limits"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Set_interaction_limits.method, 
                                           Set_interaction_limits.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Set_interaction_limits': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Remove_interaction_limits(BaseFunction):
    """"""
    name = "Remove interaction limits"
    url = "https://api.github.com/user/interaction-limits"
    args_in_url = True
    method = DELETE

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Remove_interaction_limits.method, 
                                           Remove_interaction_limits.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Remove_interaction_limits': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Get_interaction_limits(BaseFunction):
    """"""
    name = "Get interaction limits"
    url = "https://api.github.com/user/interaction-limits"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Get_interaction_limits.method, 
                                           Get_interaction_limits.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_interaction_limits': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Get_billing_report_for_GitHub_Actions(BaseFunction):
    """"""
    name = "Get billing report for GitHub Actions"
    url = "https://api.github.com/users/{username}/settings/billing/actions"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Get_billing_report_for_GitHub_Actions.method, 
                                           Get_billing_report_for_GitHub_Actions.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_billing_report_for_GitHub_Actions': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Get_billing_report_for_GitHub_Packages(BaseFunction):
    """"""
    name = "Get billing report for GitHub Packages"
    url = "https://api.github.com/users/{username}/settings/billing/packages"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Get_billing_report_for_GitHub_Packages.method, 
                                           Get_billing_report_for_GitHub_Packages.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_billing_report_for_GitHub_Packages': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Get_shared_storage_billing(BaseFunction):
    """"""
    name = "Get shared storage billing"
    url = "https://api.github.com/users/{username}/settings/billing/shared-storage"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Get_shared_storage_billing.method, 
                                           Get_shared_storage_billing.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_shared_storage_billing': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Get_billing_usage_report(BaseFunction):
    """"""
    name = "Get billing usage report"
    url = "https://api.github.com/users/{username}/settings/billing/usage"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Get_billing_usage_report.method, 
                                           Get_billing_usage_report.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_billing_usage_report': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Update_authenticated_user_profile(BaseFunction):
    """"""
    name = "Update authenticated user profile"
    url = "https://api.github.com/user"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Update_authenticated_user_profile.method, 
                                           Update_authenticated_user_profile.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Update_authenticated_user_profile': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Add_social_account(BaseFunction):
    """"""
    name = "Add social account"
    url = "https://api.github.com/user/social_accounts"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Add_social_account.method, 
                                           Add_social_account.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Add_social_account': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Delete_social_accounts(BaseFunction):
    """"""
    name = "Delete social accounts"
    url = "https://api.github.com/user/social_accounts"
    args_in_url = True
    method = DELETE

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Delete_social_accounts.method, 
                                           Delete_social_accounts.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Delete_social_accounts': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Create_a_GPG_key_for_the_user(BaseFunction):
    """"""
    name = "Create a GPG key for the user"
    url = "https://api.github.com/user/gpg_keys"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Create_a_GPG_key_for_the_user.method, 
                                           Create_a_GPG_key_for_the_user.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Create_a_GPG_key_for_the_user': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Delete_a_GPG_key_for_the_user(BaseFunction):
    """"""
    name = "Delete a GPG key for the user"
    url = "https://api.github.com/user/gpg_keys/{gpg_key_id}"
    args_in_url = True
    method = DELETE

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Delete_a_GPG_key_for_the_user.method, 
                                           Delete_a_GPG_key_for_the_user.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Delete_a_GPG_key_for_the_user': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class List_GPG_keys_for_the_user(BaseFunction):
    """"""
    name = "List GPG keys for the user"
    url = "https://api.github.com/user/gpg_keys"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(List_GPG_keys_for_the_user.method, 
                                           List_GPG_keys_for_the_user.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'List_GPG_keys_for_the_user': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Get_a_GPG_key_for_the_user(BaseFunction):
    """"""
    name = "Get a GPG key for the user"
    url = "https://api.github.com/user/gpg_keys/{gpg_key_id}"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Get_a_GPG_key_for_the_user.method, 
                                           Get_a_GPG_key_for_the_user.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_a_GPG_key_for_the_user': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Create_a_gist(BaseFunction):
    """"""
    name = "Create a gist"
    url = "https://api.github.com/gists"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Create_a_gist.method, 
                                           Create_a_gist.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Create_a_gist': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Update_a_gist(BaseFunction):
    """"""
    name = "Update a gist"
    url = "https://api.github.com/gists/{gist_id}"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Update_a_gist.method, 
                                           Update_a_gist.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Update_a_gist': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Delete_a_gist(BaseFunction):
    """"""
    name = "Delete a gist"
    url = "https://api.github.com/gists/{gist_id}"
    args_in_url = True
    method = DELETE

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Delete_a_gist.method, 
                                           Delete_a_gist.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Delete_a_gist': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Create_a_gist_comment(BaseFunction):
    """"""
    name = "Create a gist comment"
    url = "https://api.github.com/gists/{gist_id}/comments"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Create_a_gist_comment.method, 
                                           Create_a_gist_comment.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Create_a_gist_comment': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Update_a_gist_comment(BaseFunction):
    """"""
    name = "Update a gist comment"
    url = "https://api.github.com/gists/{gist_id}/comments/{comment_id}"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Update_a_gist_comment.method, 
                                           Update_a_gist_comment.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Update_a_gist_comment': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Delete_a_gist_comment(BaseFunction):
    """"""
    name = "Delete a gist comment"
    url = "https://api.github.com/gists/{gist_id}/comments/{comment_id}"
    args_in_url = True
    method = DELETE

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Delete_a_gist_comment.method, 
                                           Delete_a_gist_comment.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Delete_a_gist_comment': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Fork_a_gist(BaseFunction):
    """"""
    name = "Fork a gist"
    url = "https://api.github.com/gists/{gist_id}/forks"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Fork_a_gist.method, 
                                           Fork_a_gist.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Fork_a_gist': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Star_a_gist(BaseFunction):
    """"""
    name = "Star a gist"
    url = "https://api.github.com/gists/{gist_id}/star"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Star_a_gist.method, 
                                           Star_a_gist.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Star_a_gist': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Unstar_a_gist(BaseFunction):
    """"""
    name = "Unstar a gist"
    url = "https://api.github.com/gists/{gist_id}/star"
    args_in_url = True
    method = DELETE

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Unstar_a_gist.method, 
                                           Unstar_a_gist.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Unstar_a_gist': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Create_a_public_SSH_key(BaseFunction):
    """"""
    name = "Create a public SSH key"
    url = "https://api.github.com/user/keys"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Create_a_public_SSH_key.method, 
                                           Create_a_public_SSH_key.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Create_a_public_SSH_key': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Delete_a_public_SSH_key(BaseFunction):
    """"""
    name = "Delete a public SSH key"
    url = "https://api.github.com/user/keys/{key_id}"
    args_in_url = True
    method = DELETE

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Delete_a_public_SSH_key.method, 
                                           Delete_a_public_SSH_key.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Delete_a_public_SSH_key': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class List_public_SSH_keys(BaseFunction):
    """"""
    name = "List public SSH keys"
    url = "https://api.github.com/user/keys"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(List_public_SSH_keys.method, 
                                           List_public_SSH_keys.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'List_public_SSH_keys': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Get_a_public_SSH_key(BaseFunction):
    """"""
    name = "Get a public SSH key"
    url = "https://api.github.com/user/keys/{key_id}"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Get_a_public_SSH_key.method, 
                                           Get_a_public_SSH_key.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_a_public_SSH_key': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class List_public_keys_for_a_user(BaseFunction):
    """"""
    name = "List public keys for a user"
    url = "https://api.github.com/users/{username}/keys"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(List_public_keys_for_a_user.method, 
                                           List_public_keys_for_a_user.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'List_public_keys_for_a_user': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Set_interaction_limits(BaseFunction):
    """"""
    name = "Set interaction limits"
    url = "https://api.github.com/user/interaction-limits"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Set_interaction_limits.method, 
                                           Set_interaction_limits.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Set_interaction_limits': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Remove_interaction_limits(BaseFunction):
    """"""
    name = "Remove interaction limits"
    url = "https://api.github.com/user/interaction-limits"
    args_in_url = True
    method = DELETE

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Remove_interaction_limits.method, 
                                           Remove_interaction_limits.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Remove_interaction_limits': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Get_interaction_limits(BaseFunction):
    """"""
    name = "Get interaction limits"
    url = "https://api.github.com/user/interaction-limits"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Get_interaction_limits.method, 
                                           Get_interaction_limits.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_interaction_limits': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Get_billing_report_for_GitHub_Actions(BaseFunction):
    """"""
    name = "Get billing report for GitHub Actions"
    url = "https://api.github.com/users/{username}/settings/billing/actions"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Get_billing_report_for_GitHub_Actions.method, 
                                           Get_billing_report_for_GitHub_Actions.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_billing_report_for_GitHub_Actions': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Get_billing_report_for_GitHub_Packages(BaseFunction):
    """"""
    name = "Get billing report for GitHub Packages"
    url = "https://api.github.com/users/{username}/settings/billing/packages"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Get_billing_report_for_GitHub_Packages.method, 
                                           Get_billing_report_for_GitHub_Packages.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_billing_report_for_GitHub_Packages': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Get_shared_storage_billing(BaseFunction):
    """"""
    name = "Get shared storage billing"
    url = "https://api.github.com/users/{username}/settings/billing/shared-storage"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Get_shared_storage_billing.method, 
                                           Get_shared_storage_billing.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_shared_storage_billing': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Get_billing_usage_report(BaseFunction):
    """"""
    name = "Get billing usage report"
    url = "https://api.github.com/users/{username}/settings/billing/usage"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Get_billing_usage_report.method, 
                                           Get_billing_usage_report.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_billing_usage_report': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Update_authenticated_users_profile(BaseFunction):
    """"""
    name = "Update authenticated user's profile"
    url = "https://api.github.com/user"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Update_authenticated_users_profile.method, 
                                           Update_authenticated_users_profile.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Update_authenticated_users_profile': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Add_social_account_for_authenticated_user(BaseFunction):
    """"""
    name = "Add social account for authenticated user"
    url = "https://api.github.com/user/social_accounts"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Add_social_account_for_authenticated_user.method, 
                                           Add_social_account_for_authenticated_user.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Add_social_account_for_authenticated_user': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Delete_social_accounts_for_authenticated_user(BaseFunction):
    """"""
    name = "Delete social accounts for authenticated user"
    url = "https://api.github.com/user/social_accounts"
    args_in_url = True
    method = DELETE

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Delete_social_accounts_for_authenticated_user.method, 
                                           Delete_social_accounts_for_authenticated_user.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Delete_social_accounts_for_authenticated_user': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Create_a_GPG_key_for_the_user(BaseFunction):
    """"""
    name = "Create a GPG key for the user"
    url = "https://api.github.com/user/gpg_keys"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Create_a_GPG_key_for_the_user.method, 
                                           Create_a_GPG_key_for_the_user.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Create_a_GPG_key_for_the_user': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Delete_a_GPG_key_for_the_user(BaseFunction):
    """"""
    name = "Delete a GPG key for the user"
    url = "https://api.github.com/user/gpg_keys/{gpg_key_id}"
    args_in_url = True
    method = DELETE

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Delete_a_GPG_key_for_the_user.method, 
                                           Delete_a_GPG_key_for_the_user.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Delete_a_GPG_key_for_the_user': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class List_GPG_keys_for_the_user(BaseFunction):
    """"""
    name = "List GPG keys for the user"
    url = "https://api.github.com/user/gpg_keys"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(List_GPG_keys_for_the_user.method, 
                                           List_GPG_keys_for_the_user.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'List_GPG_keys_for_the_user': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Get_a_GPG_key_for_the_user(BaseFunction):
    """"""
    name = "Get a GPG key for the user"
    url = "https://api.github.com/user/gpg_keys/{gpg_key_id}"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Get_a_GPG_key_for_the_user.method, 
                                           Get_a_GPG_key_for_the_user.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_a_GPG_key_for_the_user': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Create_a_gist(BaseFunction):
    """"""
    name = "Create a gist"
    url = "https://api.github.com/gists"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Create_a_gist.method, 
                                           Create_a_gist.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Create_a_gist': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Update_a_gist(BaseFunction):
    """"""
    name = "Update a gist"
    url = "https://api.github.com/gists/{gist_id}"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Update_a_gist.method, 
                                           Update_a_gist.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Update_a_gist': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Delete_a_gist(BaseFunction):
    """"""
    name = "Delete a gist"
    url = "https://api.github.com/gists/{gist_id}"
    args_in_url = True
    method = DELETE

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Delete_a_gist.method, 
                                           Delete_a_gist.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Delete_a_gist': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Create_a_gist_comment(BaseFunction):
    """"""
    name = "Create a gist comment"
    url = "https://api.github.com/gists/{gist_id}/comments"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Create_a_gist_comment.method, 
                                           Create_a_gist_comment.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Create_a_gist_comment': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Update_a_gist_comment(BaseFunction):
    """"""
    name = "Update a gist comment"
    url = "https://api.github.com/gists/{gist_id}/comments/{comment_id}"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Update_a_gist_comment.method, 
                                           Update_a_gist_comment.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Update_a_gist_comment': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Delete_a_gist_comment(BaseFunction):
    """"""
    name = "Delete a gist comment"
    url = "https://api.github.com/gists/{gist_id}/comments/{comment_id}"
    args_in_url = True
    method = DELETE

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Delete_a_gist_comment.method, 
                                           Delete_a_gist_comment.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Delete_a_gist_comment': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Fork_a_gist(BaseFunction):
    """"""
    name = "Fork a gist"
    url = "https://api.github.com/gists/{gist_id}/forks"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Fork_a_gist.method, 
                                           Fork_a_gist.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Fork_a_gist': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Star_a_gist(BaseFunction):
    """"""
    name = "Star a gist"
    url = "https://api.github.com/gists/{gist_id}/star"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Star_a_gist.method, 
                                           Star_a_gist.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Star_a_gist': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Unstar_a_gist(BaseFunction):
    """"""
    name = "Unstar a gist"
    url = "https://api.github.com/gists/{gist_id}/star"
    args_in_url = True
    method = DELETE

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Unstar_a_gist.method, 
                                           Unstar_a_gist.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Unstar_a_gist': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Create_a_public_SSH_key_for_the_user(BaseFunction):
    """"""
    name = "Create a public SSH key for the user"
    url = "https://api.github.com/user/keys"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Create_a_public_SSH_key_for_the_user.method, 
                                           Create_a_public_SSH_key_for_the_user.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Create_a_public_SSH_key_for_the_user': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Delete_a_public_SSH_key_for_the_user(BaseFunction):
    """"""
    name = "Delete a public SSH key for the user"
    url = "https://api.github.com/user/keys/{key_id}"
    args_in_url = True
    method = DELETE

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Delete_a_public_SSH_key_for_the_user.method, 
                                           Delete_a_public_SSH_key_for_the_user.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Delete_a_public_SSH_key_for_the_user': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class List_public_SSH_keys_for_the_user(BaseFunction):
    """"""
    name = "List public SSH keys for the user"
    url = "https://api.github.com/user/keys"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(List_public_SSH_keys_for_the_user.method, 
                                           List_public_SSH_keys_for_the_user.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'List_public_SSH_keys_for_the_user': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Get_a_public_SSH_key_for_the_user(BaseFunction):
    """"""
    name = "Get a public SSH key for the user"
    url = "https://api.github.com/user/keys/{key_id}"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Get_a_public_SSH_key_for_the_user.method, 
                                           Get_a_public_SSH_key_for_the_user.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_a_public_SSH_key_for_the_user': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class List_public_keys_for_a_user(BaseFunction):
    """"""
    name = "List public keys for a user"
    url = "https://api.github.com/users/{username}/keys"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(List_public_keys_for_a_user.method, 
                                           List_public_keys_for_a_user.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'List_public_keys_for_a_user': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Set_interaction_limits(BaseFunction):
    """"""
    name = "Set interaction limits"
    url = "https://api.github.com/user/interaction-limits"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Set_interaction_limits.method, 
                                           Set_interaction_limits.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Set_interaction_limits': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Remove_interaction_limits(BaseFunction):
    """"""
    name = "Remove interaction limits"
    url = "https://api.github.com/user/interaction-limits"
    args_in_url = True
    method = DELETE

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Remove_interaction_limits.method, 
                                           Remove_interaction_limits.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Remove_interaction_limits': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Get_interaction_limits(BaseFunction):
    """"""
    name = "Get interaction limits"
    url = "https://api.github.com/user/interaction-limits"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Get_interaction_limits.method, 
                                           Get_interaction_limits.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_interaction_limits': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Get_billing_report_for_GitHub_Actions(BaseFunction):
    """"""
    name = "Get billing report for GitHub Actions"
    url = "https://api.github.com/users/{username}/settings/billing/actions"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Get_billing_report_for_GitHub_Actions.method, 
                                           Get_billing_report_for_GitHub_Actions.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_billing_report_for_GitHub_Actions': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Get_billing_report_for_GitHub_Packages(BaseFunction):
    """"""
    name = "Get billing report for GitHub Packages"
    url = "https://api.github.com/users/{username}/settings/billing/packages"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Get_billing_report_for_GitHub_Packages.method, 
                                           Get_billing_report_for_GitHub_Packages.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_billing_report_for_GitHub_Packages': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Get_shared_storage_billing(BaseFunction):
    """"""
    name = "Get shared storage billing"
    url = "https://api.github.com/users/{username}/settings/billing/shared-storage"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Get_shared_storage_billing.method, 
                                           Get_shared_storage_billing.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_shared_storage_billing': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Get_billing_usage_report(BaseFunction):
    """"""
    name = "Get billing usage report"
    url = "https://api.github.com/users/{username}/settings/billing/usage"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Get_billing_usage_report.method, 
                                           Get_billing_usage_report.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_billing_usage_report': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Update_authenticated_users_profile(BaseFunction):
    """"""
    name = "Update authenticated user's profile"
    url = "https://api.github.com/user"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Update_authenticated_users_profile.method, 
                                           Update_authenticated_users_profile.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Update_authenticated_users_profile': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Add_social_account_for_authenticated_user(BaseFunction):
    """"""
    name = "Add social account for authenticated user"
    url = "https://api.github.com/user/social_accounts"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Add_social_account_for_authenticated_user.method, 
                                           Add_social_account_for_authenticated_user.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Add_social_account_for_authenticated_user': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Delete_social_accounts_for_authenticated_user(BaseFunction):
    """"""
    name = "Delete social accounts for authenticated user"
    url = "https://api.github.com/user/social_accounts"
    args_in_url = True
    method = DELETE

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Delete_social_accounts_for_authenticated_user.method, 
                                           Delete_social_accounts_for_authenticated_user.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Delete_social_accounts_for_authenticated_user': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Create_a_GPG_key_for_the_user(BaseFunction):
    """"""
    name = "Create a GPG key for the user"
    url = "https://api.github.com/user/gpg_keys"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Create_a_GPG_key_for_the_user.method, 
                                           Create_a_GPG_key_for_the_user.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Create_a_GPG_key_for_the_user': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Delete_a_GPG_key_for_the_user(BaseFunction):
    """"""
    name = "Delete a GPG key for the user"
    url = "https://api.github.com/user/gpg_keys/{gpg_key_id}"
    args_in_url = True
    method = DELETE

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Delete_a_GPG_key_for_the_user.method, 
                                           Delete_a_GPG_key_for_the_user.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Delete_a_GPG_key_for_the_user': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class List_GPG_keys_for_the_user(BaseFunction):
    """"""
    name = "List GPG keys for the user"
    url = "https://api.github.com/user/gpg_keys"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(List_GPG_keys_for_the_user.method, 
                                           List_GPG_keys_for_the_user.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'List_GPG_keys_for_the_user': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Get_a_GPG_key_for_the_user(BaseFunction):
    """"""
    name = "Get a GPG key for the user"
    url = "https://api.github.com/user/gpg_keys/{gpg_key_id}"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Get_a_GPG_key_for_the_user.method, 
                                           Get_a_GPG_key_for_the_user.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_a_GPG_key_for_the_user': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Create_a_gist(BaseFunction):
    """"""
    name = "Create a gist"
    url = "https://api.github.com/gists"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Create_a_gist.method, 
                                           Create_a_gist.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Create_a_gist': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Update_a_gist(BaseFunction):
    """"""
    name = "Update a gist"
    url = "https://api.github.com/gists/{gist_id}"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Update_a_gist.method, 
                                           Update_a_gist.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Update_a_gist': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Delete_a_gist(BaseFunction):
    """"""
    name = "Delete a gist"
    url = "https://api.github.com/gists/{gist_id}"
    args_in_url = True
    method = DELETE

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Delete_a_gist.method, 
                                           Delete_a_gist.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Delete_a_gist': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Create_a_gist_comment(BaseFunction):
    """"""
    name = "Create a gist comment"
    url = "https://api.github.com/gists/{gist_id}/comments"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Create_a_gist_comment.method, 
                                           Create_a_gist_comment.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Create_a_gist_comment': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Update_a_gist_comment(BaseFunction):
    """"""
    name = "Update a gist comment"
    url = "https://api.github.com/gists/{gist_id}/comments/{comment_id}"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Update_a_gist_comment.method, 
                                           Update_a_gist_comment.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Update_a_gist_comment': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Delete_a_gist_comment(BaseFunction):
    """"""
    name = "Delete a gist comment"
    url = "https://api.github.com/gists/{gist_id}/comments/{comment_id}"
    args_in_url = True
    method = DELETE

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Delete_a_gist_comment.method, 
                                           Delete_a_gist_comment.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Delete_a_gist_comment': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Fork_a_gist(BaseFunction):
    """"""
    name = "Fork a gist"
    url = "https://api.github.com/gists/{gist_id}/forks"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Fork_a_gist.method, 
                                           Fork_a_gist.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Fork_a_gist': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Star_a_gist(BaseFunction):
    """"""
    name = "Star a gist"
    url = "https://api.github.com/gists/{gist_id}/star"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Star_a_gist.method, 
                                           Star_a_gist.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Star_a_gist': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Unstar_a_gist(BaseFunction):
    """"""
    name = "Unstar a gist"
    url = "https://api.github.com/gists/{gist_id}/star"
    args_in_url = True
    method = DELETE

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Unstar_a_gist.method, 
                                           Unstar_a_gist.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Unstar_a_gist': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Create_a_public_SSH_key(BaseFunction):
    """"""
    name = "Create a public SSH key"
    url = "https://api.github.com/user/keys"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Create_a_public_SSH_key.method, 
                                           Create_a_public_SSH_key.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Create_a_public_SSH_key': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Delete_a_public_SSH_key(BaseFunction):
    """"""
    name = "Delete a public SSH key"
    url = "https://api.github.com/user/keys/{key_id}"
    args_in_url = True
    method = DELETE

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Delete_a_public_SSH_key.method, 
                                           Delete_a_public_SSH_key.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Delete_a_public_SSH_key': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class List_public_SSH_keys(BaseFunction):
    """"""
    name = "List public SSH keys"
    url = "https://api.github.com/user/keys"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(List_public_SSH_keys.method, 
                                           List_public_SSH_keys.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'List_public_SSH_keys': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Get_a_public_SSH_key(BaseFunction):
    """"""
    name = "Get a public SSH key"
    url = "https://api.github.com/user/keys/{key_id}"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Get_a_public_SSH_key.method, 
                                           Get_a_public_SSH_key.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_a_public_SSH_key': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class List_public_keys_for_a_user(BaseFunction):
    """"""
    name = "List public keys for a user"
    url = "https://api.github.com/users/{username}/keys"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(List_public_keys_for_a_user.method, 
                                           List_public_keys_for_a_user.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'List_public_keys_for_a_user': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Set_interaction_limits(BaseFunction):
    """"""
    name = "Set interaction limits"
    url = "https://api.github.com/user/interaction-limits"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Set_interaction_limits.method, 
                                           Set_interaction_limits.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Set_interaction_limits': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Remove_interaction_limits(BaseFunction):
    """"""
    name = "Remove interaction limits"
    url = "https://api.github.com/user/interaction-limits"
    args_in_url = True
    method = DELETE

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Remove_interaction_limits.method, 
                                           Remove_interaction_limits.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Remove_interaction_limits': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Get_interaction_limits(BaseFunction):
    """"""
    name = "Get interaction limits"
    url = "https://api.github.com/user/interaction-limits"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Get_interaction_limits.method, 
                                           Get_interaction_limits.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_interaction_limits': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Get_billing_report_for_GitHub_Actions(BaseFunction):
    """"""
    name = "Get billing report for GitHub Actions"
    url = "https://api.github.com/users/{username}/settings/billing/actions"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Get_billing_report_for_GitHub_Actions.method, 
                                           Get_billing_report_for_GitHub_Actions.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_billing_report_for_GitHub_Actions': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Get_billing_report_for_GitHub_Packages(BaseFunction):
    """"""
    name = "Get billing report for GitHub Packages"
    url = "https://api.github.com/users/{username}/settings/billing/packages"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Get_billing_report_for_GitHub_Packages.method, 
                                           Get_billing_report_for_GitHub_Packages.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_billing_report_for_GitHub_Packages': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Get_shared_storage_billing(BaseFunction):
    """"""
    name = "Get shared storage billing"
    url = "https://api.github.com/users/{username}/settings/billing/shared-storage"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Get_shared_storage_billing.method, 
                                           Get_shared_storage_billing.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_shared_storage_billing': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Get_billing_usage_report(BaseFunction):
    """"""
    name = "Get billing usage report"
    url = "https://api.github.com/users/{username}/settings/billing/usage"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Get_billing_usage_report.method, 
                                           Get_billing_usage_report.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_billing_usage_report': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Update_authenticated_users_profile(BaseFunction):
    """"""
    name = "Update authenticated user's profile"
    url = "https://api.github.com/user"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Update_authenticated_users_profile.method, 
                                           Update_authenticated_users_profile.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Update_authenticated_users_profile': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Add_social_account_for_authenticated_user(BaseFunction):
    """"""
    name = "Add social account for authenticated user"
    url = "https://api.github.com/user/social_accounts"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Add_social_account_for_authenticated_user.method, 
                                           Add_social_account_for_authenticated_user.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Add_social_account_for_authenticated_user': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Delete_social_accounts_for_authenticated_user(BaseFunction):
    """"""
    name = "Delete social accounts for authenticated user"
    url = "https://api.github.com/user/social_accounts"
    args_in_url = True
    method = DELETE

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Delete_social_accounts_for_authenticated_user.method, 
                                           Delete_social_accounts_for_authenticated_user.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Delete_social_accounts_for_authenticated_user': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Create_a_GPG_key_for_the_user(BaseFunction):
    """"""
    name = "Create a GPG key for the user"
    url = "https://api.github.com/user/gpg_keys"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Create_a_GPG_key_for_the_user.method, 
                                           Create_a_GPG_key_for_the_user.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Create_a_GPG_key_for_the_user': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Delete_a_GPG_key_for_the_user(BaseFunction):
    """"""
    name = "Delete a GPG key for the user"
    url = "https://api.github.com/user/gpg_keys/{gpg_key_id}"
    args_in_url = True
    method = DELETE

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Delete_a_GPG_key_for_the_user.method, 
                                           Delete_a_GPG_key_for_the_user.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Delete_a_GPG_key_for_the_user': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class List_GPG_keys_for_the_user(BaseFunction):
    """"""
    name = "List GPG keys for the user"
    url = "https://api.github.com/user/gpg_keys"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(List_GPG_keys_for_the_user.method, 
                                           List_GPG_keys_for_the_user.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'List_GPG_keys_for_the_user': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Get_a_GPG_key_for_the_user(BaseFunction):
    """"""
    name = "Get a GPG key for the user"
    url = "https://api.github.com/user/gpg_keys/{gpg_key_id}"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Get_a_GPG_key_for_the_user.method, 
                                           Get_a_GPG_key_for_the_user.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_a_GPG_key_for_the_user': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Create_a_gist(BaseFunction):
    """"""
    name = "Create a gist"
    url = "https://api.github.com/gists"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Create_a_gist.method, 
                                           Create_a_gist.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Create_a_gist': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Update_a_gist(BaseFunction):
    """"""
    name = "Update a gist"
    url = "https://api.github.com/gists/{gist_id}"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Update_a_gist.method, 
                                           Update_a_gist.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Update_a_gist': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Delete_a_gist(BaseFunction):
    """"""
    name = "Delete a gist"
    url = "https://api.github.com/gists/{gist_id}"
    args_in_url = True
    method = DELETE

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Delete_a_gist.method, 
                                           Delete_a_gist.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Delete_a_gist': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Create_a_gist_comment(BaseFunction):
    """"""
    name = "Create a gist comment"
    url = "https://api.github.com/gists/{gist_id}/comments"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Create_a_gist_comment.method, 
                                           Create_a_gist_comment.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Create_a_gist_comment': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Update_a_gist_comment(BaseFunction):
    """"""
    name = "Update a gist comment"
    url = "https://api.github.com/gists/{gist_id}/comments/{comment_id}"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Update_a_gist_comment.method, 
                                           Update_a_gist_comment.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Update_a_gist_comment': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Delete_a_gist_comment(BaseFunction):
    """"""
    name = "Delete a gist comment"
    url = "https://api.github.com/gists/{gist_id}/comments/{comment_id}"
    args_in_url = True
    method = DELETE

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Delete_a_gist_comment.method, 
                                           Delete_a_gist_comment.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Delete_a_gist_comment': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Fork_a_gist(BaseFunction):
    """"""
    name = "Fork a gist"
    url = "https://api.github.com/gists/{gist_id}/forks"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Fork_a_gist.method, 
                                           Fork_a_gist.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Fork_a_gist': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Star_a_gist(BaseFunction):
    """"""
    name = "Star a gist"
    url = "https://api.github.com/gists/{gist_id}/star"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Star_a_gist.method, 
                                           Star_a_gist.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Star_a_gist': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Unstar_a_gist(BaseFunction):
    """"""
    name = "Unstar a gist"
    url = "https://api.github.com/gists/{gist_id}/star"
    args_in_url = True
    method = DELETE

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Unstar_a_gist.method, 
                                           Unstar_a_gist.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Unstar_a_gist': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Create_a_public_SSH_key(BaseFunction):
    """"""
    name = "Create a public SSH key"
    url = "https://api.github.com/user/keys"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Create_a_public_SSH_key.method, 
                                           Create_a_public_SSH_key.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Create_a_public_SSH_key': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Delete_a_public_SSH_key(BaseFunction):
    """"""
    name = "Delete a public SSH key"
    url = "https://api.github.com/user/keys/{key_id}"
    args_in_url = True
    method = DELETE

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Delete_a_public_SSH_key.method, 
                                           Delete_a_public_SSH_key.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Delete_a_public_SSH_key': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class List_public_SSH_keys(BaseFunction):
    """"""
    name = "List public SSH keys"
    url = "https://api.github.com/user/keys"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(List_public_SSH_keys.method, 
                                           List_public_SSH_keys.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'List_public_SSH_keys': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Get_a_public_SSH_key(BaseFunction):
    """"""
    name = "Get a public SSH key"
    url = "https://api.github.com/user/keys/{key_id}"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Get_a_public_SSH_key.method, 
                                           Get_a_public_SSH_key.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_a_public_SSH_key': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class List_public_keys_for_a_user(BaseFunction):
    """"""
    name = "List public keys for a user"
    url = "https://api.github.com/users/{username}/keys"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(List_public_keys_for_a_user.method, 
                                           List_public_keys_for_a_user.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'List_public_keys_for_a_user': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Set_interaction_limits(BaseFunction):
    """"""
    name = "Set interaction limits"
    url = "https://api.github.com/user/interaction-limits"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Set_interaction_limits.method, 
                                           Set_interaction_limits.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Set_interaction_limits': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Remove_interaction_limits(BaseFunction):
    """"""
    name = "Remove interaction limits"
    url = "https://api.github.com/user/interaction-limits"
    args_in_url = True
    method = DELETE

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Remove_interaction_limits.method, 
                                           Remove_interaction_limits.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Remove_interaction_limits': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Get_interaction_limits(BaseFunction):
    """"""
    name = "Get interaction limits"
    url = "https://api.github.com/user/interaction-limits"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Get_interaction_limits.method, 
                                           Get_interaction_limits.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_interaction_limits': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Get_billing_report_for_GitHub_Actions(BaseFunction):
    """"""
    name = "Get billing report for GitHub Actions"
    url = "https://api.github.com/users/{username}/settings/billing/actions"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Get_billing_report_for_GitHub_Actions.method, 
                                           Get_billing_report_for_GitHub_Actions.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_billing_report_for_GitHub_Actions': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Get_billing_report_for_GitHub_Packages(BaseFunction):
    """"""
    name = "Get billing report for GitHub Packages"
    url = "https://api.github.com/users/{username}/settings/billing/packages"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Get_billing_report_for_GitHub_Packages.method, 
                                           Get_billing_report_for_GitHub_Packages.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_billing_report_for_GitHub_Packages': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Get_shared_storage_billing(BaseFunction):
    """"""
    name = "Get shared storage billing"
    url = "https://api.github.com/users/{username}/settings/billing/shared-storage"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Get_shared_storage_billing.method, 
                                           Get_shared_storage_billing.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_shared_storage_billing': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Get_billing_usage_report(BaseFunction):
    """"""
    name = "Get billing usage report"
    url = "https://api.github.com/users/{username}/settings/billing/usage"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Get_billing_usage_report.method, 
                                           Get_billing_usage_report.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_billing_usage_report': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Update_authenticated_users_profile(BaseFunction):
    """"""
    name = "Update authenticated user's profile"
    url = "https://api.github.com/user"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Update_authenticated_users_profile.method, 
                                           Update_authenticated_users_profile.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Update_authenticated_users_profile': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Add_social_account_for_authenticated_user(BaseFunction):
    """"""
    name = "Add social account for authenticated user"
    url = "https://api.github.com/user/social_accounts"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Add_social_account_for_authenticated_user.method, 
                                           Add_social_account_for_authenticated_user.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Add_social_account_for_authenticated_user': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Delete_social_accounts_for_authenticated_user(BaseFunction):
    """"""
    name = "Delete social accounts for authenticated user"
    url = "https://api.github.com/user/social_accounts"
    args_in_url = True
    method = DELETE

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Delete_social_accounts_for_authenticated_user.method, 
                                           Delete_social_accounts_for_authenticated_user.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Delete_social_accounts_for_authenticated_user': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Create_a_GPG_key_for_the_user(BaseFunction):
    """"""
    name = "Create a GPG key for the user"
    url = "https://api.github.com/user/gpg_keys"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Create_a_GPG_key_for_the_user.method, 
                                           Create_a_GPG_key_for_the_user.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Create_a_GPG_key_for_the_user': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Delete_a_GPG_key_for_the_user(BaseFunction):
    """"""
    name = "Delete a GPG key for the user"
    url = "https://api.github.com/user/gpg_keys/{gpg_key_id}"
    args_in_url = True
    method = DELETE

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Delete_a_GPG_key_for_the_user.method, 
                                           Delete_a_GPG_key_for_the_user.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Delete_a_GPG_key_for_the_user': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class List_GPG_keys_for_the_user(BaseFunction):
    """"""
    name = "List GPG keys for the user"
    url = "https://api.github.com/user/gpg_keys"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(List_GPG_keys_for_the_user.method, 
                                           List_GPG_keys_for_the_user.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'List_GPG_keys_for_the_user': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Get_a_GPG_key_for_the_user(BaseFunction):
    """"""
    name = "Get a GPG key for the user"
    url = "https://api.github.com/user/gpg_keys/{gpg_key_id}"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Get_a_GPG_key_for_the_user.method, 
                                           Get_a_GPG_key_for_the_user.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_a_GPG_key_for_the_user': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Create_a_gist(BaseFunction):
    """"""
    name = "Create a gist"
    url = "https://api.github.com/gists"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Create_a_gist.method, 
                                           Create_a_gist.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Create_a_gist': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Update_a_gist(BaseFunction):
    """"""
    name = "Update a gist"
    url = "https://api.github.com/gists/{gist_id}"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Update_a_gist.method, 
                                           Update_a_gist.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Update_a_gist': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Delete_a_gist(BaseFunction):
    """"""
    name = "Delete a gist"
    url = "https://api.github.com/gists/{gist_id}"
    args_in_url = True
    method = DELETE

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Delete_a_gist.method, 
                                           Delete_a_gist.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Delete_a_gist': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Create_a_gist_comment(BaseFunction):
    """"""
    name = "Create a gist comment"
    url = "https://api.github.com/gists/{gist_id}/comments"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Create_a_gist_comment.method, 
                                           Create_a_gist_comment.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Create_a_gist_comment': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Update_a_gist_comment(BaseFunction):
    """"""
    name = "Update a gist comment"
    url = "https://api.github.com/gists/{gist_id}/comments/{comment_id}"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Update_a_gist_comment.method, 
                                           Update_a_gist_comment.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Update_a_gist_comment': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Delete_a_gist_comment(BaseFunction):
    """"""
    name = "Delete a gist comment"
    url = "https://api.github.com/gists/{gist_id}/comments/{comment_id}"
    args_in_url = True
    method = DELETE

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Delete_a_gist_comment.method, 
                                           Delete_a_gist_comment.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Delete_a_gist_comment': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Fork_a_gist(BaseFunction):
    """"""
    name = "Fork a gist"
    url = "https://api.github.com/gists/{gist_id}/forks"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Fork_a_gist.method, 
                                           Fork_a_gist.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Fork_a_gist': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Star_a_gist(BaseFunction):
    """"""
    name = "Star a gist"
    url = "https://api.github.com/gists/{gist_id}/star"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Star_a_gist.method, 
                                           Star_a_gist.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Star_a_gist': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Unstar_a_gist(BaseFunction):
    """"""
    name = "Unstar a gist"
    url = "https://api.github.com/gists/{gist_id}/star"
    args_in_url = True
    method = DELETE

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Unstar_a_gist.method, 
                                           Unstar_a_gist.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Unstar_a_gist': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Create_a_public_SSH_key(BaseFunction):
    """"""
    name = "Create a public SSH key"
    url = "https://api.github.com/user/keys"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Create_a_public_SSH_key.method, 
                                           Create_a_public_SSH_key.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Create_a_public_SSH_key': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Delete_a_public_SSH_key(BaseFunction):
    """"""
    name = "Delete a public SSH key"
    url = "https://api.github.com/user/keys/{key_id}"
    args_in_url = True
    method = DELETE

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Delete_a_public_SSH_key.method, 
                                           Delete_a_public_SSH_key.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Delete_a_public_SSH_key': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class List_public_SSH_keys(BaseFunction):
    """"""
    name = "List public SSH keys"
    url = "https://api.github.com/user/keys"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(List_public_SSH_keys.method, 
                                           List_public_SSH_keys.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'List_public_SSH_keys': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Get_a_public_SSH_key(BaseFunction):
    """"""
    name = "Get a public SSH key"
    url = "https://api.github.com/user/keys/{key_id}"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Get_a_public_SSH_key.method, 
                                           Get_a_public_SSH_key.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_a_public_SSH_key': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class List_public_keys_for_a_user(BaseFunction):
    """"""
    name = "List public keys for a user"
    url = "https://api.github.com/users/{username}/keys"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(List_public_keys_for_a_user.method, 
                                           List_public_keys_for_a_user.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'List_public_keys_for_a_user': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Set_interaction_limits(BaseFunction):
    """"""
    name = "Set interaction limits"
    url = "https://api.github.com/user/interaction-limits"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Set_interaction_limits.method, 
                                           Set_interaction_limits.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Set_interaction_limits': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Remove_interaction_limits(BaseFunction):
    """"""
    name = "Remove interaction limits"
    url = "https://api.github.com/user/interaction-limits"
    args_in_url = True
    method = DELETE

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Remove_interaction_limits.method, 
                                           Remove_interaction_limits.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Remove_interaction_limits': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Get_interaction_limits(BaseFunction):
    """"""
    name = "Get interaction limits"
    url = "https://api.github.com/user/interaction-limits"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Get_interaction_limits.method, 
                                           Get_interaction_limits.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_interaction_limits': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Get_billing_report_for_GitHub_Actions(BaseFunction):
    """"""
    name = "Get billing report for GitHub Actions"
    url = "https://api.github.com/users/{username}/settings/billing/actions"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Get_billing_report_for_GitHub_Actions.method, 
                                           Get_billing_report_for_GitHub_Actions.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_billing_report_for_GitHub_Actions': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Get_billing_report_for_GitHub_Packages(BaseFunction):
    """"""
    name = "Get billing report for GitHub Packages"
    url = "https://api.github.com/users/{username}/settings/billing/packages"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Get_billing_report_for_GitHub_Packages.method, 
                                           Get_billing_report_for_GitHub_Packages.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_billing_report_for_GitHub_Packages': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Get_shared_storage_billing(BaseFunction):
    """"""
    name = "Get shared storage billing"
    url = "https://api.github.com/users/{username}/settings/billing/shared-storage"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Get_shared_storage_billing.method, 
                                           Get_shared_storage_billing.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_shared_storage_billing': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Get_billing_usage_report(BaseFunction):
    """"""
    name = "Get billing usage report"
    url = "https://api.github.com/users/{username}/settings/billing/usage"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Get_billing_usage_report.method, 
                                           Get_billing_usage_report.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_billing_usage_report': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Update_authenticated_users_profile(BaseFunction):
    """"""
    name = "Update authenticated user's profile"
    url = "https://api.github.com/user"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Update_authenticated_users_profile.method, 
                                           Update_authenticated_users_profile.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Update_authenticated_users_profile': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Add_social_account_for_authenticated_user(BaseFunction):
    """"""
    name = "Add social account for authenticated user"
    url = "https://api.github.com/user/social_accounts"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Add_social_account_for_authenticated_user.method, 
                                           Add_social_account_for_authenticated_user.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Add_social_account_for_authenticated_user': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Delete_social_accounts_for_authenticated_user(BaseFunction):
    """"""
    name = "Delete social accounts for authenticated user"
    url = "https://api.github.com/user/social_accounts"
    args_in_url = True
    method = DELETE

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Delete_social_accounts_for_authenticated_user.method, 
                                           Delete_social_accounts_for_authenticated_user.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Delete_social_accounts_for_authenticated_user': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Create_a_GPG_key_for_the_user(BaseFunction):
    """"""
    name = "Create a GPG key for the user"
    url = "https://api.github.com/user/gpg_keys"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Create_a_GPG_key_for_the_user.method, 
                                           Create_a_GPG_key_for_the_user.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Create_a_GPG_key_for_the_user': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Delete_a_GPG_key_for_the_user(BaseFunction):
    """"""
    name = "Delete a GPG key for the user"
    url = "https://api.github.com/user/gpg_keys/{gpg_key_id}"
    args_in_url = True
    method = DELETE

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Delete_a_GPG_key_for_the_user.method, 
                                           Delete_a_GPG_key_for_the_user.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Delete_a_GPG_key_for_the_user': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class List_GPG_keys_for_the_user(BaseFunction):
    """"""
    name = "List GPG keys for the user"
    url = "https://api.github.com/user/gpg_keys"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(List_GPG_keys_for_the_user.method, 
                                           List_GPG_keys_for_the_user.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'List_GPG_keys_for_the_user': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Get_a_GPG_key_for_the_user(BaseFunction):
    """"""
    name = "Get a GPG key for the user"
    url = "https://api.github.com/user/gpg_keys/{gpg_key_id}"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Get_a_GPG_key_for_the_user.method, 
                                           Get_a_GPG_key_for_the_user.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_a_GPG_key_for_the_user': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Create_a_gist(BaseFunction):
    """"""
    name = "Create a gist"
    url = "https://api.github.com/gists"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Create_a_gist.method, 
                                           Create_a_gist.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Create_a_gist': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Update_a_gist(BaseFunction):
    """"""
    name = "Update a gist"
    url = "https://api.github.com/gists/{gist_id}"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Update_a_gist.method, 
                                           Update_a_gist.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Update_a_gist': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Delete_a_gist(BaseFunction):
    """"""
    name = "Delete a gist"
    url = "https://api.github.com/gists/{gist_id}"
    args_in_url = True
    method = DELETE

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Delete_a_gist.method, 
                                           Delete_a_gist.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Delete_a_gist': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Create_a_gist_comment(BaseFunction):
    """"""
    name = "Create a gist comment"
    url = "https://api.github.com/gists/{gist_id}/comments"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Create_a_gist_comment.method, 
                                           Create_a_gist_comment.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Create_a_gist_comment': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Update_a_gist_comment(BaseFunction):
    """"""
    name = "Update a gist comment"
    url = "https://api.github.com/gists/{gist_id}/comments/{comment_id}"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Update_a_gist_comment.method, 
                                           Update_a_gist_comment.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Update_a_gist_comment': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Delete_a_gist_comment(BaseFunction):
    """"""
    name = "Delete a gist comment"
    url = "https://api.github.com/gists/{gist_id}/comments/{comment_id}"
    args_in_url = True
    method = DELETE

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Delete_a_gist_comment.method, 
                                           Delete_a_gist_comment.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Delete_a_gist_comment': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Fork_a_gist(BaseFunction):
    """"""
    name = "Fork a gist"
    url = "https://api.github.com/gists/{gist_id}/forks"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Fork_a_gist.method, 
                                           Fork_a_gist.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Fork_a_gist': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Star_a_gist(BaseFunction):
    """"""
    name = "Star a gist"
    url = "https://api.github.com/gists/{gist_id}/star"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Star_a_gist.method, 
                                           Star_a_gist.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Star_a_gist': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Unstar_a_gist(BaseFunction):
    """"""
    name = "Unstar a gist"
    url = "https://api.github.com/gists/{gist_id}/star"
    args_in_url = True
    method = DELETE

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Unstar_a_gist.method, 
                                           Unstar_a_gist.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Unstar_a_gist': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Create_a_public_SSH_key(BaseFunction):
    """"""
    name = "Create a public SSH key"
    url = "https://api.github.com/user/keys"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Create_a_public_SSH_key.method, 
                                           Create_a_public_SSH_key.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Create_a_public_SSH_key': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Delete_a_public_SSH_key(BaseFunction):
    """"""
    name = "Delete a public SSH key"
    url = "https://api.github.com/user/keys/{key_id}"
    args_in_url = True
    method = DELETE

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Delete_a_public_SSH_key.method, 
                                           Delete_a_public_SSH_key.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Delete_a_public_SSH_key': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class List_public_SSH_keys(BaseFunction):
    """"""
    name = "List public SSH keys"
    url = "https://api.github.com/user/keys"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(List_public_SSH_keys.method, 
                                           List_public_SSH_keys.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'List_public_SSH_keys': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Get_a_public_SSH_key(BaseFunction):
    """"""
    name = "Get a public SSH key"
    url = "https://api.github.com/user/keys/{key_id}"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Get_a_public_SSH_key.method, 
                                           Get_a_public_SSH_key.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_a_public_SSH_key': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class List_public_keys_for_a_user(BaseFunction):
    """"""
    name = "List public keys for a user"
    url = "https://api.github.com/users/{username}/keys"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(List_public_keys_for_a_user.method, 
                                           List_public_keys_for_a_user.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'List_public_keys_for_a_user': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Set_interaction_limits(BaseFunction):
    """"""
    name = "Set interaction limits"
    url = "https://api.github.com/user/interaction-limits"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Set_interaction_limits.method, 
                                           Set_interaction_limits.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Set_interaction_limits': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Remove_interaction_limits(BaseFunction):
    """"""
    name = "Remove interaction limits"
    url = "https://api.github.com/user/interaction-limits"
    args_in_url = True
    method = DELETE

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Remove_interaction_limits.method, 
                                           Remove_interaction_limits.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Remove_interaction_limits': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Get_interaction_limits(BaseFunction):
    """"""
    name = "Get interaction limits"
    url = "https://api.github.com/user/interaction-limits"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Get_interaction_limits.method, 
                                           Get_interaction_limits.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_interaction_limits': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Get_billing_report_for_GitHub_Actions(BaseFunction):
    """"""
    name = "Get billing report for GitHub Actions"
    url = "https://api.github.com/users/{username}/settings/billing/actions"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Get_billing_report_for_GitHub_Actions.method, 
                                           Get_billing_report_for_GitHub_Actions.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_billing_report_for_GitHub_Actions': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Get_billing_report_for_GitHub_Packages(BaseFunction):
    """"""
    name = "Get billing report for GitHub Packages"
    url = "https://api.github.com/users/{username}/settings/billing/packages"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Get_billing_report_for_GitHub_Packages.method, 
                                           Get_billing_report_for_GitHub_Packages.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_billing_report_for_GitHub_Packages': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Get_shared_storage_billing(BaseFunction):
    """"""
    name = "Get shared storage billing"
    url = "https://api.github.com/users/{username}/settings/billing/shared-storage"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Get_shared_storage_billing.method, 
                                           Get_shared_storage_billing.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_shared_storage_billing': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Get_billing_usage_report(BaseFunction):
    """"""
    name = "Get billing usage report"
    url = "https://api.github.com/users/{username}/settings/billing/usage"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Get_billing_usage_report.method, 
                                           Get_billing_usage_report.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_billing_usage_report': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Update_authenticated_users_profile(BaseFunction):
    """"""
    name = "Update authenticated user's profile"
    url = "https://api.github.com/user"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Update_authenticated_users_profile.method, 
                                           Update_authenticated_users_profile.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Update_authenticated_users_profile': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Add_social_account_for_authenticated_user(BaseFunction):
    """"""
    name = "Add social account for authenticated user"
    url = "https://api.github.com/user/social_accounts"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Add_social_account_for_authenticated_user.method, 
                                           Add_social_account_for_authenticated_user.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Add_social_account_for_authenticated_user': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Delete_social_accounts_for_authenticated_user(BaseFunction):
    """"""
    name = "Delete social accounts for authenticated user"
    url = "https://api.github.com/user/social_accounts"
    args_in_url = True
    method = DELETE

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Delete_social_accounts_for_authenticated_user.method, 
                                           Delete_social_accounts_for_authenticated_user.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Delete_social_accounts_for_authenticated_user': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Create_a_GPG_key_for_the_user(BaseFunction):
    """"""
    name = "Create a GPG key for the user"
    url = "https://api.github.com/user/gpg_keys"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Create_a_GPG_key_for_the_user.method, 
                                           Create_a_GPG_key_for_the_user.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Create_a_GPG_key_for_the_user': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Delete_a_GPG_key_for_the_user(BaseFunction):
    """"""
    name = "Delete a GPG key for the user"
    url = "https://api.github.com/user/gpg_keys/{gpg_key_id}"
    args_in_url = True
    method = DELETE

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Delete_a_GPG_key_for_the_user.method, 
                                           Delete_a_GPG_key_for_the_user.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Delete_a_GPG_key_for_the_user': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class List_GPG_keys_for_the_user(BaseFunction):
    """"""
    name = "List GPG keys for the user"
    url = "https://api.github.com/user/gpg_keys"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(List_GPG_keys_for_the_user.method, 
                                           List_GPG_keys_for_the_user.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'List_GPG_keys_for_the_user': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Get_a_GPG_key_for_the_user(BaseFunction):
    """"""
    name = "Get a GPG key for the user"
    url = "https://api.github.com/user/gpg_keys/{gpg_key_id}"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Get_a_GPG_key_for_the_user.method, 
                                           Get_a_GPG_key_for_the_user.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_a_GPG_key_for_the_user': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Create_a_gist(BaseFunction):
    """"""
    name = "Create a gist"
    url = "https://api.github.com/gists"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Create_a_gist.method, 
                                           Create_a_gist.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Create_a_gist': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Update_a_gist(BaseFunction):
    """"""
    name = "Update a gist"
    url = "https://api.github.com/gists/{gist_id}"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Update_a_gist.method, 
                                           Update_a_gist.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Update_a_gist': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Delete_a_gist(BaseFunction):
    """"""
    name = "Delete a gist"
    url = "https://api.github.com/gists/{gist_id}"
    args_in_url = True
    method = DELETE

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Delete_a_gist.method, 
                                           Delete_a_gist.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Delete_a_gist': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Create_a_gist_comment(BaseFunction):
    """"""
    name = "Create a gist comment"
    url = "https://api.github.com/gists/{gist_id}/comments"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Create_a_gist_comment.method, 
                                           Create_a_gist_comment.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Create_a_gist_comment': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Update_a_gist_comment(BaseFunction):
    """"""
    name = "Update a gist comment"
    url = "https://api.github.com/gists/{gist_id}/comments/{comment_id}"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Update_a_gist_comment.method, 
                                           Update_a_gist_comment.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Update_a_gist_comment': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Delete_a_gist_comment(BaseFunction):
    """"""
    name = "Delete a gist comment"
    url = "https://api.github.com/gists/{gist_id}/comments/{comment_id}"
    args_in_url = True
    method = DELETE

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Delete_a_gist_comment.method, 
                                           Delete_a_gist_comment.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Delete_a_gist_comment': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Fork_a_gist(BaseFunction):
    """"""
    name = "Fork a gist"
    url = "https://api.github.com/gists/{gist_id}/forks"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Fork_a_gist.method, 
                                           Fork_a_gist.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Fork_a_gist': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Star_a_gist(BaseFunction):
    """"""
    name = "Star a gist"
    url = "https://api.github.com/gists/{gist_id}/star"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Star_a_gist.method, 
                                           Star_a_gist.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Star_a_gist': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Unstar_a_gist(BaseFunction):
    """"""
    name = "Unstar a gist"
    url = "https://api.github.com/gists/{gist_id}/star"
    args_in_url = True
    method = DELETE

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Unstar_a_gist.method, 
                                           Unstar_a_gist.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Unstar_a_gist': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Create_a_public_SSH_key(BaseFunction):
    """"""
    name = "Create a public SSH key"
    url = "https://api.github.com/user/keys"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Create_a_public_SSH_key.method, 
                                           Create_a_public_SSH_key.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Create_a_public_SSH_key': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Delete_a_public_SSH_key(BaseFunction):
    """"""
    name = "Delete a public SSH key"
    url = "https://api.github.com/user/keys/{key_id}"
    args_in_url = True
    method = DELETE

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Delete_a_public_SSH_key.method, 
                                           Delete_a_public_SSH_key.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Delete_a_public_SSH_key': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class List_public_SSH_keys(BaseFunction):
    """"""
    name = "List public SSH keys"
    url = "https://api.github.com/user/keys"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(List_public_SSH_keys.method, 
                                           List_public_SSH_keys.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'List_public_SSH_keys': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Get_a_public_SSH_key(BaseFunction):
    """"""
    name = "Get a public SSH key"
    url = "https://api.github.com/user/keys/{key_id}"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Get_a_public_SSH_key.method, 
                                           Get_a_public_SSH_key.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_a_public_SSH_key': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class List_public_keys_for_a_user(BaseFunction):
    """"""
    name = "List public keys for a user"
    url = "https://api.github.com/users/{username}/keys"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(List_public_keys_for_a_user.method, 
                                           List_public_keys_for_a_user.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'List_public_keys_for_a_user': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Set_interaction_limits(BaseFunction):
    """"""
    name = "Set interaction limits"
    url = "https://api.github.com/user/interaction-limits"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Set_interaction_limits.method, 
                                           Set_interaction_limits.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Set_interaction_limits': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Remove_interaction_limits(BaseFunction):
    """"""
    name = "Remove interaction limits"
    url = "https://api.github.com/user/interaction-limits"
    args_in_url = True
    method = DELETE

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Remove_interaction_limits.method, 
                                           Remove_interaction_limits.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Remove_interaction_limits': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Get_interaction_limits(BaseFunction):
    """"""
    name = "Get interaction limits"
    url = "https://api.github.com/user/interaction-limits"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Get_interaction_limits.method, 
                                           Get_interaction_limits.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_interaction_limits': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Get_billing_report_for_GitHub_Actions(BaseFunction):
    """"""
    name = "Get billing report for GitHub Actions"
    url = "https://api.github.com/users/{username}/settings/billing/actions"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Get_billing_report_for_GitHub_Actions.method, 
                                           Get_billing_report_for_GitHub_Actions.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_billing_report_for_GitHub_Actions': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Get_billing_report_for_GitHub_Packages(BaseFunction):
    """"""
    name = "Get billing report for GitHub Packages"
    url = "https://api.github.com/users/{username}/settings/billing/packages"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Get_billing_report_for_GitHub_Packages.method, 
                                           Get_billing_report_for_GitHub_Packages.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_billing_report_for_GitHub_Packages': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Get_shared_storage_billing(BaseFunction):
    """"""
    name = "Get shared storage billing"
    url = "https://api.github.com/users/{username}/settings/billing/shared-storage"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Get_shared_storage_billing.method, 
                                           Get_shared_storage_billing.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_shared_storage_billing': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Get_billing_usage_report(BaseFunction):
    """"""
    name = "Get billing usage report"
    url = "https://api.github.com/users/{username}/settings/billing/usage"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Get_billing_usage_report.method, 
                                           Get_billing_usage_report.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_billing_usage_report': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Update_authenticated_users_profile(BaseFunction):
    """"""
    name = "Update authenticated user's profile"
    url = "https://api.github.com/user"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Update_authenticated_users_profile.method, 
                                           Update_authenticated_users_profile.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Update_authenticated_users_profile': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Add_social_account_for_authenticated_user(BaseFunction):
    """"""
    name = "Add social account for authenticated user"
    url = "https://api.github.com/user/social_accounts"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Add_social_account_for_authenticated_user.method, 
                                           Add_social_account_for_authenticated_user.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Add_social_account_for_authenticated_user': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Delete_social_accounts_for_authenticated_user(BaseFunction):
    """"""
    name = "Delete social accounts for authenticated user"
    url = "https://api.github.com/user/social_accounts"
    args_in_url = True
    method = DELETE

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Delete_social_accounts_for_authenticated_user.method, 
                                           Delete_social_accounts_for_authenticated_user.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Delete_social_accounts_for_authenticated_user': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Create_a_GPG_key_for_the_user(BaseFunction):
    """"""
    name = "Create a GPG key for the user"
    url = "https://api.github.com/user/gpg_keys"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Create_a_GPG_key_for_the_user.method, 
                                           Create_a_GPG_key_for_the_user.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Create_a_GPG_key_for_the_user': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Delete_a_GPG_key_for_the_user(BaseFunction):
    """"""
    name = "Delete a GPG key for the user"
    url = "https://api.github.com/user/gpg_keys/{gpg_key_id}"
    args_in_url = True
    method = DELETE

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Delete_a_GPG_key_for_the_user.method, 
                                           Delete_a_GPG_key_for_the_user.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Delete_a_GPG_key_for_the_user': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class List_GPG_keys_for_the_user(BaseFunction):
    """"""
    name = "List GPG keys for the user"
    url = "https://api.github.com/user/gpg_keys"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(List_GPG_keys_for_the_user.method, 
                                           List_GPG_keys_for_the_user.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'List_GPG_keys_for_the_user': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Get_a_GPG_key_for_the_user(BaseFunction):
    """"""
    name = "Get a GPG key for the user"
    url = "https://api.github.com/user/gpg_keys/{gpg_key_id}"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Get_a_GPG_key_for_the_user.method, 
                                           Get_a_GPG_key_for_the_user.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_a_GPG_key_for_the_user': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Create_a_gist(BaseFunction):
    """"""
    name = "Create a gist"
    url = "https://api.github.com/gists"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Create_a_gist.method, 
                                           Create_a_gist.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Create_a_gist': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Update_a_gist(BaseFunction):
    """"""
    name = "Update a gist"
    url = "https://api.github.com/gists/{gist_id}"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Update_a_gist.method, 
                                           Update_a_gist.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Update_a_gist': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Delete_a_gist(BaseFunction):
    """"""
    name = "Delete a gist"
    url = "https://api.github.com/gists/{gist_id}"
    args_in_url = True
    method = DELETE

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Delete_a_gist.method, 
                                           Delete_a_gist.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Delete_a_gist': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Create_a_gist_comment(BaseFunction):
    """"""
    name = "Create a gist comment"
    url = "https://api.github.com/gists/{gist_id}/comments"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Create_a_gist_comment.method, 
                                           Create_a_gist_comment.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Create_a_gist_comment': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Update_a_gist_comment(BaseFunction):
    """"""
    name = "Update a gist comment"
    url = "https://api.github.com/gists/{gist_id}/comments/{comment_id}"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Update_a_gist_comment.method, 
                                           Update_a_gist_comment.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Update_a_gist_comment': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Delete_a_gist_comment(BaseFunction):
    """"""
    name = "Delete a gist comment"
    url = "https://api.github.com/gists/{gist_id}/comments/{comment_id}"
    args_in_url = True
    method = DELETE

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Delete_a_gist_comment.method, 
                                           Delete_a_gist_comment.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Delete_a_gist_comment': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Fork_a_gist(BaseFunction):
    """"""
    name = "Fork a gist"
    url = "https://api.github.com/gists/{gist_id}/forks"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Fork_a_gist.method, 
                                           Fork_a_gist.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Fork_a_gist': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Star_a_gist(BaseFunction):
    """"""
    name = "Star a gist"
    url = "https://api.github.com/gists/{gist_id}/star"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Star_a_gist.method, 
                                           Star_a_gist.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Star_a_gist': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Unstar_a_gist(BaseFunction):
    """"""
    name = "Unstar a gist"
    url = "https://api.github.com/gists/{gist_id}/star"
    args_in_url = True
    method = DELETE

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Unstar_a_gist.method, 
                                           Unstar_a_gist.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Unstar_a_gist': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Create_a_public_SSH_key(BaseFunction):
    """"""
    name = "Create a public SSH key"
    url = "https://api.github.com/user/keys"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Create_a_public_SSH_key.method, 
                                           Create_a_public_SSH_key.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Create_a_public_SSH_key': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Delete_a_public_SSH_key(BaseFunction):
    """"""
    name = "Delete a public SSH key"
    url = "https://api.github.com/user/keys/{key_id}"
    args_in_url = True
    method = DELETE

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Delete_a_public_SSH_key.method, 
                                           Delete_a_public_SSH_key.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Delete_a_public_SSH_key': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class List_public_SSH_keys(BaseFunction):
    """"""
    name = "List public SSH keys"
    url = "https://api.github.com/user/keys"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(List_public_SSH_keys.method, 
                                           List_public_SSH_keys.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'List_public_SSH_keys': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Get_a_public_SSH_key(BaseFunction):
    """"""
    name = "Get a public SSH key"
    url = "https://api.github.com/user/keys/{key_id}"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Get_a_public_SSH_key.method, 
                                           Get_a_public_SSH_key.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_a_public_SSH_key': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class List_public_keys_for_a_user(BaseFunction):
    """"""
    name = "List public keys for a user"
    url = "https://api.github.com/users/{username}/keys"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(List_public_keys_for_a_user.method, 
                                           List_public_keys_for_a_user.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'List_public_keys_for_a_user': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Set_interaction_limits(BaseFunction):
    """"""
    name = "Set interaction limits"
    url = "https://api.github.com/user/interaction-limits"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Set_interaction_limits.method, 
                                           Set_interaction_limits.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Set_interaction_limits': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Remove_interaction_limits(BaseFunction):
    """"""
    name = "Remove interaction limits"
    url = "https://api.github.com/user/interaction-limits"
    args_in_url = True
    method = DELETE

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Remove_interaction_limits.method, 
                                           Remove_interaction_limits.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Remove_interaction_limits': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Get_interaction_limits(BaseFunction):
    """"""
    name = "Get interaction limits"
    url = "https://api.github.com/user/interaction-limits"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Get_interaction_limits.method, 
                                           Get_interaction_limits.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_interaction_limits': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Get_billing_report_for_GitHub_Actions(BaseFunction):
    """"""
    name = "Get billing report for GitHub Actions"
    url = "https://api.github.com/users/{username}/settings/billing/actions"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Get_billing_report_for_GitHub_Actions.method, 
                                           Get_billing_report_for_GitHub_Actions.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_billing_report_for_GitHub_Actions': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Get_billing_report_for_GitHub_Packages(BaseFunction):
    """"""
    name = "Get billing report for GitHub Packages"
    url = "https://api.github.com/users/{username}/settings/billing/packages"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Get_billing_report_for_GitHub_Packages.method, 
                                           Get_billing_report_for_GitHub_Packages.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_billing_report_for_GitHub_Packages': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Get_shared_storage_billing(BaseFunction):
    """"""
    name = "Get shared storage billing"
    url = "https://api.github.com/users/{username}/settings/billing/shared-storage"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Get_shared_storage_billing.method, 
                                           Get_shared_storage_billing.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_shared_storage_billing': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Get_billing_usage_report(BaseFunction):
    """"""
    name = "Get billing usage report"
    url = "https://api.github.com/users/{username}/settings/billing/usage"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Get_billing_usage_report.method, 
                                           Get_billing_usage_report.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_billing_usage_report': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Update_authenticated_users_profile(BaseFunction):
    """"""
    name = "Update authenticated user's profile"
    url = "https://api.github.com/user"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Update_authenticated_users_profile.method, 
                                           Update_authenticated_users_profile.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Update_authenticated_users_profile': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Add_social_account_for_authenticated_user(BaseFunction):
    """"""
    name = "Add social account for authenticated user"
    url = "https://api.github.com/user/social_accounts"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Add_social_account_for_authenticated_user.method, 
                                           Add_social_account_for_authenticated_user.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Add_social_account_for_authenticated_user': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Delete_social_accounts_for_authenticated_user(BaseFunction):
    """"""
    name = "Delete social accounts for authenticated user"
    url = "https://api.github.com/user/social_accounts"
    args_in_url = True
    method = DELETE

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Delete_social_accounts_for_authenticated_user.method, 
                                           Delete_social_accounts_for_authenticated_user.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Delete_social_accounts_for_authenticated_user': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Create_a_GPG_key_for_the_user(BaseFunction):
    """"""
    name = "Create a GPG key for the user"
    url = "https://api.github.com/user/gpg_keys"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Create_a_GPG_key_for_the_user.method, 
                                           Create_a_GPG_key_for_the_user.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Create_a_GPG_key_for_the_user': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Delete_a_GPG_key_for_the_user(BaseFunction):
    """"""
    name = "Delete a GPG key for the user"
    url = "https://api.github.com/user/gpg_keys/{gpg_key_id}"
    args_in_url = True
    method = DELETE

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Delete_a_GPG_key_for_the_user.method, 
                                           Delete_a_GPG_key_for_the_user.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Delete_a_GPG_key_for_the_user': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class List_GPG_keys_for_the_user(BaseFunction):
    """"""
    name = "List GPG keys for the user"
    url = "https://api.github.com/user/gpg_keys"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(List_GPG_keys_for_the_user.method, 
                                           List_GPG_keys_for_the_user.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'List_GPG_keys_for_the_user': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Get_a_GPG_key_for_the_user(BaseFunction):
    """"""
    name = "Get a GPG key for the user"
    url = "https://api.github.com/user/gpg_keys/{gpg_key_id}"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Get_a_GPG_key_for_the_user.method, 
                                           Get_a_GPG_key_for_the_user.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_a_GPG_key_for_the_user': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Create_a_gist(BaseFunction):
    """"""
    name = "Create a gist"
    url = "https://api.github.com/gists"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Create_a_gist.method, 
                                           Create_a_gist.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Create_a_gist': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Update_a_gist(BaseFunction):
    """"""
    name = "Update a gist"
    url = "https://api.github.com/gists/{gist_id}"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Update_a_gist.method, 
                                           Update_a_gist.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Update_a_gist': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Delete_a_gist(BaseFunction):
    """"""
    name = "Delete a gist"
    url = "https://api.github.com/gists/{gist_id}"
    args_in_url = True
    method = DELETE

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Delete_a_gist.method, 
                                           Delete_a_gist.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Delete_a_gist': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Create_a_gist_comment(BaseFunction):
    """"""
    name = "Create a gist comment"
    url = "https://api.github.com/gists/{gist_id}/comments"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Create_a_gist_comment.method, 
                                           Create_a_gist_comment.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Create_a_gist_comment': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Update_a_gist_comment(BaseFunction):
    """"""
    name = "Update a gist comment"
    url = "https://api.github.com/gists/{gist_id}/comments/{comment_id}"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Update_a_gist_comment.method, 
                                           Update_a_gist_comment.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Update_a_gist_comment': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Delete_a_gist_comment(BaseFunction):
    """"""
    name = "Delete a gist comment"
    url = "https://api.github.com/gists/{gist_id}/comments/{comment_id}"
    args_in_url = True
    method = DELETE

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Delete_a_gist_comment.method, 
                                           Delete_a_gist_comment.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Delete_a_gist_comment': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Fork_a_gist(BaseFunction):
    """"""
    name = "Fork a gist"
    url = "https://api.github.com/gists/{gist_id}/forks"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Fork_a_gist.method, 
                                           Fork_a_gist.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Fork_a_gist': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Star_a_gist(BaseFunction):
    """"""
    name = "Star a gist"
    url = "https://api.github.com/gists/{gist_id}/star"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Star_a_gist.method, 
                                           Star_a_gist.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Star_a_gist': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Unstar_a_gist(BaseFunction):
    """"""
    name = "Unstar a gist"
    url = "https://api.github.com/gists/{gist_id}/star"
    args_in_url = True
    method = DELETE

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Unstar_a_gist.method, 
                                           Unstar_a_gist.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Unstar_a_gist': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Create_a_public_SSH_key(BaseFunction):
    """"""
    name = "Create a public SSH key"
    url = "https://api.github.com/user/keys"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Create_a_public_SSH_key.method, 
                                           Create_a_public_SSH_key.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Create_a_public_SSH_key': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Delete_a_public_SSH_key(BaseFunction):
    """"""
    name = "Delete a public SSH key"
    url = "https://api.github.com/user/keys/{key_id}"
    args_in_url = True
    method = DELETE

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Delete_a_public_SSH_key.method, 
                                           Delete_a_public_SSH_key.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Delete_a_public_SSH_key': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class List_public_SSH_keys(BaseFunction):
    """"""
    name = "List public SSH keys"
    url = "https://api.github.com/user/keys"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(List_public_SSH_keys.method, 
                                           List_public_SSH_keys.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'List_public_SSH_keys': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Get_a_public_SSH_key(BaseFunction):
    """"""
    name = "Get a public SSH key"
    url = "https://api.github.com/user/keys/{key_id}"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Get_a_public_SSH_key.method, 
                                           Get_a_public_SSH_key.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_a_public_SSH_key': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class List_public_keys_for_a_user(BaseFunction):
    """"""
    name = "List public keys for a user"
    url = "https://api.github.com/users/{username}/keys"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(List_public_keys_for_a_user.method, 
                                           List_public_keys_for_a_user.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'List_public_keys_for_a_user': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Set_interaction_limits(BaseFunction):
    """"""
    name = "Set interaction limits"
    url = "https://api.github.com/user/interaction-limits"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Set_interaction_limits.method, 
                                           Set_interaction_limits.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Set_interaction_limits': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Remove_interaction_limits(BaseFunction):
    """"""
    name = "Remove interaction limits"
    url = "https://api.github.com/user/interaction-limits"
    args_in_url = True
    method = DELETE

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Remove_interaction_limits.method, 
                                           Remove_interaction_limits.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Remove_interaction_limits': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Get_interaction_limits(BaseFunction):
    """"""
    name = "Get interaction limits"
    url = "https://api.github.com/user/interaction-limits"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Get_interaction_limits.method, 
                                           Get_interaction_limits.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_interaction_limits': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Get_billing_report_for_GitHub_Actions(BaseFunction):
    """"""
    name = "Get billing report for GitHub Actions"
    url = "https://api.github.com/users/{username}/settings/billing/actions"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Get_billing_report_for_GitHub_Actions.method, 
                                           Get_billing_report_for_GitHub_Actions.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_billing_report_for_GitHub_Actions': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Get_billing_report_for_GitHub_Packages(BaseFunction):
    """"""
    name = "Get billing report for GitHub Packages"
    url = "https://api.github.com/users/{username}/settings/billing/packages"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Get_billing_report_for_GitHub_Packages.method, 
                                           Get_billing_report_for_GitHub_Packages.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_billing_report_for_GitHub_Packages': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Get_shared_storage_billing(BaseFunction):
    """"""
    name = "Get shared storage billing"
    url = "https://api.github.com/users/{username}/settings/billing/shared-storage"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Get_shared_storage_billing.method, 
                                           Get_shared_storage_billing.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_shared_storage_billing': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Get_billing_usage_report(BaseFunction):
    """"""
    name = "Get billing usage report"
    url = "https://api.github.com/users/{username}/settings/billing/usage"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Get_billing_usage_report.method, 
                                           Get_billing_usage_report.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_billing_usage_report': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Update_authenticated_users_profile(BaseFunction):
    """"""
    name = "Update authenticated user's profile"
    url = "https://api.github.com/user"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Update_authenticated_users_profile.method, 
                                           Update_authenticated_users_profile.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Update_authenticated_users_profile': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Add_social_account_for_authenticated_user(BaseFunction):
    """"""
    name = "Add social account for authenticated user"
    url = "https://api.github.com/user/social_accounts"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Add_social_account_for_authenticated_user.method, 
                                           Add_social_account_for_authenticated_user.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Add_social_account_for_authenticated_user': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Delete_social_accounts_for_authenticated_user(BaseFunction):
    """"""
    name = "Delete social accounts for authenticated user"
    url = "https://api.github.com/user/social_accounts"
    args_in_url = True
    method = DELETE

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Delete_social_accounts_for_authenticated_user.method, 
                                           Delete_social_accounts_for_authenticated_user.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Delete_social_accounts_for_authenticated_user': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Create_a_GPG_key_for_the_user(BaseFunction):
    """"""
    name = "Create a GPG key for the user"
    url = "https://api.github.com/user/gpg_keys"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Create_a_GPG_key_for_the_user.method, 
                                           Create_a_GPG_key_for_the_user.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Create_a_GPG_key_for_the_user': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Delete_a_GPG_key_for_the_user(BaseFunction):
    """"""
    name = "Delete a GPG key for the user"
    url = "https://api.github.com/user/gpg_keys/{gpg_key_id}"
    args_in_url = True
    method = DELETE

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Delete_a_GPG_key_for_the_user.method, 
                                           Delete_a_GPG_key_for_the_user.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Delete_a_GPG_key_for_the_user': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class List_GPG_keys_for_the_user(BaseFunction):
    """"""
    name = "List GPG keys for the user"
    url = "https://api.github.com/user/gpg_keys"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(List_GPG_keys_for_the_user.method, 
                                           List_GPG_keys_for_the_user.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'List_GPG_keys_for_the_user': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Get_a_GPG_key_for_the_user(BaseFunction):
    """"""
    name = "Get a GPG key for the user"
    url = "https://api.github.com/user/gpg_keys/{gpg_key_id}"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Get_a_GPG_key_for_the_user.method, 
                                           Get_a_GPG_key_for_the_user.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_a_GPG_key_for_the_user': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Create_a_gist(BaseFunction):
    """"""
    name = "Create a gist"
    url = "https://api.github.com/gists"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Create_a_gist.method, 
                                           Create_a_gist.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Create_a_gist': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Update_a_gist(BaseFunction):
    """"""
    name = "Update a gist"
    url = "https://api.github.com/gists/{gist_id}"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Update_a_gist.method, 
                                           Update_a_gist.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Update_a_gist': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Delete_a_gist(BaseFunction):
    """"""
    name = "Delete a gist"
    url = "https://api.github.com/gists/{gist_id}"
    args_in_url = True
    method = DELETE

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Delete_a_gist.method, 
                                           Delete_a_gist.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Delete_a_gist': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Create_a_gist_comment(BaseFunction):
    """"""
    name = "Create a gist comment"
    url = "https://api.github.com/gists/{gist_id}/comments"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Create_a_gist_comment.method, 
                                           Create_a_gist_comment.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Create_a_gist_comment': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Update_a_gist_comment(BaseFunction):
    """"""
    name = "Update a gist comment"
    url = "https://api.github.com/gists/{gist_id}/comments/{comment_id}"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Update_a_gist_comment.method, 
                                           Update_a_gist_comment.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Update_a_gist_comment': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Delete_a_gist_comment(BaseFunction):
    """"""
    name = "Delete a gist comment"
    url = "https://api.github.com/gists/{gist_id}/comments/{comment_id}"
    args_in_url = True
    method = DELETE

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Delete_a_gist_comment.method, 
                                           Delete_a_gist_comment.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Delete_a_gist_comment': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Fork_a_gist(BaseFunction):
    """"""
    name = "Fork a gist"
    url = "https://api.github.com/gists/{gist_id}/forks"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Fork_a_gist.method, 
                                           Fork_a_gist.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Fork_a_gist': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Star_a_gist(BaseFunction):
    """"""
    name = "Star a gist"
    url = "https://api.github.com/gists/{gist_id}/star"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Star_a_gist.method, 
                                           Star_a_gist.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Star_a_gist': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Unstar_a_gist(BaseFunction):
    """"""
    name = "Unstar a gist"
    url = "https://api.github.com/gists/{gist_id}/star"
    args_in_url = True
    method = DELETE

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Unstar_a_gist.method, 
                                           Unstar_a_gist.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Unstar_a_gist': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Create_a_public_SSH_key(BaseFunction):
    """"""
    name = "Create a public SSH key"
    url = "https://api.github.com/user/keys"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Create_a_public_SSH_key.method, 
                                           Create_a_public_SSH_key.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Create_a_public_SSH_key': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Delete_a_public_SSH_key(BaseFunction):
    """"""
    name = "Delete a public SSH key"
    url = "https://api.github.com/user/keys/{key_id}"
    args_in_url = True
    method = DELETE

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Delete_a_public_SSH_key.method, 
                                           Delete_a_public_SSH_key.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Delete_a_public_SSH_key': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class List_public_SSH_keys(BaseFunction):
    """"""
    name = "List public SSH keys"
    url = "https://api.github.com/user/keys"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(List_public_SSH_keys.method, 
                                           List_public_SSH_keys.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'List_public_SSH_keys': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Get_a_public_SSH_key(BaseFunction):
    """"""
    name = "Get a public SSH key"
    url = "https://api.github.com/user/keys/{key_id}"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Get_a_public_SSH_key.method, 
                                           Get_a_public_SSH_key.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_a_public_SSH_key': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class List_public_keys_for_a_user(BaseFunction):
    """"""
    name = "List public keys for a user"
    url = "https://api.github.com/users/{username}/keys"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(List_public_keys_for_a_user.method, 
                                           List_public_keys_for_a_user.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'List_public_keys_for_a_user': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Set_interaction_limits(BaseFunction):
    """"""
    name = "Set interaction limits"
    url = "https://api.github.com/user/interaction-limits"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Set_interaction_limits.method, 
                                           Set_interaction_limits.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Set_interaction_limits': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Remove_interaction_limits(BaseFunction):
    """"""
    name = "Remove interaction limits"
    url = "https://api.github.com/user/interaction-limits"
    args_in_url = True
    method = DELETE

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Remove_interaction_limits.method, 
                                           Remove_interaction_limits.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Remove_interaction_limits': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Get_interaction_limits(BaseFunction):
    """"""
    name = "Get interaction limits"
    url = "https://api.github.com/user/interaction-limits"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Get_interaction_limits.method, 
                                           Get_interaction_limits.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_interaction_limits': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Get_billing_report_for_GitHub_Actions(BaseFunction):
    """"""
    name = "Get billing report for GitHub Actions"
    url = "https://api.github.com/users/{username}/settings/billing/actions"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Get_billing_report_for_GitHub_Actions.method, 
                                           Get_billing_report_for_GitHub_Actions.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_billing_report_for_GitHub_Actions': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Get_billing_report_for_GitHub_Packages(BaseFunction):
    """"""
    name = "Get billing report for GitHub Packages"
    url = "https://api.github.com/users/{username}/settings/billing/packages"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Get_billing_report_for_GitHub_Packages.method, 
                                           Get_billing_report_for_GitHub_Packages.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_billing_report_for_GitHub_Packages': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Get_shared_storage_billing(BaseFunction):
    """"""
    name = "Get shared storage billing"
    url = "https://api.github.com/users/{username}/settings/billing/shared-storage"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Get_shared_storage_billing.method, 
                                           Get_shared_storage_billing.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_shared_storage_billing': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class Get_billing_usage_report(BaseFunction):
    """"""
    name = "Get billing usage report"
    url = "https://api.github.com/users/{username}/settings/billing/usage"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(Get_billing_usage_report.method, 
                                           Get_billing_usage_report.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'Get_billing_usage_report': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class GET_orgsorgactionscacheusage(BaseFunction):
    """Get the total and per-repository cache usage for an organization."""
    name = "GET /orgs/{org}/actions/cache/usage"
    url = "/orgs/{org}/actions/cache/usage"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="org", param_type=ParameterType.STRING, required=True),  # The organization name
        ]

    def get_output_schema(self):
        return [
            OutputParameter(name="total_usage_bytes", param_type=OutputParameterType.INTEGER, is_array=False),  # Total cache usage in bytes for the organization.,
			OutputParameter(name="per_repository_usage_bytes", param_type=OutputParameterType.OBJECT, is_array=True),  # List of repositories with their cache usage.
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(GET_orgsorgactionscacheusage.method, 
                                           GET_orgsorgactionscacheusage.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'GET_orgsorgactionscacheusage': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class GET_orgsorgactionscacheusagebyrepository(BaseFunction):
    """List repositories with their cache usage details for an organization."""
    name = "GET /orgs/{org}/actions/cache/usage-by-repository"
    url = "/orgs/{org}/actions/cache/usage-by-repository"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="org", param_type=ParameterType.STRING, required=True),  # The organization name
        ]

    def get_output_schema(self):
        return [
            OutputParameter(name="repositories", param_type=OutputParameterType.OBJECT, is_array=True),  # List of repositories with cache usage details.
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(GET_orgsorgactionscacheusagebyrepository.method, 
                                           GET_orgsorgactionscacheusagebyrepository.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'GET_orgsorgactionscacheusagebyrepository': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class GET_orgsorgactionshostedrunners(BaseFunction):
    """List GitHub-hosted runners available for an organization."""
    name = "GET /orgs/{org}/actions/hosted-runners"
    url = "/orgs/{org}/actions/hosted-runners"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="org", param_type=ParameterType.STRING, required=True),  # The organization name
        ]

    def get_output_schema(self):
        return [
            OutputParameter(name="runners", param_type=OutputParameterType.OBJECT, is_array=True),  # List of hosted runners for the organization.
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(GET_orgsorgactionshostedrunners.method, 
                                           GET_orgsorgactionshostedrunners.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'GET_orgsorgactionshostedrunners': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class POST_orgsorgactionshostedrunners(BaseFunction):
    """Create a new GitHub-hosted runner for an organization."""
    name = "POST /orgs/{org}/actions/hosted-runners"
    url = "/orgs/{org}/actions/hosted-runners"
    args_in_url = True
    method = INSERT

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="org", param_type=ParameterType.STRING, required=True),  # The organization name,
			Parameter(name="runner_name", param_type=ParameterType.STRING, required=True),  # Name for the new hosted runner,
			Parameter(name="runner_image", param_type=ParameterType.STRING, required=True),  # Image of the runner to use
        ]

    def get_output_schema(self):
        return [
            OutputParameter(name="runner_id", param_type=OutputParameterType.INTEGER, is_array=False),  # ID of the created runner.
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(POST_orgsorgactionshostedrunners.method, 
                                           POST_orgsorgactionshostedrunners.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'POST_orgsorgactionshostedrunners': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class GET_orgsorgactionshostedrunnersimagesgithubowned(BaseFunction):
    """List GitHub-owned images for hosted runners in an organization."""
    name = "GET /orgs/{org}/actions/hosted-runners/images/github-owned"
    url = "/orgs/{org}/actions/hosted-runners/images/github-owned"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="org", param_type=ParameterType.STRING, required=True),  # Organization name
        ]

    def get_output_schema(self):
        return [
            OutputParameter(name="images", param_type=OutputParameterType.STRING, is_array=True),  # Available GitHub-owned images for hosted runners.
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(GET_orgsorgactionshostedrunnersimagesgithubowned.method, 
                                           GET_orgsorgactionshostedrunnersimagesgithubowned.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'GET_orgsorgactionshostedrunnersimagesgithubowned': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class GET_orgsorgactionshostedrunnersimagespartner(BaseFunction):
    """List partner images for hosted runners in an organization."""
    name = "GET /orgs/{org}/actions/hosted-runners/images/partner"
    url = "/orgs/{org}/actions/hosted-runners/images/partner"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="org", param_type=ParameterType.STRING, required=True),  # Organization name
        ]

    def get_output_schema(self):
        return [
            OutputParameter(name="images", param_type=OutputParameterType.STRING, is_array=True),  # Partner images available for hosted runners.
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(GET_orgsorgactionshostedrunnersimagespartner.method, 
                                           GET_orgsorgactionshostedrunnersimagespartner.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'GET_orgsorgactionshostedrunnersimagespartner': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class GET_orgsorgactionshostedrunnerslimits(BaseFunction):
    """Get limits on GitHub-hosted runners for an organization."""
    name = "GET /orgs/{org}/actions/hosted-runners/limits"
    url = "/orgs/{org}/actions/hosted-runners/limits"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="org", param_type=ParameterType.STRING, required=True),  # Organization name
        ]

    def get_output_schema(self):
        return [
            OutputParameter(name="limits", param_type=OutputParameterType.OBJECT, is_array=False),  # Limits for hosted runners in the organization.
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(GET_orgsorgactionshostedrunnerslimits.method, 
                                           GET_orgsorgactionshostedrunnerslimits.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'GET_orgsorgactionshostedrunnerslimits': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class GET_orgsorgactionshostedrunnersmachinesizes(BaseFunction):
    """List machine sizes for GitHub-hosted runners in an organization."""
    name = "GET /orgs/{org}/actions/hosted-runners/machine-sizes"
    url = "/orgs/{org}/actions/hosted-runners/machine-sizes"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="org", param_type=ParameterType.STRING, required=True),  # Organization name
        ]

    def get_output_schema(self):
        return [
            OutputParameter(name="machine_sizes", param_type=OutputParameterType.STRING, is_array=True),  # Available machine sizes for hosted runners.
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(GET_orgsorgactionshostedrunnersmachinesizes.method, 
                                           GET_orgsorgactionshostedrunnersmachinesizes.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'GET_orgsorgactionshostedrunnersmachinesizes': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class GET_orgsorgactionshostedrunnersplatforms(BaseFunction):
    """List platforms for GitHub-hosted runners in an organization."""
    name = "GET /orgs/{org}/actions/hosted-runners/platforms"
    url = "/orgs/{org}/actions/hosted-runners/platforms"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="org", param_type=ParameterType.STRING, required=True),  # Organization name
        ]

    def get_output_schema(self):
        return [
            OutputParameter(name="platforms", param_type=OutputParameterType.STRING, is_array=True),  # Supported platforms for hosted runners.
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(GET_orgsorgactionshostedrunnersplatforms.method, 
                                           GET_orgsorgactionshostedrunnersplatforms.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'GET_orgsorgactionshostedrunnersplatforms': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class GET_orgsorgactionshostedrunnershosted_runner_id(BaseFunction):
    """Get details of a specific GitHub-hosted runner in an organization."""
    name = "GET /orgs/{org}/actions/hosted-runners/{hosted_runner_id}"
    url = "/orgs/{org}/actions/hosted-runners/{hosted_runner_id}"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="org", param_type=ParameterType.STRING, required=True),  # Organization name,
			Parameter(name="hosted_runner_id", param_type=ParameterType.INTEGER, required=True),  # ID of the runner
        ]

    def get_output_schema(self):
        return [
            OutputParameter(name="runner", param_type=OutputParameterType.OBJECT, is_array=False),  # Details of the specified hosted runner.
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(GET_orgsorgactionshostedrunnershosted_runner_id.method, 
                                           GET_orgsorgactionshostedrunnershosted_runner_id.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'GET_orgsorgactionshostedrunnershosted_runner_id': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class PATCH_orgsorgactionshostedrunnershosted_runner_id(BaseFunction):
    """Update details of a specific GitHub-hosted runner in an organization."""
    name = "PATCH /orgs/{org}/actions/hosted-runners/{hosted_runner_id}"
    url = "/orgs/{org}/actions/hosted-runners/{hosted_runner_id}"
    args_in_url = True
    method = UPDATE

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="org", param_type=ParameterType.STRING, required=True),  # Organization name,
			Parameter(name="hosted_runner_id", param_type=ParameterType.INTEGER, required=True),  # ID of the runner,
			Parameter(name="name", param_type=ParameterType.STRING, required=False),  # Updated name of the runner
        ]

    def get_output_schema(self):
        return [
            OutputParameter(name="updated_runner", param_type=OutputParameterType.OBJECT, is_array=False),  # Updated details of the runner.
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(PATCH_orgsorgactionshostedrunnershosted_runner_id.method, 
                                           PATCH_orgsorgactionshostedrunnershosted_runner_id.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'PATCH_orgsorgactionshostedrunnershosted_runner_id': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class DELETE_orgsorgactionshostedrunnershosted_runner_id(BaseFunction):
    """Delete a specific GitHub-hosted runner from an organization."""
    name = "DELETE /orgs/{org}/actions/hosted-runners/{hosted_runner_id}"
    url = "/orgs/{org}/actions/hosted-runners/{hosted_runner_id}"
    args_in_url = True
    method = DELETE

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="org", param_type=ParameterType.STRING, required=True),  # Organization name,
			Parameter(name="hosted_runner_id", param_type=ParameterType.INTEGER, required=True),  # ID of the runner to delete
        ]

    def get_output_schema(self):
        return [
            
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(DELETE_orgsorgactionshostedrunnershosted_runner_id.method, 
                                           DELETE_orgsorgactionshostedrunnershosted_runner_id.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'DELETE_orgsorgactionshostedrunnershosted_runner_id': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class GET_orgsorgactionsoidccustomizationsub(BaseFunction):
    """Get the customization template for an OIDC subject claim in an organization."""
    name = "GET /orgs/{org}/actions/oidc/customization/sub"
    url = "/orgs/{org}/actions/oidc/customization/sub"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="org", param_type=ParameterType.STRING, required=True),  # Organization name
        ]

    def get_output_schema(self):
        return [
            OutputParameter(name="customization_template", param_type=OutputParameterType.OBJECT, is_array=False),  # The OIDC subject claim customization template.
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(GET_orgsorgactionsoidccustomizationsub.method, 
                                           GET_orgsorgactionsoidccustomizationsub.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'GET_orgsorgactionsoidccustomizationsub': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class PUT_orgsorgactionsoidccustomizationsub(BaseFunction):
    """Set the customization template for an OIDC subject claim in an organization."""
    name = "PUT /orgs/{org}/actions/oidc/customization/sub"
    url = "/orgs/{org}/actions/oidc/customization/sub"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="org", param_type=ParameterType.STRING, required=True),  # Organization name,
			Parameter(name="template", param_type=OutputParameterType.OBJECT, required=True),  # The customization template to set.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(name="updated_template", param_type=OutputParameterType.OBJECT, is_array=False),  # Updated OIDC subject claim customization template.
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(PUT_orgsorgactionsoidccustomizationsub.method, 
                                           PUT_orgsorgactionsoidccustomizationsub.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'PUT_orgsorgactionsoidccustomizationsub': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class GET_orgsorgactionspermissions(BaseFunction):
    """Get GitHub Actions permissions for an organization."""
    name = "GET /orgs/{org}/actions/permissions"
    url = "/orgs/{org}/actions/permissions"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="org", param_type=ParameterType.STRING, required=True),  # Organization name
        ]

    def get_output_schema(self):
        return [
            OutputParameter(name="permissions", param_type=OutputParameterType.STRING, is_array=True),  # List of permissions for the organization.
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(GET_orgsorgactionspermissions.method, 
                                           GET_orgsorgactionspermissions.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'GET_orgsorgactionspermissions': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class PUT_orgsorgactionspermissions(BaseFunction):
    """Set GitHub Actions permissions for an organization."""
    name = "PUT /orgs/{org}/actions/permissions"
    url = "/orgs/{org}/actions/permissions"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="org", param_type=ParameterType.STRING, required=True),  # Organization name,
			Parameter(name="permissions", param_type=OutputParameterType.OBJECT, required=True),  # Permissions settings.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(name="permissions", param_type=OutputParameterType.STRING, is_array=True),  # Updated list of permissions.
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(PUT_orgsorgactionspermissions.method, 
                                           PUT_orgsorgactionspermissions.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'PUT_orgsorgactionspermissions': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class GET_orgsorgactionspermissionsrepositories(BaseFunction):
    """List repositories with GitHub Actions enabled in an organization."""
    name = "GET /orgs/{org}/actions/permissions/repositories"
    url = "/orgs/{org}/actions/permissions/repositories"
    args_in_url = True
    method = GET

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="org", param_type=ParameterType.STRING, required=True),  # Organization name
        ]

    def get_output_schema(self):
        return [
            OutputParameter(name="repositories", param_type=OutputParameterType.OBJECT, is_array=True),  # Repositories with Actions enabled.
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(GET_orgsorgactionspermissionsrepositories.method, 
                                           GET_orgsorgactionspermissionsrepositories.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'GET_orgsorgactionspermissionsrepositories': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)



class PUT_orgsorgactionspermissionsrepositories(BaseFunction):
    """Enable Actions for repositories in an organization."""
    name = "PUT /orgs/{org}/actions/permissions/repositories"
    url = "/orgs/{org}/actions/permissions/repositories"
    args_in_url = True
    method = PUT

    def __init__(self):
        self.api_wrapper = api_wrapper
    
    def get_parameter_schema(self):
        return [
            Parameter(name="org", param_type=ParameterType.STRING, required=True),  # Organization name,
			Parameter(name="repositories", param_type=OutputParameterType.OBJECT, required=True),  # Repositories to enable.
        ]

    def get_output_schema(self):
        return [
            OutputParameter(name="repositories", param_type=OutputParameterType.OBJECT, is_array=True),  # Repositories now with Actions enabled.
        ]
    
    def process(self, input_data: StandardInput) -> StandardOutput:
        try:
            out = self.api_wrapper.request(PUT_orgsorgactionspermissionsrepositories.method, 
                                           PUT_orgsorgactionspermissionsrepositories.url,
                                           input_data.validated_data)
            return StandardOutput(out, self.get_output_schema())
        except Exception as e:
            error_msg = f"Error running function 'PUT_orgsorgactionspermissionsrepositories': {str(e)}"
            logging.error(error_msg)
            raise ValueError(error_msg)

